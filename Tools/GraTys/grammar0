Type:
    BooleanType
    IntegerType
    ArrayType
    TypeName
    KeyType

TypeDescriptor:
    Type
    RecordTypeDescriptor
    EnumerationTypeDescriptor

BooleanType:
    'Bool

IntegerType:
    'Int ( Expression , Expression )
    'Unsigned ( Expression )
    'Signed ( Expression )
    'Bit
    'Byte
    'Word

ArrayType:
    Type '[ ArrayBounds ']

ArrayBounds:
    [ Expression .. ] Expression

TypeName:
    Identifier

KeyType:
    CryptoKeyword ( Expression )

CryptoKeyword: one of
    'AESKey
    'DESKey
    'RSAPublicKey       'RSAPrivateKey    'RSAPrivateCrtKey
    'DSAPublicKey       'DSAPrivateKey
    'ECFPPublicKey     'ECFPPrivateKey

RecordTypeDescriptor:
    rec '{ ProperComponentList '}

ProperComponentList:
    Component { , Component }

Component:
    Type  ComponentName

ComponentName:
    Identifier

EnumerationTypeDescriptor:
    enum '{ ProperOptionList '}

ProperOptionList:
    Option { , Option }

Option:
    OptionName [ ( Type { , Type } ) ]

OptionName:
    Identifier

Expression:
    TightExpression
    ConditionalExpression

TightExpression:
    ClosedExpression
    Formula

ClosedExpression:
    ConstantName
    VariableName
    ArgumentName
    Literal
    BytesToWordConversion
    ArrayConstruction
    ArraySelection
    BitToByteArrayConversion
    IntegerToArrayConversion
    ArrayReversal
    RecordConstruction
    RecordSelection
    TaggedValueConstruction
    RandomExpression
    CryptoExpression
    DigestExpression
    ChecksumExpression
    ( Expression )

ConstantName:
    Identifier

VariableName:
    Identifier

ArgumentName:
    Identifier

Literal:
    BooleanLiteral
    IntegerLiteral

BooleanLiteral:
    true
    false

IntegerLiteral:
    DecimalIntegerLiteral
    HexadecimalIntegerLiteral

BytesToWordConversion:
    word ( Expression , Expression )

ArrayConstruction:
    '{ ProperExpressionList? '}
    repeat ( Expression , Expression )

ArraySelection:
    ClosedExpression '[ ArraySelector ']
    ClosedExpression . length

ArraySelector:
    Expression
    Expression .. Expression
    Expression , Expression

BitToByteArrayConversion:
    bytes ( Expression )

IntegerToArrayConversion:
    ConversionIdentifier Width? ( Expression )

ConversionIdentifier:
    ubits
    sbits
    ubytes
    sbytes

Width:
    '[ Expression ']

ArrayReversal:
    reverse ( Expression )

RecordConstruction:
    Type ( ProperExpressionList )

ProperExpressionList:
    Expression { , Expression }

RecordSelection:
    ClosedExpression . ComponentName

TaggedValueConstruction:
    OptionName [ ( ProperExpressionList ) ]

ConditionalExpression:
    Expression '? Expression ': Expression

RandomExpression:
    random ( Type )

CryptoExpression:
    EncryptDecryptExpression
    SignExpression
    VerifyExpression

EncryptDecryptExpression:
    EncryptDecrypt ( Key , Message [ , EncryptDecryptParameters ] )

EncryptDecrypt: one of
    encrypt  decrypt

Key:
    Expression

Message:
    Expression

EncryptDecryptParameters:
    SymmetricEncryptDecryptParameters
    AsymmetricEncryptDecryptParameters

SymmetricEncryptDecryptParameters:
    Mode [ , SymmetricPaddingMethod ]

Mode:
    'ECB
    'CBC [ , InitializationVector ]

InitializationVector:
    Expression

SymmetricPaddingMethod: one of
    'ISO9797_M1  'ISO9797_M2  'PKCS5  'ISO9797_1_M2_ALG3

AsymmetricEncryptDecryptParameters:
    AsymmetricPaddingMethod

AsymmetricPaddingMethod: one of
    'ISO14888  'ISO9796  'PKCS1  'PKCS1_OAEP  'PKCS1_PSS  'RFC2409

SignExpression:
    sign ( SignArguments )

SignArguments:
    Key , Message [ , SignParameters ]

SignParameters:
    AESSignParameters
    DESSignParameters
    RSASignParameters

AESSignParameters:
    InitializationVector

DESSignParameters:
    Mac [ , InitializationVector ] [ , SymmetricPaddingMethod ]

Mac: one of
    'MAC4  'MAC8

RSASignParameters:
    DigestMethod , AsymmetricPaddingMethod

DigestMethod: one of
    'SHA  'MD5  'RIPEMD160

VerifyExpression:
    verify ( Signature , SignArguments )

Signature:
    Expression

DigestExpression:
    digest ( DigestMethod , Expression )

ChecksumExpression:
    checksum ( ChecksumMethod , Expression , InitializationVector )

ChecksumMethod: one of
    'ISO3309_CRC16  'ISO3309_CRC32

Formula:
    PrefixFormula
    InfixFormula

PrefixFormula:
    PrefixOp  Operand

InfixFormula:
    Operand  InfixOp  Operand

Operator:
    PrefixOp
    InfixOp

PrefixOp: one of
    -  !

InfixOp: one of
    +   -   *   /   %   **   ==   !=   <   <=   >   >=   &&   '|'|   ^^   =>   ++

Operand:
    TightExpression

Block:
    '{ StatementSequence '}

StatementSequence:
    { Statement }

Statement:
    LocalVariableDeclaration
    Assignment
    ResponseStatement
    IfStatement
    SwitchStatement
    WhileStatement
    KeyGeneration

LocalVariableDeclaration:
    Type  VariableName  Initializer? ;

Initializer:
    = Expression

Assignment:
    LeftHandSide = Expression ;

LeftHandSide:
    ConstantName
    VariableName
    LHSArraySelection
    LHSRecordSelection

LHSArraySelection:
    LeftHandSide '[ ArraySelector ']

LHSRecordSelection:
    LeftHandSide . ComponentName

ResponseStatement:
    respond  Response ;
    respondok  OKResponse ;

Response:
    Expression
    '{ Expression , Expression '}
    '{ Expression , Expression , Expression '}

OKResponse:
    Expression?

IfStatement:
    if ( Expression ) Block [ else  ElsePart ]

ElsePart:
    Block
    IfStatement

SwitchStatement:
    switch ( Expression ) '{ CaseSequence '}

CaseSequence:
    { Case } DefaultCase?

Case:
    case  Pattern ': Block

Pattern:
    OptionName [ ( ProperOptionArgumentList ) ]

ProperOptionArgumentList:
    ArgumentName { , ArgumentName }

DefaultCase:
    default ': Block

WhileStatement:
    while ( Expression ) Block

KeyGeneration:
    generate ( LeftHandSide , LeftHandSide { , Expression } )

Specification:
    { Declaration }

Declaration:
    ConstantDeclaration
    TypeDeclaration
    StateSpaceDeclaration
    StateInvariantDeclaration
    InitDeclaration
    SelectDeclaration
    DeselectDeclaration
    CommandDeclaration

ConstantDeclaration:
    const  Type? ConstantName Initializer ;
    const  Type    ConstantName ;

TypeDeclaration:
    type  TypeName = TypeDescriptor ;

StateSpaceDeclaration:
    state '{ ProperStateVariableDeclarationList? '}

ProperStateVariableDeclarationList:
    StateVariableDeclaration { , StateVariableDeclaration }

StateVariableDeclaration:
    Type  VariableName  Initializer?

StateInvariantDeclaration:
    invariant Expression ;

InitDeclaration:
    init ( FormalArgumentList ) Block  ByteRepresentation ;

ByteRepresentation:
    bytes  Expression

SelectDeclaration:
    select  Block

DeselectDeclaration:
    deselect  Block

CommandDeclaration:
    Security?  command  FormalCommand  Block  APDURepresentation ;

Security:
    secure  { SecurityOption }

SecurityOption: one of
    cmac  rmac  cdecrypt  rencrypt  all

FormalCommand:
    CommandName ( FormalArgumentList )

CommandName:
    Identifier

FormalArgumentList:
    [ FormalArgument { , FormalArgument } ]

FormalArgument:
    Type  ArgumentName

APDURepresentation:
    apdu  '{ ProperExpressionList '}

spec
  def rawGrammar =
  [ "Type:"
  , "    'BooleanType"
  , "    IntegerType"
  , "    ArrayType"
  , "    TypeName"
  , "    KeyType"
  , ""
  , "TypeDescriptor:"
  , "    Type"
  , "    RecordTypeDescriptor"
  , "    EnumerationTypeDescriptor"
  , ""
  , "IntegerType:"
  , "    'Int  Min  Max"
  , "    'Unsigned  Expression"
  , "    'Signed  Expression"
  , "    'Bit"
  , "    'Byte"
  , "    'Word"
  , ""
  , "-Min:"
  , "    Expression"
  , ""
  , "-Max:"
  , "    Expression"
  , ""
  , "ArrayType:"
  , "    Type  ArrayBounds"
  , ""
  , "ArrayBounds:"
  , "    !Option  Min  Max"
  , ""
  , "TypeName:"
  , "    Identifier"
  , ""
  , "KeyType:"
  , "    'AESKey  Expression"
  , "    'DESKey  Expression"
  , "    'RSAPublicKey  Expression"
  , "    'RSAPrivateKey  Expression"
  , "    'RSAPrivateCrtKey  Expression"
  , "    'DSAPublicKey  Expression"
  , "    'DSAPrivateKey  Expression"
  , "    'ECFPPublicKey  Expression"
  , "    'ECFPPrivateKey  Expression"
  , ""
  , "RecordTypeDescriptor:"
  , "    !ProperSeq  Component"
  , ""
  , "Component:"
  , "    Type  ComponentName"
  , ""
  , "ComponentName:"
  , "    Identifier"
  , ""
  , "EnumerationTypeDescriptor:"
  , "    !ProperSeq  EnumerationOption"
  , ""
  , "EnumerationOption:"
  , "    OptionName  !Seq  Type"
  , ""
  , "OptionName:"
  , "    Identifier"
  , ""
  , "Expression:"
  , "    ConstantName"
  , "    VariableName"
  , "    ArgumentName"
  , "    Literal"
  , "    BytesToWordConversion"
  , "    ArrayConstruction"
  , "    ArraySelection"
  , "    BitToByteArrayConversion"
  , "    IntegerToArrayConversion"
  , "    ArrayReversal"
  , "    RecordConstruction"
  , "    RecordSelection"
  , "    TaggedValueConstruction"
  , "    RandomExpression"
  , "    CryptoExpression"
  , "    DigestExpression"
  , "    ChecksumExpression"
  , "    Formula"
  , "    ConditionalExpression"
  , ""
  , "ConstantName:"
  , "    Identifier"
  , ""
  , "VariableName:"
  , "    Identifier"
  , ""
  , "ArgumentName:"
  , "    Identifier"
  , ""
  , "Literal:"
  , "    BooleanLiteral"
  , "    IntegerLiteral"
  , ""
  , "BooleanLiteral:"
  , "    'true"
  , "    'false"
  , ""
  , "IntegerLiteral:"
  , "    Nat"
  , ""
  , "BytesToWordConversion:"
  , "    HiByte  LoByte"
  , ""
  , "-HiByte:"
  , "    Expression"
  , ""
  , "-LoByte:"
  , "    Expression"
  , ""
  , "ArrayConstruction:"
  , "    'display  !Seq  Expression"
  , "    'repeat  Expression  NTimes"
  , ""
  , "-NTimes:"
  , "    Expression"
  , ""
  , "ArraySelection:"
  , "    'element  Expression  ArraySelector"
  , "    'lengthOf  Expression"
  , ""
  , "ArraySelector:"
  , "    'single Expression"
  , "    'subFromTo  From  To"
  , "    'subFromLength  From  Length"
  , ""
  , "-From:"
  , "    Expression"
  , ""
  , "-To:"
  , "    Expression"
  , ""
  , "-Length:"
  , "    Expression"
  , ""
  , "BitToByteArrayConversion:"
  , "    Expression"
  , ""
  , "IntegerToArrayConversion:"
  , "    ConversionIdentifier  !Option  Width  Expression"
  , ""
  , "ConversionIdentifier:"
  , "    'ubits"
  , "    'sbits"
  , "    'ubytes"
  , "    'sbytes"
  , ""
  , "-Width:"
  , "    Expression"
  , ""
  , "ArrayReversal:"
  , "    Expression"
  , ""
  , "RecordConstruction:"
  , "    Type  !ProperSeq  Expression"
  , ""
  , "RecordSelection:"
  , "    Expression  ComponentName"
  , ""
  , "TaggedValueConstruction:"
  , "    OptionName  !Seq  Expression"
  , ""
  , "ConditionalExpression:"
  , "    Condition   IfTrue   IfFalse"
  , ""
  , "Condition:"
  , "    Expression"
  , ""
  , "IfTrue:"
  , "    Expression"
  , ""
  , "IfFalse:"
  , "    Expression"
  , ""
  , "RandomExpression:"
  , "    Type"
  , ""
  , "CryptoExpression:"
  , "    EncryptDecryptExpression"
  , "    SignExpression"
  , "    VerifyExpression"
  , ""
  , "EncryptDecryptExpression:"
  , "    EncryptDecrypt  Key  Message  !Option  EncryptDecryptParameters"
  , ""
  , "EncryptDecrypt:"
  , "    'encrypt"
  , "    'decrypt"
  , ""
  , "Key:"
  , "    Expression"
  , ""
  , "Message:"
  , "    Expression"
  , ""
  , "EncryptDecryptParameters:"
  , "    SymmetricEncryptDecryptParameters"
  , "    AsymmetricEncryptDecryptParameters"
  , ""
  , "SymmetricEncryptDecryptParameters:"
  , "    Mode  !Option  SymmetricPaddingMethod"
  , ""
  , "Mode:"
  , "    'ECB"
  , "    'CBC  !Option  InitializationVector"
  , ""
  , "InitializationVector:"
  , "    Expression"
  , ""
  , "SymmetricPaddingMethod:"
  , "    'ISO9797M1"
  , "    'ISO9797M2"
  , "    'PKCS5"
  , "    'ISO97971M2ALG3"
  , ""
  , "AsymmetricEncryptDecryptParameters:"
  , "    AsymmetricPaddingMethod"
  , ""
  , "AsymmetricPaddingMethod:"
  , "    'ISO14888"
  , "    'ISO9796"
  , "    'PKCS1"
  , "    'PKCS1OAEP"
  , "    'PKCS1PSS"
  , "    'RFC2409"
  , ""
  , "SignExpression:"
  , "    SignArguments"
  , ""
  , "SignArguments:"
  , "    Key  Message  !Option  SignParameters"
  , ""
  , "SignParameters:"
  , "    AESSignParameters"
  , "    DESSignParameters"
  , "    RSASignParameters"
  , ""
  , "AESSignParameters:"
  , "    InitializationVector"
  , ""
  , "DESSignParameters:"
  , "    Mac  !Option  InitializationVector  !Option  SymmetricPaddingMethod"
  , ""
  , "Mac:"
  , "    'MAC4"
  , "    'MAC8"
  , ""
  , "RSASignParameters:"
  , "    DigestMethod  AsymmetricPaddingMethod"
  , ""
  , "DigestMethod:"
  , "    'SHA"
  , "    'MD5"
  , "    'RIPEMD160"
  , ""
  , "VerifyExpression:"
  , "    Signature  SignArguments"
  , ""
  , "Signature:"
  , "    Expression"
  , ""
  , "DigestExpression:"
  , "    DigestMethod  Expression"
  , ""
  , "ChecksumExpression:"
  , "    ChecksumMethod  Expression  InitializationVector"
  , ""
  , "ChecksumMethod:"
  , "    'ISO3309CRC16"
  , "    'ISO3309CRC32"
  , ""
  , "Formula:"
  , "    PrefixFormula"
  , "    InfixFormula"
  , ""
  , "PrefixFormula:"
  , "    PrefixOp  Operand"
  , ""
  , "InfixFormula:"
  , "    Operand  InfixOp  Operand"
  , ""
  , "Operator:"
  , "    PrefixOp"
  , "    InfixOp"
  , ""
  , "PrefixOp:"
  , "    'minus"
  , "    'not"
  , ""
  , "InfixOp:"
  , "    'plus"
  , "    'minus"
  , "    'times"
  , "    'dividedBy"
  , "    'modulo"
  , "    'toThepower"
  , "    'equals"
  , "    'unequal"
  , "    'lessThan"
  , "    'atMost"
  , "    'greaterThan"
  , "    'atLeast"
  , "    'and"
  , "    'inclusiveOr"
  , "    'exclusiveOr"
  , "    'implies"
  , "    'concatenate"
  , ""
  , "Operand:"
  , "    Expression"
  , ""
  , "Block:"
  , "    StatementSequence"
  , ""
  , "StatementSequence:"
  , "    !Seq  Statement"
  , ""
  , "Statement:"
  , "    LocalVariableDeclaration"
  , "    Assignment"
  , "    ResponseStatement"
  , "    IfStatement"
  , "    SwitchStatement"
  , "    WhileStatement"
  , "    KeyGeneration"
  , ""
  , "LocalVariableDeclaration:"
  , "    Type  VariableName  !Option  Initializer"
  , ""
  , "Initializer:"
  , "    Expression"
  , ""
  , "Assignment:"
  , "    LeftHandSide  Expression"
  , ""
  , "LeftHandSide:"
  , "    ConstantName"
  , "    VariableName"
  , "    LHSArraySelection"
  , "    LHSRecordSelection"
  , ""
  , "LHSArraySelection:"
  , "    LeftHandSide  ArraySelector"
  , ""
  , "LHSRecordSelection:"
  , "    LeftHandSide  ComponentName"
  , ""
  , "ResponseStatement:"
  , "    'respond  Response"
  , "    'respondok  OKResponse"
  , ""
  , "Response:"
  , "    'oneExpr  Expression"
  , "    'twoExpr  Expression  Expression"
  , "    'threeExpr  Expression  Expression  Expression"
  , ""
  , "OKResponse:"
  , "    !Option  Expression"
  , ""
  , "IfStatement:"
  , "    Expression  Block  !Option  ElsePart"
  , ""
  , "ElsePart:"
  , "    Block"
  , "    IfStatement"
  , ""
  , "SwitchStatement:"
  , "    Expression  CaseSequence"
  , ""
  , "CaseSequence:"
  , "    !Seq  Case  !Option  DefaultCase"
  , ""
  , "Case:"
  , "    Pattern  Block"
  , ""
  , "Pattern:"
  , "    OptionName  !Seq  ArgumentName"
  , ""
  , "DefaultCase:"
  , "    Block"
  , ""
  , "WhileStatement:"
  , "    Expression  Block"
  , ""
  , "KeyGeneration:"
  , "    LeftHandSide  LeftHandSide  !Seq  Expression"
  , ""
  , "Specification:"
  , "    !Seq  Declaration"
  , ""
  , "Declaration:"
  , "    ConstantDeclaration"
  , "    TypeDeclaration"
  , "    StateSpaceDeclaration"
  , "    StateInvariantDeclaration"
  , "    InitDeclaration"
  , "    SelectDeclaration"
  , "    DeselectDeclaration"
  , "    CommandDeclaration"
  , ""
  , "ConstantDeclaration:"
  , "    'initialized  !Option  Type  ConstantName  Initializer"
  , "    'uninitialized  Type  ConstantName"
  , ""
  , "TypeDeclaration:"
  , "    TypeName  TypeDescriptor"
  , ""
  , "StateSpaceDeclaration:"
  , "    !Seq  StateVariableDeclaration"
  , ""
  , "StateVariableDeclaration:"
  , "    Type  VariableName  !Option  Initializer"
  , ""
  , "StateInvariantDeclaration:"
  , "    Expression"
  , ""
  , "InitDeclaration:"
  , "    FormalArgumentList  Block  ByteRepresentation"
  , ""
  , "ByteRepresentation:"
  , "    Expression"
  , ""
  , "SelectDeclaration:"
  , "    Block"
  , ""
  , "DeselectDeclaration:"
  , "    Block"
  , ""
  , "CommandDeclaration:"
  , "    !Option  Security  FormalCommand  Block  APDURepresentation"
  , ""
  , "Security:"
  , "    !Seq  SecurityOption"
  , ""
  , "SecurityOption:"
  , "    'cmac"
  , "    'rmac"
  , "    'cdecrypt"
  , "    'rencrypt"
  , "    'all"
  , ""
  , "FormalCommand:"
  , "    CommandName  FormalArgumentList"
  , ""
  , "CommandName:"
  , "    Identifier"
  , ""
  , "FormalArgumentList:"
  , "    !Seq  FormalArgument"
  , ""
  , "FormalArgument:"
  , "    Type  ArgumentName"
  , ""
  , "APDURepresentation:"
  , "    !ProperSeq  Expression"
  ]
endspec

;;; -*- Mode: Lisp; Syntax: Common-Lisp; Package: snark -*-
;;; File: jepd-relations-tables.lisp
;;; The contents of this file are subject to the Mozilla Public License
;;; Version 1.1 (the "License"); you may not use this file except in
;;; compliance with the License. You may obtain a copy of the License at
;;; http://www.mozilla.org/MPL/
;;;
;;; Software distributed under the License is distributed on an "AS IS"
;;; basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
;;; License for the specific language governing rights and limitations
;;; under the License.
;;;
;;; The Original Code is SNARK.
;;; The Initial Developer of the Original Code is SRI International.
;;; Portions created by the Initial Developer are Copyright (C) 1981-2002.
;;; All Rights Reserved.
;;;
;;; Contributor(s): Mark E. Stickel <stickel@ai.sri.com>.

(in-package :snark)

(defparameter $rcc8-relation-code
  '((tpp . 0) (ntpp . 1) (dc . 2) (ec . 3) (po . 4) (eq . 5) (ntppi . 6) (tppi . 7)))

(defparameter $time-ii-relation-code
  '((< . 0) (d . 1) (o . 2) (m . 3) (s . 4) (f . 5) (= . 6)
    (fi . 7) (si . 8) (mi . 9) (oi . 10) (di . 11) (> . 12)))

(defparameter $time-pp-relation-code
  '((P<P . 0) (P=P . 1) (P>P . 2)))

(defparameter $time-pi-relation-code
  '((P<I . 0) (P_S_I . 1) (P_D_I . 2) (P_F_I . 3) (P>I . 4)))

(defparameter $time-ip-relation-code
  '((I>P . 0) (I_SI_P . 1) (I_DI_P . 2) (I_FI_P . 3) (I<P . 4)))

(defparameter $rcc8-composition-table
  ;; from Cohn, Bennett, Gooday, and Gotts
  ;; "Qualitative Spatial Representation and Reasoning with the Region Connection Calculus"
  ;; Geoinformatica 1 (1997), 1-44
  '((dc dc       dc ec po tpp ntpp tppi ntppi eq)
    (dc ec       dc ec po tpp ntpp              )
    (dc po       dc ec po tpp ntpp              )
    (dc tpp      dc ec po tpp ntpp              )
    (dc ntpp     dc ec po tpp ntpp              )
    (dc tppi     dc                             )
    (dc ntppi    dc                             )
    (dc eq       dc                             )
    (ec dc       dc ec po          tppi ntppi   )
    (ec ec       dc ec po tpp      tppi       eq)
    (ec po       dc ec po tpp ntpp              )
    (ec tpp         ec po tpp ntpp              )
    (ec ntpp           po tpp ntpp              )
    (ec tppi     dc ec                          )
    (ec ntppi    dc                             )
    (ec eq       ec                             )
    (po dc       dc ec po          tppi ntppi   )
    (po ec       dc ec po          tppi ntppi   )
    (po po       dc ec po tpp ntpp tppi ntppi eq)
    (po tpp            po tpp ntpp              )
    (po ntpp           po tpp ntpp              )
    (po tppi     dc ec po          tppi ntppi   )
    (po ntppi    dc ec po          tppi ntppi   )
    (po eq             po                       )
    (tpp dc      dc                             )
    (tpp ec      dc ec                          )
    (tpp po      dc ec po tpp ntpp              )
    (tpp tpp              tpp ntpp              )
    (tpp ntpp                 ntpp              )
    (tpp tppi    dc ec po tpp      tppi       eq)
    (tpp ntppi   dc ec po          tppi ntppi   )
    (tpp eq               tpp                   )
    (ntpp dc     dc                             )
    (ntpp ec     dc                             )
    (ntpp po     dc ec po tpp ntpp              )
    (ntpp tpp                 ntpp              )
    (ntpp ntpp                ntpp              )
    (ntpp tppi   dc ec po tpp ntpp              )
    (ntpp ntppi  dc ec po tpp ntpp tppi ntppi eq)
    (ntpp eq                  ntpp              )
    (tppi dc     dc ec po          tppi ntppi   )
    (tppi ec        ec po          tppi ntppi   )
    (tppi po           po          tppi ntppi   )
    (tppi tpp          po tpp      tppi       eq)
    (tppi ntpp         po tpp ntpp              )
    (tppi tppi                     tppi ntppi   )
    (tppi ntppi                         ntppi   )
    (tppi eq                       tppi         )
    (ntppi dc    dc ec po          tppi ntppi   )
    (ntppi ec          po          tppi ntppi   )
    (ntppi po          po          tppi ntppi   )
    (ntppi tpp         po          tppi ntppi   )
    (ntppi ntpp        po tpp ntpp tppi ntppi eq)
    (ntppi tppi                         ntppi   )
    (ntppi ntppi                        ntppi   )
    (ntppi eq                           ntppi   )
    (eq dc       dc                             )
    (eq ec          ec                          )
    (eq po             po                       )
    (eq tpp               tpp                   )
    (eq ntpp                  ntpp              )
    (eq tppi                       tppi         )
    (eq ntppi                           ntppi   )
    (eq eq                                    eq)))

(defparameter $time-iii-composition-table
  '((< < <)
    (< > < > D DI O OI M MI S SI F FI =)
    (< D < D O M S)
    (< DI <)
    (< O <)
    (< OI < D O M S)
    (< M <)
    (< MI < D O M S)
    (< S <)
    (< SI <)
    (< F < D O M S)
    (< FI <)
    (< = <)
    (> < < > D DI O OI M MI S SI F FI =)
    (> > >)
    (> D > D OI MI F)
    (> DI >)
    (> O > D OI MI F)
    (> OI >)
    (> M > D OI MI F)
    (> MI >)
    (> S > D OI MI F)
    (> SI >)
    (> F >)
    (> FI >)
    (> = >)
    (D < <)
    (D > >)
    (D D D)
    (D DI < > D DI O OI M MI S SI F FI =)
    (D O < D O M S)
    (D OI > D OI MI F)
    (D M <)
    (D MI >)
    (D S D)
    (D SI > D OI MI F)
    (D F D)
    (D FI < D O M S)
    (D = D)
    (DI < < DI O M FI)
    (DI > > DI OI MI SI)
    (DI D D DI O OI S SI F FI =)
    (DI DI DI)
    (DI O DI O FI)
    (DI OI DI OI SI)
    (DI M DI O FI)
    (DI MI DI OI SI)
    (DI S DI O FI)
    (DI SI DI)
    (DI F DI OI SI)
    (DI FI DI)
    (DI = DI)
    (O < <)
    (O > > DI OI MI SI)
    (O D D O S)
    (O DI < DI O M FI)
    (O O < O M)
    (O OI D DI O OI S SI F FI =)
    (O M <)
    (O MI DI OI SI)
    (O S O)
    (O SI DI O FI)
    (O F D O S)
    (O FI < O M)
    (O = O)
    (OI < < DI O M FI)
    (OI > >)
    (OI D D OI F)
    (OI DI > DI OI MI SI)
    (OI O D DI O OI S SI F FI =)
    (OI OI > OI MI)
    (OI M DI O FI)
    (OI MI >)
    (OI S D OI F)
    (OI SI > OI MI)
    (OI F OI)
    (OI FI DI OI SI)
    (OI = OI)
    (M < <)
    (M > > DI OI MI SI)
    (M D D O S)
    (M DI <)
    (M O <)
    (M OI D O S)
    (M M <)
    (M MI F FI =)
    (M S M)
    (M SI M)
    (M F D O S)
    (M FI <)
    (M = M)
    (MI < < DI O M FI)
    (MI > >)
    (MI D D OI F)
    (MI DI >)
    (MI O D OI F)
    (MI OI >)
    (MI M S SI =)
    (MI MI >)
    (MI S D OI F)
    (MI SI >)
    (MI F MI)
    (MI FI MI)
    (MI = MI)
    (S < <)
    (S > >)
    (S D D)
    (S DI < DI O M FI)
    (S O < O M)
    (S OI D OI F)
    (S M <)
    (S MI MI)
    (S S S)
    (S SI S SI =)
    (S F D)
    (S FI < O M)
    (S = S)
    (SI < < DI O M FI)
    (SI > >)
    (SI D D OI F)
    (SI DI DI)
    (SI O DI O FI)
    (SI OI OI)
    (SI M DI O FI)
    (SI MI MI)
    (SI S S SI =)
    (SI SI SI)
    (SI F OI)
    (SI FI DI)
    (SI = SI)
    (F < <)
    (F > >)
    (F D D)
    (F DI > DI OI MI SI)
    (F O D O S)
    (F OI > OI MI)
    (F M M)
    (F MI >)
    (F S D)
    (F SI > OI MI)
    (F F F)
    (F FI F FI =)
    (F = F)
    (FI < <)
    (FI > > DI OI MI SI)
    (FI D D O S)
    (FI DI DI)
    (FI O O)
    (FI OI DI OI SI)
    (FI M M)
    (FI MI DI OI SI)
    (FI S O)
    (FI SI DI)
    (FI F F FI =)
    (FI FI FI)
    (FI = FI)
    (= < <)
    (= > >)
    (= D D)
    (= DI DI)
    (= O O)
    (= OI OI)
    (= M M)
    (= MI MI)
    (= S S)
    (= SI SI)
    (= F F)
    (= FI FI)
    (= = =)))

(defparameter $time-ppp-composition-table
  '((P<P P<P P<P) 
    (P<P P>P P<P P>P P=P) 
    (P<P P=P P<P) 
    (P>P P<P P<P P>P P=P) 
    (P>P P>P P>P) 
    (P>P P=P P>P) 
    (P=P P<P P<P) 
    (P=P P>P P>P) 
    (P=P P=P P=P)))

(defparameter $time-pii-composition-table
  '((P<I < P<I) 
    (P<I > P<I P>I P_D_I P_S_I P_F_I) 
    (P<I D P<I P_D_I P_S_I) 
    (P<I DI P<I) 
    (P<I O P<I) 
    (P<I OI P<I P_D_I P_S_I) 
    (P<I M P<I) 
    (P<I MI P<I P_D_I P_S_I) 
    (P<I S P<I) 
    (P<I SI P<I) 
    (P<I F P<I P_D_I P_S_I) 
    (P<I FI P<I) 
    (P<I = P<I) 
    (P>I < P<I P>I P_D_I P_S_I P_F_I) 
    (P>I > P>I) 
    (P>I D P>I P_D_I P_F_I) 
    (P>I DI P>I) 
    (P>I O P>I P_D_I P_F_I) 
    (P>I OI P>I) 
    (P>I M P>I P_D_I P_F_I) 
    (P>I MI P>I) 
    (P>I S P>I P_D_I P_F_I) 
    (P>I SI P>I) 
    (P>I F P>I) 
    (P>I FI P>I) 
    (P>I = P>I) 
    (P_D_I < P<I) 
    (P_D_I > P>I) 
    (P_D_I D P_D_I) 
    (P_D_I DI P<I P>I P_D_I P_S_I P_F_I) 
    (P_D_I O P<I P_D_I P_S_I) 
    (P_D_I OI P>I P_D_I P_F_I) 
    (P_D_I M P<I) 
    (P_D_I MI P>I) 
    (P_D_I S P_D_I) 
    (P_D_I SI P>I P_D_I P_F_I) 
    (P_D_I F P_D_I) 
    (P_D_I FI P<I P_D_I P_S_I) 
    (P_D_I = P_D_I) 
    (P_S_I < P<I) 
    (P_S_I > P>I) 
    (P_S_I D P_D_I) 
    (P_S_I DI P<I) 
    (P_S_I O P<I) 
    (P_S_I OI P_D_I) 
    (P_S_I M P<I) 
    (P_S_I MI P_F_I) 
    (P_S_I S P_S_I) 
    (P_S_I SI P_S_I) 
    (P_S_I F P_D_I) 
    (P_S_I FI P<I) 
    (P_S_I = P_S_I) 
    (P_F_I < P<I) 
    (P_F_I > P>I) 
    (P_F_I D P_D_I) 
    (P_F_I DI P>I) 
    (P_F_I O P_D_I) 
    (P_F_I OI P>I) 
    (P_F_I M P_S_I) 
    (P_F_I MI P>I) 
    (P_F_I S P_D_I) 
    (P_F_I SI P>I) 
    (P_F_I F P_F_I) 
    (P_F_I FI P_F_I) 
    (P_F_I = P_F_I)))

(defparameter $time-ppi-composition-table
  '((P<P P<I P<I) 
    (P<P P>I P<I P>I P_D_I P_S_I P_F_I) 
    (P<P P_D_I P<I P_D_I P_S_I) 
    (P<P P_S_I P<I) 
    (P<P P_F_I P<I P_D_I P_S_I) 
    (P>P P<I P<I P>I P_D_I P_S_I P_F_I) 
    (P>P P>I P>I) 
    (P>P P_D_I P>I P_D_I P_F_I) 
    (P>P P_S_I P>I P_D_I P_F_I) 
    (P>P P_F_I P>I) 
    (P=P P<I P<I) 
    (P=P P>I P>I) 
    (P=P P_D_I P_D_I) 
    (P=P P_S_I P_S_I) 
    (P=P P_F_I P_F_I)))

(defparameter $time-pip-composition-table
  '((P<I I>P P<P P>P P=P) 
    (P<I I<P P<P) 
    (P<I I_DI_P P<P) 
    (P<I I_SI_P P<P) 
    (P<I I_FI_P P<P) 
    (P>I I>P P>P) 
    (P>I I<P P<P P>P P=P) 
    (P>I I_DI_P P>P) 
    (P>I I_SI_P P>P) 
    (P>I I_FI_P P>P) 
    (P_D_I I>P P>P) 
    (P_D_I I<P P<P) 
    (P_D_I I_DI_P P<P P>P P=P) 
    (P_D_I I_SI_P P>P) 
    (P_D_I I_FI_P P<P) 
    (P_S_I I>P P>P) 
    (P_S_I I<P P<P) 
    (P_S_I I_DI_P P<P) 
    (P_S_I I_SI_P P=P) 
    (P_S_I I_FI_P P<P) 
    (P_F_I I>P P>P) 
    (P_F_I I<P P<P) 
    (P_F_I I_DI_P P>P) 
    (P_F_I I_SI_P P>P) 
    (P_F_I I_FI_P P=P)))

(defparameter $time-ipi-composition-table
  '((I>P P<I < > D DI O OI M MI S SI F FI =) 
    (I>P P>I >) 
    (I>P P_D_I > D OI MI F) 
    (I>P P_S_I > D OI MI F) 
    (I>P P_F_I >) 
    (I<P P<I <) 
    (I<P P>I < > D DI O OI M MI S SI F FI =) 
    (I<P P_D_I < D O M S) 
    (I<P P_S_I <) 
    (I<P P_F_I < D O M S) 
    (I_DI_P P<I < DI O M FI) 
    (I_DI_P P>I > DI OI MI SI) 
    (I_DI_P P_D_I D DI O OI S SI F FI =) 
    (I_DI_P P_S_I DI O FI) 
    (I_DI_P P_F_I DI OI SI) 
    (I_SI_P P<I < DI O M FI) 
    (I_SI_P P>I >) 
    (I_SI_P P_D_I D OI F) 
    (I_SI_P P_S_I S SI =) 
    (I_SI_P P_F_I MI) 
    (I_FI_P P<I <) 
    (I_FI_P P>I > DI OI MI SI) 
    (I_FI_P P_D_I D O S) 
    (I_FI_P P_S_I M) 
    (I_FI_P P_F_I F FI =)))

(defparameter $time-iip-composition-table
  '((< I>P I>P I<P I_DI_P I_SI_P I_FI_P) 
    (< I<P I<P) 
    (< I_DI_P I<P) 
    (< I_SI_P I<P) 
    (< I_FI_P I<P) 
    (> I>P I>P) 
    (> I<P I>P I<P I_DI_P I_SI_P I_FI_P) 
    (> I_DI_P I>P) 
    (> I_SI_P I>P) 
    (> I_FI_P I>P) 
    (D I>P I>P) 
    (D I<P I<P) 
    (D I_DI_P I>P I<P I_DI_P I_SI_P I_FI_P) 
    (D I_SI_P I>P) 
    (D I_FI_P I<P) 
    (DI I>P I>P I_DI_P I_SI_P) 
    (DI I<P I<P I_DI_P I_FI_P) 
    (DI I_DI_P I_DI_P) 
    (DI I_SI_P I_DI_P) 
    (DI I_FI_P I_DI_P) 
    (O I>P I>P I_DI_P I_SI_P) 
    (O I<P I<P) 
    (O I_DI_P I<P I_DI_P I_FI_P) 
    (O I_SI_P I_DI_P) 
    (O I_FI_P I<P) 
    (OI I>P I>P) 
    (OI I<P I<P I_DI_P I_FI_P) 
    (OI I_DI_P I>P I_DI_P I_SI_P) 
    (OI I_SI_P I>P) 
    (OI I_FI_P I_DI_P) 
    (M I>P I>P I_DI_P I_SI_P) 
    (M I<P I<P) 
    (M I_DI_P I<P) 
    (M I_SI_P I_FI_P) 
    (M I_FI_P I<P) 
    (MI I>P I>P) 
    (MI I<P I<P I_DI_P I_FI_P) 
    (MI I_DI_P I>P) 
    (MI I_SI_P I>P) 
    (MI I_FI_P I_SI_P) 
    (S I>P I>P) 
    (S I<P I<P) 
    (S I_DI_P I<P I_DI_P I_FI_P) 
    (S I_SI_P I_SI_P) 
    (S I_FI_P I<P) 
    (SI I>P I>P) 
    (SI I<P I<P I_DI_P I_FI_P) 
    (SI I_DI_P I_DI_P) 
    (SI I_SI_P I_SI_P) 
    (SI I_FI_P I_DI_P) 
    (F I>P I>P) 
    (F I<P I<P) 
    (F I_DI_P I>P I_DI_P I_SI_P) 
    (F I_SI_P I>P) 
    (F I_FI_P I_FI_P) 
    (FI I>P I>P I_DI_P I_SI_P) 
    (FI I<P I<P) 
    (FI I_DI_P I_DI_P) 
    (FI I_SI_P I_DI_P) 
    (FI I_FI_P I_FI_P) 
    (= I>P I>P) 
    (= I<P I<P) 
    (= I_DI_P I_DI_P) 
    (= I_SI_P I_SI_P) 
    (= I_FI_P I_FI_P)))

(defparameter $time-ipp-composition-table
  '((I>P P<P I>P I<P I_DI_P I_SI_P I_FI_P) 
    (I>P P>P I>P) 
    (I>P P=P I>P) 
    (I<P P<P I<P) 
    (I<P P>P I>P I<P I_DI_P I_SI_P I_FI_P) 
    (I<P P=P I<P) 
    (I_DI_P P<P I<P I_DI_P I_FI_P) 
    (I_DI_P P>P I>P I_DI_P I_SI_P) 
    (I_DI_P P=P I_DI_P) 
    (I_SI_P P<P I<P I_DI_P I_FI_P) 
    (I_SI_P P>P I>P) 
    (I_SI_P P=P I_SI_P) 
    (I_FI_P P<P I<P) 
    (I_FI_P P>P I>P I_DI_P I_SI_P) 
    (I_FI_P P=P I_FI_P)))

;;; jepd-relations-tables.lisp

A Test Suite is defined by a directory containing a file Tests.lisp.
The standard Specware test suite(s) are in Specware4/TestSuite and
subdirectories. Specware4/TestSuite/Tests.lisp is an example that
shows all the most useful features.

Each test suite is run in a temporary directory.

If the tests require any files then you need to specify which files to
copy into the temporary directory. There are two commands for this:
(test-files "fil1" "fil2" ...)
or
(test-directories "dir1" "dir2" ...)
All the Specware test suites just copy their current directory:
(test-directories ".")

The tests are specified as a list of the form
(test test1 test2 ...)

where each testi is a list whose first element is a string which is
the name of the test (used for reporting) and subsequent elements are
keyword value pairs. E.g.
      ("RunFib" :swe "computeFib 10"
                :swe-spec "fib"
                :value 89)
which means the test named "RunFib" is evaluating the specware term
computeFib 10 with respect to spec fib and the (lisp) value  should be
89.

There are four types of test.
:swe  EXPR
:sw   UID
:swl  UID
:swll UID

corresponding to the specware toplevel commands with the same
names. EXPR is a specware expression in quotes and UID is a unit id in
quotes. Note that if :swe is relative to a spec other than the base
spec the test needs to include a :swe-spec UID clause.

The clauses that specify the expected consequences of a test have the
following form:

:value  LispValue
:output OutputString
:file-goto-error FilePosition
:files  FileList

:value LispValue 
gives the expected output value of the test (mainly
useful for :swe). The value is compared against the result using the
predicate cl:equal unless there is a clause like 
:value-predicate 'some-equivalence-function 
in which case the lisp function 'some-equivalence-function will be
used (slang-built-in::slang-term-equals-2 is potentially useful).

:output OutputString 
is the expected printed output from running the test (mainly useful
for :sw :swl and :swll). This may include error messages generated by
Specware processing. As the output will frequently contain references
to the (temporary) directory containing the unitIds being processed,
the string "$TESTDIR" is used to represent the temporary directory in
the output string. The easiest way to get the string right, is to run
the test with an empty output string and copy the actual string
generated from the test suite error report.

:file-goto-error FilePosition 
FilePosition is a a list of the form '("file" linenum colnum)
This corresponds to  a specware error that involves going to the point
in the file where the error occurs

:files  FileList
FileList has the form '("File1" "File2" ...)
Checks that the files Filei exist after running the test.


Running Test Suites

(specware-test::run-test-directories "dir1" "dir2" ...)
will run tests in dir1, dir2, ...
The emacs command
M-x sw:run-test-harness
will run (specware-test::run-test-directories "dir")
for the the default directory of the current buffer.

(specware-test::run-test-directories-rec "dir" "dir2" ...)
will run tests in dir1, dir2, ... and all their subdirectories that contain a
Tests.lisp file.
The emacs command
C-u M-x sw:run-test-harness
will run (specware-test::run-test-directories-rec "dir")
for the the default directory of the current buffer.


Reporting

Running the test suite will tell you all the tests that failed and
what happenned versus what was expected.

By default all successful tests are reported. To avoid seeing these do
(setq SPECWARE-TEST::*verbose?* nil)

(test-directories ".")

(test 

 ("Bug 0018 : Cannot generate code from colimit"
  :sw "BBcol#K"
  :output '(";;; Elaborating diagram-colimit at $TESTDIR/BBcol#K"
	    ";;; Elaborating diagram-term at $TESTDIR/BBcol#K"
	    ";;; Elaborating spec at $TESTDIR/BBcol#A"
	    ";;; Generating lisp file $TESTDIR/lisp/BBcol.lisp"
	    (:optional ";; ensure-directories-exist: creating $TESTDIR/lisp/BBcol.lisp")
	    (:optional "creating directory: $TESTDIR/lisp/")
	    (:optional ";; Directory $TESTDIR/lisp/ does not exist, will create.")
	    (:optional 
	     "WARNING: Non-constructive def for STRING-SPE:explode"
	     "WARNING: Non-constructive def for FUNCTIONS::injective?"
	     "WARNING: Non-constructive def for FUNCTIONS::surjective?"
	     "WARNING: Non-constructive def for FUNCTIONS::inverse-1-1"
	     "WARNING: Non-constructive def for INTEGER-SPE:pred"
	     "WARNING: Non-constructive def for INTEGER-SPE:positive?"
	     "WARNING: Non-constructive def for INTEGERAUX::|!-|"
	     "WARNING: Non-constructive def for INTEGER-SPE:+-2"
	     "WARNING: Non-constructive def for INTEGER-SPE:*-2"
	     "WARNING: Non-constructive def for INTEGER-SPE:div-2"
	     "WARNING: Non-constructive def for INTEGER-SPE:divides-2"
	     "WARNING: Non-constructive def for INTEGER-SPE:gcd-2"
	     "WARNING: Non-constructive def for INTEGER-SPE:lcm-2"
	     "WARNING: Non-constructive def for CHAR-SPE:ord")
	    (:optional 
	     ";;; Suppressing generated def for BOOLEAN-SPE:show"
	     ";;; Suppressing generated def for CHAR-SPE:ord"
	     ";;; Suppressing generated def for INTEGERAUX::|!-|"
	     ";;; Suppressing generated def for INTEGER-SPE:+-2"
	     ";;; Suppressing generated def for INTEGER-SPE:--2"
	     ";;; Suppressing generated def for INTEGER-SPE:positive?"
	     ";;; Suppressing generated def for INTEGER-SPE:<-2"
	     ";;; Suppressing generated def for INTEGER-SPE:<=-2"
	     ";;; Suppressing generated def for CHAR-SPE:isLowerCase"
	     ";;; Suppressing generated def for CHAR-SPE:isUpperCase"
	     ";;; Suppressing generated def for CHAR-SPE:isAlpha"
	     ";;; Suppressing generated def for CHAR-SPE:isNum"
	     ";;; Suppressing generated def for CHAR-SPE:isAlphaNum"
	     ";;; Suppressing generated def for CHAR-SPE:isAscii"
	     ";;; Suppressing generated def for CHAR-SPE:show"
	     ";;; Suppressing generated def for CHAR-SPE:toLowerCase"
	     ";;; Suppressing generated def for CHAR-SPE:toString"
	     ";;; Suppressing generated def for CHAR-SPE:toUpperCase"
	     ";;; Suppressing generated def for INTEGER-SPE:*-2"
	     ";;; Suppressing generated def for INTEGER-SPE:div-2"
	     ";;; Suppressing generated def for INTEGER-SPE:div"
	     ";;; Suppressing generated def for INTEGER-SPE:divides-2"
	     ";;; Suppressing generated def for INTEGER-SPE:divides"
	     ";;; Suppressing generated def for INTEGER-SPE:gcd-2"
	     ";;; Suppressing generated def for STRING-SPE:explode"
	     ";;; Suppressing generated def for INTEGER-SPE:rem-2"
	     ";;; Suppressing generated def for STRING-SPE:concat-2"
	     ";;; Suppressing generated def for STRING-SPE:^-2"
	     ";;; Suppressing generated def for NAT-SPE:natToString"
	     ";;; Suppressing generated def for INTEGER-SPE:intToString"
	     ";;; Suppressing generated def for INTEGER-SPE:lcm-2"
	     ";;; Suppressing generated def for INTEGER-SPE:multipleOf-2"
	     ";;; Suppressing generated def for INTEGER-SPE:multipleOf"
	     ";;; Suppressing generated def for INTEGER-SPE:pred"
	     ";;; Suppressing generated def for STRING-SPE:|!length|"
	     ";;; Suppressing generated def for STRING-SPE:substring-3"
	     ";;; Suppressing generated def for NAT-SPE:stringToNat"
	     ";;; Suppressing generated def for INTEGER-SPE:stringToInt"
	     ";;; Suppressing generated def for INTEGER-SPE:toString"
	     ";;; Suppressing generated def for INTEGER-SPE:|!*|"
	     ";;; Suppressing generated def for INTEGER-SPE:|!+|"
	     ";;; Suppressing generated def for INTEGER-SPE:|!-|"
	     ";;; Suppressing generated def for INTEGER-SPE:|!<=|"
	     ";;; Suppressing generated def for INTEGER-SPE:|!<|"
	     ";;; Suppressing generated def for INTEGER-SPE:|!gcd|"
	     ";;; Suppressing generated def for INTEGER-SPE:|!lcm|"
	     ";;; Suppressing generated def for INTEGER-SPE:|!rem|"
	     ";;; Suppressing generated def for NAT-SPE:toString"
	     ";;; Suppressing generated def for STRING-SPE:++-2"
	     ";;; Suppressing generated def for STRING-SPE:compare-2"
	     ";;; Suppressing generated def for STRING-SPE:<-2"
	     ";;; Suppressing generated def for STRING-SPE:<=-2"
	     ";;; Suppressing generated def for STRING-SPE:^"
	     ";;; Suppressing generated def for STRING-SPE:all-1-1"
	     ";;; Suppressing generated def for STRING-SPE:all"
	     ";;; Suppressing generated def for STRING-SPE:compare"
	     ";;; Suppressing generated def for STRING-SPE:concat"
	     ";;; Suppressing generated def for STRING-SPE:concatList"
	     ";;; Suppressing generated def for STRING-SPE:exists-1-1"
	     ";;; Suppressing generated def for STRING-SPE:leq-2"
	     ";;; Suppressing generated def for STRING-SPE:leq"
	     ";;; Suppressing generated def for STRING-SPE:lt-2"
	     ";;; Suppressing generated def for STRING-SPE:lt"
	     ";;; Suppressing generated def for STRING-SPE:map-1-1"
	     ";;; Suppressing generated def for STRING-SPE:newline"
	     ";;; Suppressing generated def for STRING-SPE:sub-2"
	     ";;; Suppressing generated def for STRING-SPE:sub"
	     ";;; Suppressing generated def for STRING-SPE:substring"
	     ";;; Suppressing generated def for STRING-SPE:toScreen"
	     ";;; Suppressing generated def for STRING-SPE:translate-1-1"
	     ";;; Suppressing generated def for STRING-SPE:translate"
	     ";;; Suppressing generated def for STRING-SPE:writeLine"
	     ";;; Suppressing generated def for STRING-SPE:|!<=|"
	     ";;; Suppressing generated def for STRING-SPE:|!<|"
	     ";;; Suppressing generated def for STRING-SPE:|!exists|"
	     ";;; Suppressing generated def for STRING-SPE:|!map|")
	    ""))

 )
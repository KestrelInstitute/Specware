#! /bin/sh

# This script is Eric's attempt at a vastly simplified script to
# bootstrap specware.

# TODO: Jim says he sometimes needs to bootstrap 3 times (could even be more?).
# TODO: Hash the Lisp files (maybe ignoring comments) so you know if anything changed?

# Bootstrapping Specware is (essentially) the process of creating a
# Specware executable from the .sw files (and some handwritten Lisp
# files).  Specware's gen-lisp command turns the .sw files into .lisp
# files, which in turn get compiled and saved as an executable. To
# bootstrap Specware, you need a running copy of Specware!  To get
# around this circularity for the first bootstrap, you can use the
# tarball of the Specware Lisp files that is stored in the SVN repo.

# So, the possible scenarios are:

# 1. If the specware executable file exists, use it to recreate itself from the .sw files.
# 2. Otherwise, use the Lisp files from the tarball to create the specware executable file and go to step 1.

THISSCRIPTDIR="$( cd "$( dirname "$0" )" && pwd )" #Simpler commands can just give "." here, which seems bad.
#echo "(THISSCRIPTDIR: [$THISSCRIPTDIR].)"  # Should be something like /home/ewsmith/Specware/bin
export SPECWARE4=${THISSCRIPTDIR%/*} # Strip the last / and everything after.  This should be something like /home/ewsmith/Specware
#echo "(Setting SPECWARE4 to [$SPECWARE4].)"

#FIXME Change the .exe location in the Emacs scripts, specware-emacs, etc. (where else?):
SPECWARE_EXECUTABLE="$SPECWARE4"/Applications/Specware/bin/unix/Specware4.sbclexe

# To override SBCL_SIZE, preset SBCL_SIZE before invoking this script.
SBCL_SIZE="${SBCL_SIZE:=2400}"

build_executable_from_lisp_files () {
    echo "Building executable from Lisp files:"
    EXIT_ON_ERRORS="$SPECWARE4"/Applications/Handwritten/Lisp/exit-on-errors
    cd "$SPECWARE4"/Applications/Specware/Handwritten/Lisp #yuck
    #FIXME handle the call to SBCL better here:
    #FIXME why were we using the bootstrap image to compile?  --core $SPECWARE4/Applications/Specware/bin/unix/Bootstrap.${IMAGE_EXTENSION}

    # Note: The file being loaded here is
    # $SPECWARE4/Applications/Specware/Handwritten/Lisp/Specware4.lisp,
    # which is essentially a handwritten script used to compile and
    # load the (presumably recently) generated file named
    # $SPECWARE4/Applications/Specware/lisp/Specware4.lisp Do not be
    # confused by the similarity of their names.
    
    CMD="(progn (load \"${EXIT_ON_ERRORS}\") (exiting-on-errors (time (load \"${SPECWARE4}/Applications/Specware/Handwritten/Lisp/Specware4.lisp\"))))"
    #echo $CMD
    LOG="${SPECWARE4}/Applications/Specware/Handwritten/Lisp/Specware4.lisp.compile.log"
    echo "  Compiling the Lisp code (see $LOG):"
    (echo $CMD | sbcl --dynamic-space-size $SBCL_SIZE --end-runtime-options --end-toplevel-options) > $LOG 2>&1
    echo "  Checking that .sfsl files got generated:"    
    ls -lrt "$SPECWARE4"/Applications/Specware/lisp/Specware4*.sfsl
    
    MEMORY_MANAGEMENT="$SPECWARE4"/Applications/Handwritten/Lisp/memory-management
    SAVE_IMAGE="$SPECWARE4"/Applications/Handwritten/Lisp/save-image
    CMD="(progn (progn (load \"$EXIT_ON_ERRORS\") (load \"$MEMORY_MANAGEMENT\") (load \"$SAVE_IMAGE\") (compact-memory nil 0 32000000) (set-gc-parameters-for-build nil) (exiting-on-errors (load \"Specware4.lisp\")) (compact-memory nil -1 0) (set-gc-parameters-for-use nil) (values)) (save-this-lisp-image \"$SPECWARE_EXECUTABLE\" :executable? t))"
    #echo $CMD
    echo "  Building ${SPECWARE_EXECUTABLE}:"
    LOG="${SPECWARE_EXECUTABLE}.log"
    (echo $CMD | sbcl --dynamic-space-size $SBCL_SIZE --end-runtime-options --end-toplevel-options) > $LOG 2>&1
    if [ -f ${SPECWARE_EXECUTABLE} ] ; then
        echo "  Successfully built ${SPECWARE_EXECUTABLE}:"
        ls -lrt ${SPECWARE_EXECUTABLE}
    else
        echo "  Failed to create ${SPECWARE_EXECUTABLE}."
        echo "  See ${LOG} for errors."
        exit 1
    fi
}

TARBALL="${SPECWARE4}/Applications/Specware/SpecwareLispFiles.tgz"  #This should always exist (either from the repo or newer)

# Note: If the SPECWARE_EXECUTABLE is not newer than the tarball, we use the tarball:
if [ -f ${SPECWARE_EXECUTABLE} ] && [ ${SPECWARE_EXECUTABLE} -nt ${TARBALL} ] ; then
    echo "Bootstrapping with existing executable ${SPECWARE_EXECUTABLE}:"
else
    echo "Making an initial executable from the tarball of Lisp files:"
    cd "$SPECWARE4"/Applications/Specware
    echo "Untarring files:"  #FIXME do we ever not want to ovewrite the existing lisp files?
    tar xfzv ${TARBALL} -C lisp
    ls -lrt "$SPECWARE4"/Applications/Specware/lisp/*.lisp
    build_executable_from_lisp_files
fi

# At this point, $SPECWARE_EXECUTABLE should exist but is probably out
# of date, so we use it to recreate itself:

LOG="$SPECWARE4/Applications/Specware/lisp/Specware4.lisp.log"
echo "Generating Lisp files from the .sw files (see $LOG):"
cd "$SPECWARE4"/Applications/Specware/Handwritten/Lisp #yuck

${SPECWARE4}/Applications/Specware/bin/unix/specware-batch.sh <<EOF > $LOG 2>&1
gen-lisp /Applications/Specware/Specware4
EOF

ls -lrt "$SPECWARE4"/Applications/Specware/lisp/Specware4*.lisp
build_executable_from_lisp_files


MetaSlang/Java Code Generator
-----------------------------

The Java code generator can either be called from the Lisp prompt or using
the SpecCalc "generate" construct inside a .sw file. In both cases, an additional 
"option" spec can be supplied that is used to specify certain parameters.
For the format of the option-spec see below.

Command line:
- - - - - - -

    :swj <UnitId> [<option-spec-id>]

Example:
    :swj MyExample MyExampleOptions

where MyExample.sw contains the spec that is to be translated into Java and MyExampleOptions.sw
contains the option-spec (see below).

Inside a .sw file:
- - - - - - - - - 

generate Java <spec-term> with <option-spec-id>

Example contents of a .sw file generating Java code:

  let myspec = spec 
   ...
  endspec
  in
  let myoptions = spec
      def package = "com.mycompany.myapp"
      ...
  endspec
  in
  generate Java myspec with myoptions

[There are also top-level commands to set some of the parameters "globally", call
":swj-config" at the lisp prompt for further information. However, the prefered method is
using the option spec as described here.]

The Option-Spec
---------------
The option spec is a regular MetaSlang spec that is "abused" as an attribute store to be
able to control certain parameters used to the Java code generator.  The parameters are
given by constant operator definitions inside the option-spec.  The following list
contains the operator names and types that are currently interpreted as parameters by the
Java code generator:

Operator name & type     | Used as                                         | Default value
===========================================================================+=====================
package : String         | Name of the Java package for all generated Java | "specware.generated"
                         | class files. The package name also determines   |
                         | the relative path of the generated .java files  |
                         | (see "basedir" parameter)                       |
-------------------------+-------------------------------------------------+---------------------
basedir : String         | The base directory used for the generated Java  | "."
                         | class files. The full path is determine by this |
                         | parameter and the relative path derived from    |
                         | the packge name. For instance, if basedir is    |
                         | "/a/b" and the package name is "c.d.e" then the |
                         | generated Java class files would go into the    |
                         | directory "/a/b/c/d/e".                         |
-------------------------+-------------------------------------------------+---------------------
public : List String     | The list of operators that are to be declared   | []
                         | as "public" in the generated Java code. Only    |
                         | unqualified identifiers can be used in this     |
                         | list. The ops in this list determine the        |
                         | "entry-points" to the generated Java code, if   |
                         | it is embedded in another Java application.     |
-------------------------+-------------------------------------------------+---------------------
imports : List String    | The list of imports that are to be used for     | []                 
                         | all generated Java class files. Each element of |                    
                         | this list has the usual format of the argument  |                    
                         | used by Java's import statement; e,.g.,         |                    
                         | "java.util.*"                                   |                    
-------------------------+-------------------------------------------------+---------------------

Example option-spec:

  spec
    def package = "test.sw.gen"
    def imports = ["java.util.*"]
    def public = ["test2"]
    def basedir = "~/myjavaapps"
  endspec




Translation of Builtin Ops
--------------------------

MetaSlang                                       | Java
================================================+===============================================
String.writeLine(t)                             | System.out.println(t)
String.toScreen(t)                              |
------------------------------------------------+-----------------------------------------------
String.concat(t1,t2)                            | t1 + t2
t1 ++ t2                                        |
t1 ^ t2                                         |
------------------------------------------------+-----------------------------------------------
String.newline                                  | System.getProperty("line.separator")
------------------------------------------------+-----------------------------------------------
String.length(t)                                | t.length()
------------------------------------------------+-----------------------------------------------
String.substring(s,n1,n2)                       | s.substring(n1,n2)
------------------------------------------------+-----------------------------------------------
Nat.toString(n)                                 | String.valueOf(n)
Nat.natToString(n)                              |
Nat.show(n)                                     |
Integer.toString(n)                             |
Integer.intToString(n)                          |
Integer.show(n)                                 |
------------------------------------------------+-----------------------------------------------
Nat.stringToNat(s)                              | Integer.parseInt(s)
Integer.stringToInt(s)                          |
------------------------------------------------+-----------------------------------------------
t1 & t2                                         | t1 && t2
------------------------------------------------+-----------------------------------------------
t1 or t2                                        | t1 || t2
------------------------------------------------+-----------------------------------------------
t1 => t2                                        | t1 ? t2 : true
------------------------------------------------+-----------------------------------------------
t1 <=> t2                                       | t1 ? t2 : !t2
------------------------------------------------+-----------------------------------------------


MetaSlang/Java Interface
========================

In order to use Java methods and classes inside a MetaSlang spec, the following
conventions are used by the Java code generator:

- Java Classes:
  In order to use Java classes as sorts inside MetaSlang, you have to declare the sort without
  a definition term and add corresponding Java import statements using the option-spec (see above).

  Example: use of the Java class "java.util.Vector"

     In the spec:
                      ...
                      sort Vector
                      ...
                      op myvectorop: Vector -> Nat
                      def myvectorop(v) = ...
                      ...

     In the option-spec:
                      ...
                      def imports = [ ..., "java.util.*", ... ]
                      ...

  The code generator interprets all sorts without a definition as base types,
  so that in this case the op myvectorop would become a static method in the
  generated "Primitive" class.

- Accessing Java Instance Methods
  Instance methods as well as static class methods can be called from MetaSlang using
  the following convention:

  Assume, we want to use the instance method "foo(args)" defined in Java class Bar.
  First, the class must be known to MetaSlang by providing a sort declaration
  for the class. Then, an op "foo" must be declared with a signature that corresponds
  to the method's signature with an additional parameter preceeding the others. The sort
  of the parameter must be the class type:

           sort Bar
	   op foo: Bar * T1 * ... * Tn -> T

  where T1 * ... * Tn -> T is the original signature of foo without the additional parameter.
  The T's are the translated MetaSlang sorts that correspond to the Java types occuring in
  foo's signature; see the table below concerning the type conversion. In the MetaSlang code,
  a call to the instance method is created by the Java code generator whenever foo is called.

           def mycode(...) =
             ...
             let b:Bar = ... in
             ...
             ... foo(b,arg1,...argn) ...

  Note, that a definition term must not be given for foo.
  Limitation: using foo as a function symbol in higher-order context will not yield the
  expected result.

- Accessing Java Class Methods
  The access to Java class methods is very similar to instance methods with the difference
  that instead of the type of the first argument, the qualifier of the op declaration is
  used to determine the class name. Therefore, in general, it is not necessary to declare
  the class as a sort. Assume we want to access to class method "Math.abs()" from the Java
  library. We therefore declare the "abs" operator in MetaSlang as follows:

           op Math.abs: Integer -> Nat

  The code generator will then generate a call to the static method "Math.abs()" whenever
  it is used in the MetaSlang spec.  The access to static methods has lower priority than
  the access to instance methods: if the first argument is a user type that is not refined
  in the spec, than the instance call is generated. In other words, a static method in
  class A with first argument of type A will not be accessible from MetaSlang. The latter
  situation is not very common, so it does not represent a limitation of the
  MetaSlang-Java interface in practice.
  
- Accessing Java Constructors
  The access of Java constructors follows the same principle as the access of class
  methods.  The difference is that on the MetaSlang side, an op with a name having the
  prefix "new" and an appropiate result type must be declared.  For instance, the Java
  class "Vector" declares a constructor with no arguments.  If we want to use that in
  MetaSlang, we have to provide the following declarations:

             sort Vector
	     op Vector.new: () -> Vector

  Whenever "Vector.new()" is used as a term in the MetaSlang spec, a call to the
  corresponding Java constructor in the Vector class is generated.  If the class has
  multiple constructors with different parameter lists, multiple "new" ops can be declared
  in the MetaSlang spec with different suffixes (e.g., "new_2") The Java code ignores the
  suffixes, but they are essential for MetaSlang, which doesn't allow the redefinition of
  ops with different signatures.

In general, if multiple methods and constructors from a class in the Java library need to
be accessed in the MetaSlang spec, it is a good idea to structure them using the
"qualifying spec" features of MetaSlang. For instance:

   Vector qualifying spec 
         sort Vector
         op new: () -> Vector
         op add: fa(a) Vector * a -> Vector
         op size: Vector -> Nat
   endspec

   Math qualifying spec
         op max: Integer * Integer -> Integer
         op min: Integer * Integer -> Integer
         ....
   endspec

and then importing the specs into the application spec that uses it. Future version of the
Specware system will provide a utility to convert a given Java class into a spec following
the above conventions.


Type Conversion Java -> MetaSlang
=================================
The following table shows the conversion of Java types to MetaSlang, which can be used
when accessing Java methods from MetaSlang

Java                                   | MetaSlang
---------------------------------------+-------------------------------------------
int                                    | Integer
bool                                   | Boolean
char                                   | Char
void                                   | ()
---------------------------------------+-------------------------------------------
byte                                   | not implemented
short                                  | 
float                                  |
double                                 |
---------------------------------------+-------------------------------------------
Any Java class name                    | MetaSlang sort with the same name
                                       | (sort must be declared in the spec)
---------------------------------------+-------------------------------------------



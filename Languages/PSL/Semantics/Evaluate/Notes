Those names that are dynamic are localOps in the dynamic spec. All other
names in the dynamic spec are static. So why do we need the static spec at all?

Later we would like to have a delta to the dynamic spec. That is, all the names
that are local are names that are introduced in this state or transition. For
this we would need to label the states with both the dynamic and the static spec.
Or come up with some other way to represent the static and dynamic. Perhaps
what is needed is a more abstract representation of the static and dynamic spaces. Perhaps
lists of names for each class .. and make the names separate from what appears in the spec.

So there is overloading of application in three ways:
normal function application
procedure application
map evaluation.

what about the idea of changing the op at the apex to have
as its domain a coproduct rather than primed versions. The problem
is that it complicates the morphisms. Right now we have the
attractive property that if name is not mentioned then the
map is assumed to from identity for that element.

What is the right way to handle variables in scope?

There is a small problem with hierarchies of procedures. We can't flatten
everything since that would eliminate the effect that an inner procedure might
have on the outer procedure state.

Would like to have hierarchies of procedures. But that suggests labelling things
with PSpecs rather than specs?

Really want to have the abstract syntax labelled with specs .. or at lea

a;b is just the graph
do g_i  is one transition for the whole transition and then
lower level where each guard and each command is a transitions (hierarchical)

let
  decls
in
  cmd

three transitions
allocation edge labelled with decls? But what if the decls
are procedures?


(defpackage :LISP-SPEC)
(in-package :LISP-SPEC) 

(defun |!nil|  () nil)
(defun |!nil-1|  (x) (declare (ignore x)) nil)
(defun |!cons| (x y) (cons x y))
(defun |!cons-1| (x) x)
(defun |!car|  (x) (car x))
(defun |!cdr|  (x) (cdr x))
(defun |!symbol|  (pkg name) (intern name (find-package pkg)))
(defun |!symbol-1|  (x) (intern (car x) (find-package (cdr x))))
(defun |!string|   (s) s)
(defun lispstring (s) (string s))
;(defun toString (s) (format nil "~A" s))
(defun |!nat|   (n) n)
(defun |!char|  (c) c)
(defun bool    (b) b)
(defun |!list|  (l) l)
(defun |!null|  (l) (null l))
(defun |!++|    (l1 l2)
  (append l1 l2))
(defun |!++-1|    (x)
  (append (car x) (cdr x)))
(defun |!apply|  (f x) (apply f x))
(defun |!eval|  (x) (eval x))
(defun |!quote| (l) (list 'quote l))
(defun |!print| (x) (print x))
(defun cell (l) l)
(defun uncell (l) l)
(defun fail (s) (error s))

;;(defun |!PPRINT| (term) (write-to-string term :pretty t))
(defun |!PPRINT| (term) (pprint term))

;;; This should be in a separate I/O spec.

;;; With Open File

(defun with-open-file-for-read (name p)
  (with-open-file (s name :direction :input :if-does-not-exist :error)
    (funcall p s)))
(defun with-open-file-for-read-1 (x) (with-open-file-for-read (car x) (cdr x)))

(defun with-open-file-for-write (name p)
  (with-open-file (s name :direction :output :if-exists :new-version)
    (funcall p s)))
(defun with-open-file-for-write-1 (x) (with-open-file-for-write (car x) (cdr x)))

/*
 * MemberCustomizer.java
 *
 * $Id$
 *
 *
 *
 * $Log$
 * Revision 1.1  2003/01/30 02:02:08  gilham
 * Initial version.
 *
 *
 *
 */

package edu.kestrel.netbeans.nodes;

import java.awt.BorderLayout;
import java.beans.Customizer;
import java.beans.PropertyEditor;
import java.util.ResourceBundle;

import javax.swing.*;
import javax.swing.border.*;

import org.openide.src.SourceException;
import org.openide.explorer.propertysheet.*;
import org.openide.explorer.propertysheet.editors.ModifierEditor;
import org.openide.*;
import org.openide.util.Utilities;
import org.openide.util.NbBundle;
import org.openide.util.HelpCtx;

import edu.kestrel.netbeans.Util;
import edu.kestrel.netbeans.editor.MetaSlangSyntax;
import edu.kestrel.netbeans.model.MemberElement;
import edu.kestrel.netbeans.nodes.SourceEditSupport.ExceptionalRunnable;

/** Customizer for MemberElement
 *
 */
public class MemberCustomizer extends JPanel implements Runnable {
    /** Source of the localized human presentable strings. */
    static ResourceBundle bundle = NbBundle.getBundle(MemberCustomizer.class);

    /** The edited spec */
    protected MemberElement element;

    String elementClass;

    boolean isOK = true;

    /** Create new MemberCustomizer component
    * @param element The member element to be customized
    */
    public MemberCustomizer(MemberElement element, String elementClass) {
        this.element = element;
	this.elementClass = elementClass;

        initComponents ();
        
        //borders
        namePanel.setBorder (new CompoundBorder(new TitledBorder(bundle.getString("CTL_"+elementClass+"Frame")),
						new EmptyBorder(new java.awt.Insets(5, 5, 5, 5)))
                                );
        // name
        if (element != null) {
	    nameTextField.setText(element.getName());
	}

        HelpCtx.setHelpIDString (this, "metaslang."+elementClass+".customizer"); // NOI18N
        //mnemonics
        jLabel1.setDisplayedMnemonic(bundle.getString("CTL_Name_Mnemonic").charAt(0));
        initAccessibility();
    }

    public void setElement(MemberElement element) {
	this.element = element;
	String name = (element == null) ? "" : element.getName();
	nameTextField.setText(name);
	revalidate();
    }

    public void requestNameFocus() {
        int len = nameTextField.getText().length();
        nameTextField.setCaretPosition(0);
        nameTextField.moveCaretPosition(len);
	if (element != null) {
	    javax.swing.SwingUtilities.invokeLater(this);
	}
    }

    public void run() {
        nameTextField.requestFocus();
    }
    
    public void addNotify() {
        super.addNotify();

        // select the name
	requestNameFocus();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        namePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField(30);
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        
        setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints1;
        
        setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(6, 6, 6, 6)));
        java.awt.GridBagConstraints gridBagConstraints2;
        
        jLabel1.setText(bundle.getString("CTL_Name"));
        jLabel1.setLabelFor(nameTextField);
        gridBagConstraints2 = new java.awt.GridBagConstraints();
        gridBagConstraints2.insets = new java.awt.Insets(10, 0, 0, 8);
        gridBagConstraints2.anchor = java.awt.GridBagConstraints.EAST;
        namePanel.add(jLabel1, gridBagConstraints2);
        
        nameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTextFieldActionPerformed(evt);
            }
        });

        nameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                nameTextFieldFocusLost(evt);
            }
        });
        
        gridBagConstraints2 = new java.awt.GridBagConstraints();
        gridBagConstraints2.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints2.insets = new java.awt.Insets(10, 0, 0, 0);
        gridBagConstraints2.weightx = 1.0;
        namePanel.add(nameTextField, gridBagConstraints2);
        
        gridBagConstraints2 = new java.awt.GridBagConstraints();
        gridBagConstraints2.weighty = 1.0;
        namePanel.add(jPanel1, gridBagConstraints2);
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 0;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints1.weightx = 1.0;
        add(namePanel, gridBagConstraints1);
        
    }//GEN-END:initComponents

    private void nameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
        changeName();
    }

    private void nameTextFieldFocusLost (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nameTextFieldFocusLost
        if (evt != null && evt.isTemporary())
            return;
	changeName();
    }

    private void changeName() {
	if (element == null) 
	    return;
        final String newName = nameTextField.getText();
        String oldName = element.getName();
        boolean ok = false;
        Exception x = null;

        if (MetaSlangSyntax.isMetaSlangIdentifier(newName)) {
            if (!oldName.equals(newName)) {
                try {
                    SourceEditSupport.runAsUser(element, new ExceptionalRunnable() {
                        public void run() throws SourceException {
			    element.setName(newName);
                        }
                    });
                    ok = true;
                }
                catch (SourceException e) {
                    x = e;
                }
            } else
                return;
        } else {
            x = new IllegalArgumentException("Invalid name"); // NOI18N
            ErrorManager.getDefault().annotate(
                x, ErrorManager.USER, null, 
                bundle.getString("MSG_Not_Valid_Identifier"),
                null, null);
        }
        isOK = ok;
        if (!ok) {
            nameTextField.setText(oldName);
        }
        if (x != null) {
            ErrorManager.getDefault().notify(x);
        }
    }//GEN-LAST:event_nameTextFieldFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel namePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    private void initAccessibility() {
        nameTextField.getAccessibleContext().setAccessibleName(bundle.getString("ACS_"+elementClass+"NameTextField"));
        nameTextField.getAccessibleContext().setAccessibleDescription(bundle.getString("ACS_"+elementClass+"NameTextField"));
        this.getAccessibleContext().setAccessibleDescription("ACSD_"+elementClass+"CustomizerDialog");
    }

    public boolean isOK() {
        nameTextFieldFocusLost(null);
        return isOK;
    }

}

// $ANTLR 2.7.1: "MetaSlangGrammar.g" -> "MetaSlangLexerFromAntlr.java"$

package edu.kestrel.netbeans.parser;

public interface MetaSlangParserFromAntlrTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int INNER_UNIT_REF = 4;
	int IDENTIFIER = 5;
	int LITERAL_spec = 6;
	int LITERAL_endspec = 7;
	int LITERAL_prove = 8;
	int LITERAL_in = 9;
	int LITERAL_using = 10;
	int LITERAL_options = 11;
	int LITERAL_import = 12;
	int LITERAL_sort = 13;
	int LBRACE = 14;
	int COMMA = 15;
	int RBRACE = 16;
	int DOT = 17;
	int LPAREN = 18;
	int RPAREN = 19;
	int LITERAL_op = 20;
	int NON_WORD_SYMBOL = 21;
	int LITERAL_def = 22;
	int LITERAL_theorem = 23;
	int LITERAL_axiom = 24;
	int LITERAL_conjecture = 25;
	int UBAR = 26;
	int LBRACKET = 27;
	int RBRACKET = 28;
	int NAT_LITERAL = 29;
	int CHAR_LITERAL = 30;
	int STRING_LITERAL = 31;
	int LITERAL_true = 32;
	int LITERAL_false = 33;
	int LITERAL_as = 34;
	int LITERAL_case = 35;
	int LITERAL_choose = 36;
	int LITERAL_else = 37;
	int LITERAL_embed = 38;
	// "embed?" = 39
	int LITERAL_ex = 40;
	int LITERAL_fa = 41;
	int LITERAL_fn = 42;
	int LITERAL_if = 43;
	int LITERAL_let = 44;
	int LITERAL_of = 45;
	int LITERAL_project = 46;
	int LITERAL_quotient = 47;
	int LITERAL_relax = 48;
	int LITERAL_restrict = 49;
	int LITERAL_then = 50;
	int LITERAL_where = 51;
	int LITERAL_is = 52;
	int VOCAB = 53;
	int WHITESPACE = 54;
	int LINE_COMMENT = 55;
	int BLOCK_COMMENT = 56;
	int SEMICOLON = 57;
	int DOTDOT = 58;
	int LETTER = 59;
	int DIGIT = 60;
	int CHAR_GLYPH = 61;
	int OTHER_CHAR_GLYPH = 62;
	int ESC = 63;
	int HEXADECIMAL_DIGIT = 64;
	int STRING_LITERAL_GLYPH = 65;
	int WORD_START_MARK = 66;
	int WORD_CONTINUE_MARK = 67;
	int NON_WORD_MARK = 68;
}

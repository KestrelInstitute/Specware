/*
 * SpecsPanel.java
 *
 * $Id$
 *
 *
 *
 * $Log$
 *
 *
 */

package edu.kestrel.netbeans.wizard;

import java.text.MessageFormat;
import java.util.ResourceBundle;
import java.util.Arrays;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import org.openide.WizardDescriptor;
import org.openide.explorer.*;
import org.openide.nodes.*;
import org.openide.src.SourceException;
import org.openide.util.NbBundle;

import org.netbeans.modules.java.ui.IndexedRoot;

import edu.kestrel.netbeans.Util;
import edu.kestrel.netbeans.MetaSlangDataObject;
import edu.kestrel.netbeans.MetaSlangDataNode;
import edu.kestrel.netbeans.model.*;
import edu.kestrel.netbeans.nodes.*;

public class SpecsPanel extends javax.swing.JPanel
    implements WizardDescriptor.Panel, MemberListPanel.ElementCreator, ExplorerManager.Provider {

    private static ResourceBundle bundle = NbBundle.getBundle(SpecsPanel.class);
    private static final MessageFormat SPEC_NAME_FORMAT = 
        new java.text.MessageFormat(bundle.getString("FMT_NewSpecName"));

    /**
     * Reference to the data holder.
     */
    private SpecsWizardData wizardData;

    /** Class customizer which interacts with user
     */
    private MemberCustomizer specCustomizer;
    private MemberListPanel listPanel;
    private ExplorerManager manager;
    private PropertyChangeListener managerListener;
    private int newElementCount = 0;

    public void initialize(SpecsWizardData data) {
        wizardData = data;
        initComponents();
        putClientProperty("WizardPanel_contentSelectedIndex", new Integer(4)); // NOI18N

        listPanel = new MemberListPanel(this);
        
        listPanel.newButton.setToolTipText(SpecsWizardIterator.getString("ACS_NewSpecA11yDesc"));
        listPanel.duplicateButton.setToolTipText(SpecsWizardIterator.getString("ACS_DuplicateSpecA11yDesc"));
        listPanel.deleteButton.setToolTipText(SpecsWizardIterator.getString("ACS_DeleteSpecA11yDesc"));
        listPanel.upButton.setToolTipText(SpecsWizardIterator.getString("ACS_UpSpecA11yDesc"));
        listPanel.downButton.setToolTipText(SpecsWizardIterator.getString("ACS_DownSpecA11yDesc"));
        java.awt.GridBagConstraints gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 2;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints1.insets = new java.awt.Insets(0, 0, 11, 0);
        gridBagConstraints1.weightx = 1.0;
        gridBagConstraints1.weighty = 1.0;
        add(listPanel, gridBagConstraints1);

        specCustomizer = new MemberCustomizer(null, "Spec");

        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 3;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(specCustomizer, gridBagConstraints1);

	Util.log("*** SpecsPanel.initialize(): wizardData.getCustomizedSource().getSpecs()="+printMembers(wizardData.getCustomizedSource().getSpecs()));
        Node n = new MetaSlangDataNode((MetaSlangDataObject) wizardData.getDataObject());
        getExplorerManager().setRootContext(n);
	Node[] nodes = n.getChildren().getNodes();
	if (nodes.length > 0) {
	    try {
		manager.setSelectedNodes(new Node[]{nodes[0]});
	    } catch (Exception e) {
	    }
	}

        specsLabel.setDisplayedMnemonic(SpecsWizardIterator.getString("LBL_Specs_Mnemonic").charAt(0));
        specsLabel.setLabelFor(listPanel);
        initAccessibility();
    }

    public static String printMembers(MemberElement[] members) {
	StringBuffer buf = new StringBuffer("[");
	for (int i = 0; i < members.length; i++) {
	    if (i > 0)
		buf.append(", ");
	    buf.append(members[i].getName());
	}
	buf.append("]");
	return buf.toString();
    }

    private void initAccessibility()
    {
        getAccessibleContext().setAccessibleName(SpecsWizardIterator.getString("ACS_SpecsPanelA11yName"));  // NOI18N
        getAccessibleContext().setAccessibleDescription(SpecsWizardIterator.getString("ACS_SpecsPanelA11yDesc"));  // NOI18N
        headLabel.getAccessibleContext().setAccessibleDescription(SpecsWizardIterator.getString("ACS_Add_specA11yDesc"));  // NOI18N
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        headLabel = new javax.swing.JLabel();
        specsLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        setName(SpecsWizardIterator.getString("TIT_AddSpecsWizardPanel"));
        headLabel.setText(SpecsWizardIterator.getString("LBL_Add_spec"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 0);
        add(headLabel, gridBagConstraints);

        specsLabel.setText(SpecsWizardIterator.getString("LBL_Specs"));
        specsLabel.setLabelFor(listPanel);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        add(specsLabel, gridBagConstraints);

    }//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel specsLabel;
    private javax.swing.JLabel headLabel;
    // End of variables declaration//GEN-END:variables

    public void addNotify() {
        super.addNotify();
        if (managerListener == null) 
            managerListener = new PropertyChangeListener() {
                public void propertyChange(PropertyChangeEvent evt) {
                    if (ExplorerManager.PROP_SELECTED_NODES.equals(evt.getPropertyName())) {
                        handleSelection((Node[])evt.getNewValue());
                    }
                }
            };
        manager.addPropertyChangeListener(managerListener);
        
        handleSelection(manager.getSelectedNodes());
    }
    
    private void handleSelection(Node[] nodes) {
        SpecElement me = null;
        if (nodes.length == 1) {
            me = (SpecElement)nodes[0].getCookie(SpecElement.class);
        }
        customizeSpec(me);
    }
    
    private void customizeSpec(SpecElement me) {
	if (me == null) {
	    specCustomizer.setEnabled(false);
	    specCustomizer.setElement(me);
	} else {
	    specCustomizer.setEnabled(true);
	    specCustomizer.setElement(me);
	    specCustomizer.requestNameFocus();
	}
    }
    
    public void removeNotify() {
        super.removeNotify();
        manager.removePropertyChangeListener(managerListener);
    }

    public MemberElement createElement() throws SourceException {
        SpecElement el = new SpecElement();
        createName(el);
        wizardData.getCustomizedSource().addSpec(el);
        return el;
    }
    
    SpecElement findSpec(SpecElement el) {
        return wizardData.getCustomizedSource().getSpec(el.getName());
    }

    public MemberElement duplicateElement(MemberElement template) throws SourceException {
        SpecElement el;
        try {
            el = (SpecElement)template.clone();
            createName(el);
        }
        catch (java.lang.CloneNotSupportedException ex) {
            System.err.println(ex);
            el = (SpecElement)createElement();
        }
        wizardData.getCustomizedSource().addSpec(el);
        return el;
    }
    
    private void createName(SpecElement el) throws SourceException {
        String name = SPEC_NAME_FORMAT.format(
                new Object[] {
                    new Integer(newElementCount)
                });
        el.setName(name);
        newElementCount++;
    }

    public void deleteElement(MemberElement el) throws SourceException {
        wizardData.getCustomizedSource().removeSpec((SpecElement)el);
    }

    public boolean canDelete(MemberElement el) {
        return !containsOriginal(el);
    }

    private boolean containsOriginal(MemberElement m) {
        SpecElement[] me = wizardData.getOriginalSpecs();
        for (int i = 0; i < me.length; i++) {
            if (m == me[i])
                return true;
        }
        return false;
    }

    /** Get the explorer manager.
     * @return the manager
     */
    public ExplorerManager getExplorerManager() {
        if (manager == null)
            manager = new ExplorerManager();
        return manager;
    }
    /////////////////////////////////////////////////////////////////////////////
    
    public org.openide.util.HelpCtx getHelp() {
        return new org.openide.util.HelpCtx("org.netbeans.modules.java.wizard.SpecDefs"); // NOI18N
    }
    
    public void readSettings(Object settings) {
    }
    
    public void storeSettings(Object settings) {
    }

    public boolean isValid() {
        return true;
    }
    
    public void addChangeListener(javax.swing.event.ChangeListener l) {
    }

    public void removeChangeListener(javax.swing.event.ChangeListener l) {
    }
    
    public java.awt.Component getComponent() {
        return this;
    }
    
    /////////////////////////////////////////////////////////////////////////////
}

/*
 * MemberListPanel.java
 *
 * $Id$
 *
 *
 *
 * $Log$
 * Revision 1.1  2003/01/30 02:02:30  gilham
 * Initial version.
 *
 *
 *
 */

package edu.kestrel.netbeans.wizard;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import org.openide.explorer.*;
import org.openide.nodes.*;
import org.openide.src.SourceException;
import org.netbeans.modules.java.ui.IndexedRoot;

import edu.kestrel.netbeans.model.*;

class MemberListPanel extends javax.swing.JPanel {
    
    private ElementCreator elementCreator;
    private ExplorerManager manager;
    private PropertyChangeListener managerListener;
    private Index indexableParent;

    private static final Node[] EMPTY_SELECTION = new Node[0];

    public MemberListPanel(ElementCreator creator) {
        initComponents();
        initAccessibility();
        elementCreator = creator;

        newButton.setMnemonic(SpecsWizardIterator.getString("LBL_New_Mnemonic").charAt(0));
        duplicateButton.setMnemonic(SpecsWizardIterator.getString("LBL_Duplicate_Mnemonic").charAt(0));
        deleteButton.setMnemonic(SpecsWizardIterator.getString("LBL_Delete_Mnemonic").charAt(0));
        upButton.setMnemonic(SpecsWizardIterator.getString("LBL_Up_Mnemonic").charAt(0));
        downButton.setMnemonic(SpecsWizardIterator.getString("LBL_Down_Mnemonic").charAt(0));
        
        listView.setPopupAllowed(false);
    }
    
    private void initAccessibility()
    {
        listView.getAccessibleContext().setAccessibleName(SpecsWizardIterator.getString("ACS_FieldListViewA11yName"));  // NOI18N
    }
    
    public void requestFocus() {
        listView.requestFocus();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        newButton = new javax.swing.JButton();
        duplicateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        listView = new org.openide.explorer.view.ListView();

        setLayout(new java.awt.GridBagLayout());

        newButton.setToolTipText(SpecsWizardIterator.getString("ACS_NewFieldA11yDesc"));
        newButton.setText(SpecsWizardIterator.getString("LBL_New"));
        newButton.setMargin(new java.awt.Insets(2, 8, 2, 8));
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(newButton, gridBagConstraints);

        duplicateButton.setToolTipText(SpecsWizardIterator.getString("ACS_DuplicateFieldA11yDesc"));
        duplicateButton.setText(SpecsWizardIterator.getString("LBL_Duplicate"));
        duplicateButton.setMargin(new java.awt.Insets(2, 8, 2, 8));
        duplicateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplicateButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(duplicateButton, gridBagConstraints);

        deleteButton.setToolTipText(SpecsWizardIterator.getString("ACS_DeleteFieldA11yDesc"));
        deleteButton.setText(SpecsWizardIterator.getString("LBL_Delete"));
        deleteButton.setMargin(new java.awt.Insets(2, 8, 2, 8));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 11, 0);
        add(deleteButton, gridBagConstraints);

        upButton.setToolTipText(SpecsWizardIterator.getString("ACS_UpFieldA11yDesc"));
        upButton.setText(SpecsWizardIterator.getString("LBL_Up"));
        upButton.setMargin(new java.awt.Insets(2, 8, 2, 8));
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(upButton, gridBagConstraints);

        downButton.setToolTipText(SpecsWizardIterator.getString("ACS_DownFieldA11yDesc"));
        downButton.setText(SpecsWizardIterator.getString("LBL_Down"));
        downButton.setMargin(new java.awt.Insets(2, 8, 2, 8));
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 11, 0);
        add(downButton, gridBagConstraints);

        listView.setToolTipText(SpecsWizardIterator.getString("ACS_FieldListViewA11yDesc"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 11, 11);
        add(listView, gridBagConstraints);

    }//GEN-END:initComponents

    private void duplicateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplicateButtonActionPerformed
        Node[] n = manager.getSelectedNodes();
        try {
            if (n.length > 0)
                updateSelection(new Node[] {
                    manager.getExploredContext().getChildren().findChild(
                        elementCreator.duplicateElement(
                            (MemberElement)n[0].getCookie(MemberElement.class)
                        ).getName()
                    )
                });
        } catch (SourceException ex) {
            // silently
        }
    }//GEN-LAST:event_duplicateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        Node[] n = manager.getSelectedNodes();
        try {
            for (int i = 0; i < n.length; i++) {
                MemberElement el = (MemberElement)n[i].getCookie(MemberElement.class);
                if (elementCreator.canDelete(el)) elementCreator.deleteElement(el);
            }
        } catch (SourceException ex) {
            // silently
        }
        updateSelection(EMPTY_SELECTION);
        updateButtons();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        Node[] n = manager.getSelectedNodes();
        indexableParent.moveDown(indexableParent.indexOf(n[0]));
        updateSelection(EMPTY_SELECTION);
        updateSelection(new Node[] {n[0]});
        updateButtons();
    }//GEN-LAST:event_downButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        Node[] n = manager.getSelectedNodes();
        indexableParent.moveUp(indexableParent.indexOf(n[0]));
        updateSelection(EMPTY_SELECTION);
        updateSelection(new Node[] {n[0]});
        updateButtons();
    }//GEN-LAST:event_upButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        try {
            updateSelection(new Node[] {
                manager.getExploredContext().getChildren().findChild(
                    elementCreator.createElement().getName())
            });
        } catch (SourceException ex) {
            // silently
        }
    }//GEN-LAST:event_newButtonActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.openide.explorer.view.ListView listView;
    protected javax.swing.JButton newButton;
    protected javax.swing.JButton duplicateButton;
    protected javax.swing.JButton downButton;
    protected javax.swing.JButton deleteButton;
    protected javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables

    
    public void addNotify() {
        super.addNotify();
        if (manager == null)
            manager = ExplorerManager.find(this);
        if (managerListener == null)
            managerListener = new java.beans.PropertyChangeListener() {
                public void propertyChange(PropertyChangeEvent evt) {
                    if (ExplorerManager.PROP_SELECTED_NODES.equals(evt.getPropertyName())) {
                        updateButtons();
                    }
                    if (ExplorerManager.PROP_EXPLORED_CONTEXT.equals(evt.getPropertyName())) {
                        indexableParent = (Index)((Node)evt.getNewValue()).getCookie(Index.class);
                        updateButtons();
                    }
                }
            };
        manager.addPropertyChangeListener(managerListener);
        
        Node n = manager.getExploredContext();
        if (n != null)
            indexableParent = (Index)n.getCookie(Index.class);
        updateButtons();
    }
    
    public void removeNotify() {
        super.removeNotify();
        manager.removePropertyChangeListener(managerListener);
    }

    private void updateSelection(final Node node[]) {
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                try {
                    manager.setSelectedNodes(node);
                } catch (java.beans.PropertyVetoException ex) {
                    // silently ignore.
                }
            }
        });
    }

    private void updateButtons() {
        ExplorerManager m = manager;
        Node[] nodes = m.getSelectedNodes();   
        boolean singleSel = nodes.length == 1;

        // these buttons are valid only for single selection
        if (indexableParent != null && singleSel) {
            // If the nodes provide ReorderCookie, they can be reordered inside their parent.
            upButton.setEnabled(!isFirst(nodes[0]));
            downButton.setEnabled(!isLast(nodes[0]));
        } else {
            upButton.setEnabled(false);
            downButton.setEnabled(false);
        }
        
        boolean canRemove = false;
        for (int i = 0; i < nodes.length; i++) {
            if ((nodes[i].canDestroy()) 
                && (elementCreator.canDelete((MemberElement)nodes[i].getCookie(MemberElement.class)))) {
                canRemove = true;
                break;
            }
        }
        deleteButton.setEnabled(canRemove);
        duplicateButton.setEnabled(singleSel);
    }

    protected boolean isFirst(Node n) {
        return indexableParent.indexOf(n) == 0;
    }

    protected boolean isLast(Node n) {
        return indexableParent.indexOf(n) == indexableParent.getNodesCount() - 1;
    }

    protected void removeNode(Node n) {
        try {
            n.destroy();
        } catch (java.io.IOException e) {
        }
    }

    protected void createNewNode(Node parent) {
        try {
            parent.getNewTypes()[0].create();
        } catch (java.io.IOException e) {
        }
    }

    static interface ElementCreator {
        public MemberElement createElement() throws SourceException;
        public MemberElement duplicateElement(MemberElement el) throws SourceException;
        public void deleteElement(MemberElement el) throws SourceException;
        public boolean canDelete(MemberElement el);
    }
}

(in-package "SW-USER")

(defun LIST-SPEC::++-2 (|!s1| |!s2|) (LIST-SPEC::concat-2 |!s1| |!s2|))

(defun ANNSPEC::memberNames-2 (n nms) (LIST-SPEC::member-2 n nms))

(defun MAP-SPEC::app-1-1 (f m) (MAPSTHASHTABLE::app-2 f m))

(defun METASLANG::equalSort?-2 (|!s1| |!s2|) 
  (block 
   nil 
   (if (eq (car |!s1|) :|Arrow|) 
       (let ((pV108 (cdr |!s1|))) 
         (if (eq (car |!s2|) :|Arrow|) 
             (let ((pV153 (cdr |!s2|))) 
               (return 
                (cl:and 
                 (METASLANG::equalSort?-2 (svref pV108 0) (svref pV153 0)) 
                 (METASLANG::equalSort?-2 (svref pV108 1) (svref pV153 1))))))) 
       (if (eq (car |!s1|) :|Product|) 
           (let ((pV145 (car (cdr |!s1|)))) 
             (if (eq (car |!s2|) :|Product|) 
                 (let ((pV148 (car (cdr |!s2|)))) 
                   (return 
                    (labels 
                      ((equalList?--local-0 (x y) 
                        (cl:and 
                         ( =  (LIST-SPEC::|!length| x) (LIST-SPEC::|!length| y)) 
                         (block 
                          nil 
                          (if (null x) 
                              (if (null y) (return t)) 
                              (if (consp x) 
                                  (let ((pV15 (car x))) 
                                    (if (consp y) 
                                        (let ((pV18 (car y))) 
                                          (return 
                                           (cl:and 
                                            (block 
                                             nil 
                                             (return 
                                              (cl:and 
                                               (string=  (car pV15) (car pV18)) 
                                               (METASLANG::equalSort?-2 
                                                (cdr pV15) 
                                                (cdr pV18)))) 
                                             (error 
                                              "Nonexhaustive match failure in equalSort?")) 
                                            (equalList?--local-0 (cdr x) (cdr y))))))))) 
                          (return nil))))) (equalList?--local-0 pV145 pV148)))))) 
           (if (eq (car |!s1|) :|CoProduct|) 
               (let ((pV140 (car (cdr |!s1|)))) 
                 (if (eq (car |!s2|) :|CoProduct|) 
                     (let ((pV143 (car (cdr |!s2|)))) 
                       (return 
                        (labels 
                          ((equalList?--local-0 (x y) 
                            (cl:and 
                             ( =  
                              (LIST-SPEC::|!length| x) 
                              (LIST-SPEC::|!length| y)) 
                             (block 
                              nil 
                              (if (null x) 
                                  (if (null y) (return t)) 
                                  (if (consp x) 
                                      (let ((pV37 (car x))) 
                                        (if (consp y) 
                                            (let ((pV40 (car y))) 
                                              (return 
                                               (cl:and 
                                                (block 
                                                 nil 
                                                 (let ((pV30 (cdr pV37))) 
                                                   (let ((pV32 (cdr pV40))) 
                                                     (return 
                                                      (cl:and 
                                                       (string=  
                                                        (car pV37) 
                                                        (car pV40)) 
                                                       (block 
                                                        nil 
                                                        (if (eq 
                                                             (car pV30) 
                                                             :|None|) 
                                                            (if (eq 
                                                                 (car pV32) 
                                                                 :|None|) 
                                                                (return t)) 
                                                            (if (eq 
                                                                 (car pV30) 
                                                                 :|Some|) 
                                                                (if (eq 
                                                                     (car pV32) 
                                                                     :|Some|) 
                                                                    (return 
                                                                     (METASLANG::equalSort?-2 
                                                                      (cdr pV30) 
                                                                      (cdr pV32)))))) 
                                                        (return nil)))))) 
                                                 (error 
                                                  "Nonexhaustive match failure in equalSort?")) 
                                                (equalList?--local-0 
                                                 (cdr x) 
                                                 (cdr y))))))))) 
                              (return nil))))) 
                          (equalList?--local-0 pV140 pV143)))))) 
               (if (eq (car |!s1|) :|Quotient|) 
                   (let ((pV105 (cdr |!s1|))) 
                     (if (eq (car |!s2|) :|Quotient|) 
                         (let ((pV136 (cdr |!s2|))) 
                           (return 
                            (cl:and 
                             (METASLANG::equalSort?-2 
                              (svref pV105 0) 
                              (svref pV136 0)) 
                             (METASLANG::equalTerm?-2 
                              (svref pV105 1) 
                              (svref pV136 1))))))) 
                   (if (eq (car |!s1|) :|Subsort|) 
                       (let ((pV104 (cdr |!s1|))) 
                         (if (eq (car |!s2|) :|Subsort|) 
                             (let ((pV129 (cdr |!s2|))) 
                               (return 
                                (cl:and 
                                 (METASLANG::equalSort?-2 
                                  (svref pV104 0) 
                                  (svref pV129 0)) 
                                 (METASLANG::equalTerm?-2 
                                  (svref pV104 1) 
                                  (svref pV129 1))))))) 
                       (if (eq (car |!s1|) :|Base|) 
                           (let ((pV103 (cdr |!s1|))) 
                             (let ((pV120 (svref pV103 1))) 
                               (if (eq (car |!s2|) :|Base|) 
                                   (let ((pV122 (cdr |!s2|))) 
                                     (let ((pV124 (svref pV122 1))) 
                                       (return 
                                        (cl:and 
                                         (slang-built-in::slang-term-equals-2 
                                          (svref pV103 0) 
                                          (svref pV122 0)) 
                                         (labels 
                                           ((equalList?--local-0 (x y) 
                                             (cl:and 
                                              ( =  
                                               (LIST-SPEC::|!length| x) 
                                               (LIST-SPEC::|!length| y)) 
                                              (block 
                                               nil 
                                               (if (null x) 
                                                   (if (null y) (return t)) 
                                                   (if (consp x) 
                                                       (if (consp y) 
                                                           (return 
                                                            (cl:and 
                                                             (METASLANG::equalSort?-2 
                                                              (car x) 
                                                              (car y)) 
                                                             (equalList?--local-0 
                                                              (cdr x) 
                                                              (cdr y))))))) 
                                               (return nil))))) 
                                           (equalList?--local-0 pV120 pV124))))))))) 
                           (if (eq (car |!s1|) :|TyVar|) 
                               (if (eq (car |!s2|) :|TyVar|) 
                                   (return 
                                    (string=  
                                     (car (cdr |!s1|)) 
                                     (car (cdr |!s2|))))) 
                               (if (eq (car |!s1|) :|MetaTyVar|) 
                                   (let ((pV109 (car (cdr |!s1|)))) 
                                     (progn (if (eq (car |!s2|) :|MetaTyVar|) 
                                                (return 
                                                 (let ((pV73 (STATE::|!!| pV109))) 
                                                   (block 
                                                    nil 
                                                    (let ((pV74 (svref pV73 0))) 
                                                      (return 
                                                       (let ((pV69 
                                                              (STATE::|!!| 
                                                               (car (cdr |!s2|))))) 
                                                         (block 
                                                          nil 
                                                          (let ((pV70 
                                                                 (svref pV69 0))) 
                                                            (return 
                                                             (cl:or 
                                                              ( =  
                                                               (svref pV73 2) 
                                                               (svref pV69 2)) 
                                                              (block 
                                                               nil 
                                                               (if (eq 
                                                                    (car pV74) 
                                                                    :|Some|) 
                                                                   (let ((pV67 
                                                                          (cdr 
                                                                           pV74))) 
                                                                     (progn (if (eq 
                                                                                 (car 
                                                                                  pV70) 
                                                                                 :|Some|) 
                                                                                (return 
                                                                                 (METASLANG::equalSort?-2 
                                                                                  pV67 
                                                                                  (cdr 
                                                                                   pV70)))) 
                                                                            (return 
                                                                             (METASLANG::equalSort?-2 
                                                                              pV67 
                                                                              |!s2|))))) 
                                                               (if (eq 
                                                                    (car pV70) 
                                                                    :|Some|) 
                                                                   (return 
                                                                    (METASLANG::equalSort?-2 
                                                                     |!s1| 
                                                                     (cdr pV70)))) 
                                                               (return nil))))) 
                                                          (error 
                                                           "Nonexhaustive match failure in equalSort?"))))) 
                                                    (error 
                                                     "Nonexhaustive match failure in equalSort?"))))) 
                                            (return 
                                             (let ((pV82 (STATE::|!!| pV109))) 
                                               (block 
                                                nil 
                                                (let ((pV83 (svref pV82 0))) 
                                                  (return 
                                                   (block 
                                                    nil 
                                                    (if (eq (car pV83) :|Some|) 
                                                        (return 
                                                         (METASLANG::equalSort?-2 
                                                          (cdr pV83) 
                                                          |!s2|))) 
                                                    (return nil)))) 
                                                (error 
                                                 "Nonexhaustive match failure in equalSort?")))))))))))))) 
   (if (eq (car |!s2|) :|MetaTyVar|) 
       (return 
        (let ((pV91 (STATE::|!!| (car (cdr |!s2|))))) 
          (block 
           nil 
           (let ((pV92 (svref pV91 0))) 
             (return 
              (block 
               nil 
               (if (eq (car pV92) :|Some|) 
                   (return (METASLANG::equalSort?-2 |!s1| (cdr pV92)))) 
               (return nil)))) 
           (error "Nonexhaustive match failure in equalSort?"))))) 
   (return nil)))

(defun ANNSPEC::findAQualifierMap-3 (m x y) (MAP-SPEC::apply-2 m (cons x y)))

(defun MAP-SPEC::eval-2 (m x) 
  (let ((pV1 (MAPSTHASHTABLE::apply-2 m x))) 
    (block 
     nil 
     (if (eq (car pV1) :|Some|) 
         (return (cdr pV1)) 
         (if (eq (car pV1) :|None|) (return (SYSTEM-SPEC::fail "inside eval")))) 
     (error "Nonexhaustive match failure in eval"))))

(defun ANNSPEC::foldOverQualifierMap-1-1-1-1 (f e m x-3) 
  (ANNSPEC::foldL-1-1-1-1 
   #'(lambda (pV) 
      (let ((pV1 (car pV))) 
        (block 
         nil 
         (return 
          (funcall f 
                   (vector (car pV1) (cdr pV1) (MAP-SPEC::eval-2 m pV1) (cdr pV)))) 
         (error "Nonexhaustive match failure in foldOverQualifierMap")))) 
   e 
   (MAP-SPEC::domainToList m) 
   x-3))

(defun MAP-SPEC::map-1-1 (f m) (MAPSTHASHTABLE::map-2 f m))

(defun ANNSPEC::mapiAQualifierMap-1-1 (f m) 
  (MAPSTHASHTABLE::mapi-2 
   #'(lambda (pV) 
      (let ((pV1 (car pV))) 
        (block 
         nil 
         (return (funcall f (vector (car pV1) (cdr pV1) (cdr pV)))) 
         (error "Nonexhaustive match failure in mapiAQualifierMap")))) 
   m))

(defun ANNSPEC::mapiPartialAQualifierMap-1-1 (f m) 
  (MAPSTHASHTABLE::mapiPartial-2 
   #'(lambda (pV) 
      (let ((pV1 (car pV))) 
        (block 
         nil 
         (return (funcall f (vector (car pV1) (cdr pV1) (cdr pV)))) 
         (error "Nonexhaustive match failure in mapiPartialAQualifierMap")))) 
   m))

(defun ANNSPEC::qualifierIds (m) 
  (MAPSTHASHTABLE::foldi-3 
   #'(lambda (pV) 
      (let ((pV5 (svref pV 2))) 
        (block 
         nil 
         (let ((pV7 (cdr (svref pV 0)))) 
           (return 
            (if (LIST-SPEC::member-2 pV7 pV5) pV5 (LIST-SPEC::cons-2 pV7 pV5)))) 
         (error "Nonexhaustive match failure in qualifierIds")))) 
   nil 
   m))

(defun ANNSPEC::qualifiers (m) 
  (MAPSTHASHTABLE::foldi-3 
   #'(lambda (pV) 
      (let ((pV5 (svref pV 2))) 
        (block 
         nil 
         (let ((pV6 (car (svref pV 0)))) 
           (return 
            (if (LIST-SPEC::member-2 pV6 pV5) pV5 (LIST-SPEC::cons-2 pV6 pV5)))) 
         (error "Nonexhaustive match failure in qualifiers")))) 
   nil 
   m))

(defun ANNSPEC::removeAQualifierMap-3 (m x y) (MAP-SPEC::remove-2 m (cons x y)))

(defun PRETTYPRINT::blankLines-2 (n text) 
  (if (INTEGER-SPEC::<=-2 n 0) 
      text 
      (cons 
       (cons 0 nil) 
       (PRETTYPRINT::blankLines-2 (INTEGER-SPEC::--2 n 1) text))))

(defun PRETTYPRINT::addBreak-3 (indent |!newlines| text) 
  (cons (cons indent nil) (PRETTYPRINT::blankLines-2 |!newlines| text)))

(defun PRETTYPRINT::blockFill-2 (|!newlines| lines) 
  (PRETTYPRINT::pretty-2 
   (PRETTYPRINT::widthLines lines) 
   #'(lambda (pV) 
      (let ((text (cdr pV))
            (columns (car pV))) 
        (let ((start (PRETTYPRINT::lengthLast text))) 
          (PRETTYPRINT::formatLines-4 
           columns 
           lines 
           text 
           #'(lambda (pV1) 
              (let ((text (svref pV1 2))
                    (pretty (svref pV1 1))) 
                (PRETTYPRINT::formatPretty-3 
                 columns 
                 pretty 
                 (if (PRETTYPRINT::fits?-3 
                      columns 
                      (PRETTYPRINT::widthPretty pretty) 
                      text) 
                     text 
                     (PRETTYPRINT::addBreak-3 
                      (INTEGER-SPEC::+-2 start (svref pV1 0)) 
                      |!newlines| 
                      text)))))))))))

(defun PRETTYPRINT::blockAll-2 (|!newlines| lines) 
  (PRETTYPRINT::pretty-2 
   (PRETTYPRINT::widthLines lines) 
   #'(lambda (pV) 
      (let ((text (cdr pV))
            (columns (car pV))) 
        (let ((start (PRETTYPRINT::lengthLast text))) 
          (PRETTYPRINT::formatLines-4 
           columns 
           lines 
           text 
           #'(lambda (pV1) 
              (PRETTYPRINT::formatPretty-3 
               columns 
               (svref pV1 1) 
               (PRETTYPRINT::addBreak-3 
                (INTEGER-SPEC::+-2 start (svref pV1 0)) 
                |!newlines| 
                (svref pV1 2))))))))))

(defun PRETTYPRINT::blockLinear-2 (|!newlines| lines) 
  (let ((width (PRETTYPRINT::widthLines lines))) 
    (PRETTYPRINT::pretty-2 
     width 
     #'(lambda (pV) 
        (let ((text (cdr pV))
              (columns (car pV))) 
          (if (PRETTYPRINT::fits?-3 columns width text) 
              (PRETTYPRINT::formatPretty-3 
               columns 
               (PRETTYPRINT::blockNone-2 |!newlines| lines) 
               text) 
              (PRETTYPRINT::formatPretty-3 
               columns 
               (PRETTYPRINT::blockAll-2 |!newlines| lines) 
               text)))))))

(defun ANNSPECPRINTER::ppForallTyVars-1-1 (pp |!tyVars|) 
  (block 
   nil 
   (if (null |!tyVars|) (return (PRETTYPRINT::|!string| ""))) 
   (return 
    (let ((pV6 
           (vector 
            (PRETTYPRINT::prettysNone 
             (cons 
              (PRETTYPRINT::|!string| " ") 
              (cons (svref pp 15) (cons (svref pp 22) nil)))) 
            (svref pp 5) 
            (svref pp 31)))) 
      (block 
       nil 
       (return 
        (PRETTYPRINT::prettysNone 
         (cons 
          (svref pV6 0) 
          (cons 
           (PRETTYPRINT::prettysLinear 
            (PRETTYPRINT::addSeparator-1-1 
             (svref pV6 1) 
             (labels 
               ((map--local-0 (l) 
                 (block 
                  nil 
                  (if (null l) 
                      (return nil) 
                      (if (consp l) 
                          (return 
                           (cons 
                            (PRETTYPRINT::|!string| (car l)) 
                            (map--local-0 (cdr l)))))) 
                  (error "Nonexhaustive match failure in ppForallTyVars")))) 
               (map--local-0 |!tyVars|)))) 
           (cons (svref pV6 2) nil))))) 
       (error "Nonexhaustive match failure in ppForallTyVars"))))))

(defun LIST-SPEC::@-2 (|!s1| |!s2|) (LIST-SPEC::concat-2 |!s1| |!s2|))

(defun ANNSPECPRINTER::ppTyVars-1-1 (pp |!tyVars|) 
  (block 
   nil 
   (if (null |!tyVars|) (return (PRETTYPRINT::|!string| ""))) 
   (return 
    (let ((pV6 (vector (svref pp 22) (svref pp 5) (svref pp 31)))) 
      (block 
       nil 
       (return 
        (PRETTYPRINT::prettysNone 
         (cons 
          (svref pV6 0) 
          (cons 
           (PRETTYPRINT::prettysLinear 
            (PRETTYPRINT::addSeparator-1-1 
             (svref pV6 1) 
             (labels 
               ((map--local-0 (l) 
                 (block 
                  nil 
                  (if (null l) 
                      (return nil) 
                      (if (consp l) 
                          (return 
                           (cons 
                            (PRETTYPRINT::|!string| (car l)) 
                            (map--local-0 (cdr l)))))) 
                  (error "Nonexhaustive match failure in ppTyVars")))) 
               (map--local-0 |!tyVars|)))) 
           (cons (svref pV6 2) nil))))) 
       (error "Nonexhaustive match failure in ppTyVars"))))))

(defun SPECCALC::ppFixity (fix) 
  (block 
   nil 
   (if (eq (car fix) :|Infix|) 
       (let ((pV2 (cdr fix))) 
         (let ((pV4 (cdr pV2))
               (pV3 (car pV2))) 
           (if (eq (car pV3) :|Left|) 
               (return 
                (WADLERLINDIG::ppConcat 
                 (cons 
                  (WADLERLINDIG::ppString "infixl ") 
                  (cons (WADLERLINDIG::ppString (NAT-SPEC::toString pV4)) nil)))) 
               (if (eq (car pV3) :|Right|) 
                   (return 
                    (WADLERLINDIG::ppConcat 
                     (cons 
                      (WADLERLINDIG::ppString "infixr ") 
                      (cons 
                       (WADLERLINDIG::ppString (NAT-SPEC::toString pV4)) 
                       nil)))))))) 
       (if (eq (car fix) :|Nonfix|) 
           (return WADLERLINDIG::ppNil) 
           (if (eq (car fix) :|Unspecified|) (return WADLERLINDIG::ppNil)))) 
   (return 
    (SYSTEM-SPEC::fail 
     (STRING-SPEC::^-2 
      (STRING-SPEC::^-2 
       "No match in ppFixity with: '" 
       (SYSTEM-SPEC::toString fix)) 
      "'")))))

(defun SPECCALC::ppAFun (fun) 
  (block 
   nil 
   (if (eq (car fun) :|Equals|) 
       (return (WADLERLINDIG::ppString "=")) 
       (if (eq (car fun) :|Quotient|) 
           (return (WADLERLINDIG::ppString "quotient")) 
           (if (eq (car fun) :|Choose|) 
               (return (WADLERLINDIG::ppString "choose")) 
               (if (eq (car fun) :|Restrict|) 
                   (return (WADLERLINDIG::ppString "restrict")) 
                   (if (eq (car fun) :|Relax|) 
                       (return (WADLERLINDIG::ppString "relax")) 
                       (if (eq (car fun) :|Op|) 
                           (let ((pV12 (cdr fun))) 
                             (let ((pV21 (cdr pV12))
                                   (pV20 (car pV12))) 
                               (progn (if (eq (car pV21) :|Nonfix|) 
                                          (return (SPECCALC::ppQualifiedId pV20)) 
                                          (if (eq (car pV21) :|Unspecified|) 
                                              (return 
                                               (SPECCALC::ppQualifiedId pV20)))) 
                                      (return 
                                       (SPECCALC::ppGrConcat 
                                        (cons 
                                         (WADLERLINDIG::ppString "(") 
                                         (cons 
                                          (SPECCALC::ppQualifiedId pV20) 
                                          (cons 
                                           (WADLERLINDIG::ppString ",") 
                                           (cons 
                                            (SPECCALC::ppFixity pV21) 
                                            (cons 
                                             (WADLERLINDIG::ppString ")") 
                                             nil)))))))))) 
                           (if (eq (car fun) :|Project|) 
                               (return 
                                (WADLERLINDIG::ppConcat 
                                 (cons 
                                  (WADLERLINDIG::ppString "project ") 
                                  (cons (WADLERLINDIG::ppString (cdr fun)) nil)))) 
                               (if (eq (car fun) :|Embed|) 
                                   (return 
                                    (WADLERLINDIG::ppString (car (cdr fun)))) 
                                   (if (eq (car fun) :|Embedded|) 
                                       (return 
                                        (WADLERLINDIG::ppConcat 
                                         (cons 
                                          (WADLERLINDIG::ppString "embedded ") 
                                          (cons 
                                           (WADLERLINDIG::ppString (cdr fun)) 
                                           nil)))) 
                                       (if (eq (car fun) :|Select|) 
                                           (return 
                                            (WADLERLINDIG::ppConcat 
                                             (cons 
                                              (WADLERLINDIG::ppString "select ") 
                                              (cons 
                                               (WADLERLINDIG::ppString (cdr fun)) 
                                               nil)))) 
                                           (if (eq (car fun) :|Nat|) 
                                               (return 
                                                (WADLERLINDIG::ppString 
                                                 (NAT-SPEC::toString (cdr fun)))) 
                                               (if (eq (car fun) :|Char|) 
                                                   (return 
                                                    (WADLERLINDIG::ppString 
                                                     (CHAR-SPEC::toString 
                                                      (cdr fun)))) 
                                                   (if (eq (car fun) :|String|) 
                                                       (return 
                                                        (WADLERLINDIG::ppString 
                                                         (cdr fun))) 
                                                       (if (eq (car fun) :|Bool|) 
                                                           (return 
                                                            (SPECCALC::ppBoolean 
                                                             (cdr fun))) 
                                                           (if (eq 
                                                                (car fun) 
                                                                :|OneName|) 
                                                               (return 
                                                                (WADLERLINDIG::ppString 
                                                                 (car (cdr fun)))) 
                                                               (if (eq 
                                                                    (car fun) 
                                                                    :|TwoNames|) 
                                                                   (let ((pV2 
                                                                          (cdr 
                                                                           fun))) 
                                                                     (return 
                                                                      (SPECCALC::ppQualifiedId 
                                                                       (cons 
                                                                        :|Qualified| 
                                                                        (cons 
                                                                         (svref 
                                                                          pV2 
                                                                          0) 
                                                                         (svref 
                                                                          pV2 
                                                                          1)))))))))))))))))))))) 
   (return 
    (SYSTEM-SPEC::fail 
     (STRING-SPEC::^-2 
      (STRING-SPEC::^-2 "No match in ppAFun with: '" (SYSTEM-SPEC::toString fun)) 
      "'")))))

(defun SPECCALC::ppAProperty-4 (propType name |!tyVars| term) 
  (WADLERLINDIG::ppConcat 
   (cons 
    (SPECCALC::ppPropertyType propType) 
    (cons 
     (WADLERLINDIG::ppString " ") 
     (cons 
      (WADLERLINDIG::ppString name) 
      (cons 
       (WADLERLINDIG::ppGroup 
        (WADLERLINDIG::ppIndent 
         (WADLERLINDIG::ppConcat 
          (cons 
           (WADLERLINDIG::ppString " is") 
           (cons 
            WADLERLINDIG::ppBreak 
            (cons 
             (WADLERLINDIG::ppGroup 
              (WADLERLINDIG::ppConcat 
               (cons 
                (block 
                 nil 
                 (if (null |!tyVars|) (return WADLERLINDIG::ppNil)) 
                 (return 
                  (WADLERLINDIG::ppConcat 
                   (cons 
                    (WADLERLINDIG::ppString "fa (") 
                    (cons 
                     (WADLERLINDIG::ppSep-1-1 
                      (WADLERLINDIG::ppString ",") 
                      (labels 
                        ((map--local-0 (l) 
                          (block 
                           nil 
                           (if (null l) 
                               (return nil) 
                               (if (consp l) 
                                   (return 
                                    (cons 
                                     (WADLERLINDIG::ppString (car l)) 
                                     (map--local-0 (cdr l)))))) 
                           (error "Nonexhaustive match failure in ppAProperty")))) 
                        (map--local-0 |!tyVars|))) 
                     (cons (WADLERLINDIG::ppString ") ") nil)))))) 
                (cons 
                 (WADLERLINDIG::ppString " ") 
                 (cons (SPECCALC::ppATerm term) nil))))) 
             nil)))))) 
       nil))))))

(defun STRING-SPEC::compare-2 (|!s1| |!s2|) 
  (if (STRING-SPEC::lt-2 |!s1| |!s2|) 
      '(:|Less|) 
      (if (STRING-SPEC::lt-2 |!s2| |!s1|) '(:|Greater|) '(:|Equal|))))

(defun ANNTERMPRINTER::htmlPrinter-0 () 
  (let ((nameMap (cons :|Ref| STRINGMAP::empty))) 
    (let ((counter (cons :|Ref| 0))) 
      (labels 
        ((nameNumber (s) 
          (let ((pV1 (STRINGMAP::find-2 (STATE::|!!| nameMap) s))) 
            (block 
             nil 
             (if (eq (car pV1) :|None|) 
                 (return 
                  (let ((n (STATE::|!!| counter))) 
                    (let ((|!ns| (NAT-SPEC::toString n))) 
                      (progn (STATE::|:=-2| 
                              nameMap 
                              (STRINGMAP::insert-3 (STATE::|!!| nameMap) s |!ns|)) 
                             (STATE::|:=-2| counter (INTEGER-SPEC::+-2 n 1)) 
                             |!ns|)))) 
                 (if (eq (car pV1) :|Some|) (return (cdr pV1)))) 
             (error "Nonexhaustive match failure in htmlPrinter"))))) 
        (labels 
          ((ppQid (pV5) 
            (block 
             nil 
             (if (eq (car pV5) :|Qualified|) 
                 (let ((pV6 (cdr pV5))) 
                   (let ((pV8 (cdr pV6))
                         (pV7 (car pV6))) 
                     (return 
                      (if (string=  pV7 METASLANG::UnQualified) 
                          (PRETTYPRINT::lengthString-2 
                           (STRING-SPEC::|!length| pV8) 
                           (STRING-SPEC::^-2 
                            (STRING-SPEC::^-2 
                             (STRING-SPEC::^-2 
                              (STRING-SPEC::^-2 "<a href = #" (nameNumber pV8)) 
                              ">") 
                             pV8) 
                            "</a>")) 
                          (block 
                           nil 
                           (if (string=  "Nat" pV7) 
                               (return (PRETTYPRINT::|!string| pV8)) 
                               (if (string=  "Boolean" pV7) 
                                   (return (PRETTYPRINT::|!string| pV8)))) 
                           (return 
                            (PRETTYPRINT::prettysNone 
                             (cons 
                              (PRETTYPRINT::lengthString-2 
                               (STRING-SPEC::|!length| pV7) 
                               (STRING-SPEC::^-2 
                                (STRING-SPEC::^-2 
                                 (STRING-SPEC::^-2 
                                  (STRING-SPEC::^-2 "<a href = " pV7) 
                                  ".html>") 
                                 pV7) 
                                "</a>")) 
                              (cons 
                               (PRETTYPRINT::|!string| ".") 
                               (cons (PRETTYPRINT::|!string| pV8) nil))))))))))) 
             (error "Nonexhaustive match failure in htmlPrinter")))) 
          (labels 
            ((ppOp (s) 
              (PRETTYPRINT::lengthString-2 
               (STRING-SPEC::|!length| s) 
               (STRING-SPEC::^-2 
                (STRING-SPEC::^-2 
                 (STRING-SPEC::^-2 
                  (STRING-SPEC::^-2 "<a name = " (nameNumber s)) 
                  ">") 
                 s) 
                "</a>")))) 
            (vector 
             (PRETTYPRINT::lengthString-2 3 "<b> and </b>") 
             (PRETTYPRINT::lengthString-2 4 " -> ") 
             (PRETTYPRINT::lengthString-2 6 "<b>axiom </b>") 
             (PRETTYPRINT::lengthString-2 3 "<b> | </b>") 
             (PRETTYPRINT::lengthString-2 6 "<b>case </b>") 
             (PRETTYPRINT::|!string| ", ") 
             (PRETTYPRINT::lengthString-2 11 "<b>conjecture </b>") 
             (PRETTYPRINT::lengthString-2 3 "<b>def </b>") 
             (PRETTYPRINT::lengthString-2 2 "<b>=</b>") 
             (PRETTYPRINT::lengthString-2 5 "<b>else </b>") 
             (PRETTYPRINT::|!string| "") 
             (PRETTYPRINT::lengthString-2 9 "<b>end-module </b>") 
             (PRETTYPRINT::lengthString-2 7 "<b>endspec</b>") 
             (PRETTYPRINT::lengthString-2 2 "<b>=</b>") 
             (PRETTYPRINT::lengthString-2 2 "<b>ex</b>") 
             (PRETTYPRINT::lengthString-2 2 "<b>fa</b>") 
             (PRETTYPRINT::lengthString-2 3 "<b>if </b>") 
             (PRETTYPRINT::lengthString-2 7 "<b>import </b>") 
             (PRETTYPRINT::lengthString-2 2 "<b> in</b>") 
             (PRETTYPRINT::lengthString-2 11 "<b>is </b>") 
             (PRETTYPRINT::|!string| "[") 
             (PRETTYPRINT::lengthString-2 1 "<b>{</b>") 
             (PRETTYPRINT::|!string| "(") 
             (PRETTYPRINT::lengthString-2 3 "<b>fn</b> ") 
             (PRETTYPRINT::lengthString-2 3 "<b>let </b>") 
             (PRETTYPRINT::lengthString-2 7 "<b>module </b>") 
             (PRETTYPRINT::lengthString-2 2 "<b>of </b>") 
             (PRETTYPRINT::lengthString-2 2 "<b>op</b>") 
             (PRETTYPRINT::lengthString-2 3 "<b> * </b>") 
             (PRETTYPRINT::|!string| "]") 
             (PRETTYPRINT::lengthString-2 1 "<b>}</b>") 
             (PRETTYPRINT::|!string| ")") 
             (PRETTYPRINT::lengthString-2 4 "<b>sort</b>") 
             (PRETTYPRINT::lengthString-2 5 "<b>spec </b>") 
             (PRETTYPRINT::lengthString-2 6 "<b> then </b>") 
             (PRETTYPRINT::lengthString-2 8 "<b>theorem </b>") 
             (PRETTYPRINT::lengthString-2 1 "<b>_</b>") 
             (PRETTYPRINT::lengthString-2 4 "<b>where</b>") 
             #'PRETTYPRINT::|!string| 
             #'PRETTYPRINT::|!string| 
             #'PRETTYPRINT::|!string| 
             #'ppOp 
             #'ppQid 
             #'ppQid 
             #'ppQid 
             #'ppOp 
             #'ppQid)))))))

(defun PRETTYPRINT::newlineAndBlanks (n) 
  (STRING-SPEC::^-2 (PRETTYPRINT::newlineString-0) (PRETTYPRINT::blanks n)))

(defun PRETTYPRINT::toFileWithNewline-3 (fileName text newlineIndent) 
  (IO-SPEC::withOpenFileForWrite-2 
   fileName 
   #'(lambda (|!stream|) 
      (PRETTYPRINT::toStreamT-4 
       text 
       #'(lambda (pV) 
          (block 
           nil 
           (return (PRETTYPRINT::streamWriter-2 |!stream| (cdr (car pV)))) 
           (error "Nonexhaustive match failure in toFileWithNewline"))) 
       nil 
       #'(lambda (pV) 
          (block 
           nil 
           (return 
            (PRETTYPRINT::streamWriter-2 
             |!stream| 
             (funcall newlineIndent (car pV)))) 
           (error "Nonexhaustive match failure in toFileWithNewline")))))))

(defun PRETTYPRINT::toFile-2 (fileName text) 
  (PRETTYPRINT::toFileWithNewline-3 
   fileName 
   text 
   #'PRETTYPRINT::newlineAndBlanks))

(defun ANNSPECPRINTER::htmlSpecToFile-2 (fileName spc) 
  (PRETTYPRINT::toFile-2 
   fileName 
   (PRETTYPRINT::format-2 90 (ANNSPECPRINTER::htmlSpecToPretty spc))))

(defun PRETTYPRINT::latexBlanks (n) 
  (if ( =  n 0) 
      "" 
      (STRING-SPEC::^-2 
       (STRING-SPEC::^-2 
        "\\SWspace{" 
        (NAT-SPEC::toString (INTEGER-SPEC::*-2 6 n))) 
       "}")))

(defun PRETTYPRINT::latexNewlineAndBlanks (n) 
  (STRING-SPEC::^-2 
   (STRING-SPEC::^-2 "\\\\[0.3em]" (PRETTYPRINT::newlineString-0)) 
   (PRETTYPRINT::latexBlanks n)))

(defun PRETTYPRINT::toLatexFile-2 (fileName text) 
  (PRETTYPRINT::toFileWithNewline-3 
   fileName 
   text 
   #'PRETTYPRINT::latexNewlineAndBlanks))

(defun ANNSPECPRINTER::latexSpecToFile-2 (fileName spc) 
  (PRETTYPRINT::toLatexFile-2 
   fileName 
   (PRETTYPRINT::format-2 90 (ANNSPECPRINTER::latexSpecToPretty spc))))

(defun ANNSPECPRINTER::positive? (n) (if (INTEGER-SPEC::>-2 n 0) 1 0))

(defun PRETTYPRINT::appendFileWithNewline-3 (fileName text newlineIndent) 
  (labels 
    ((writeFun (|!stream|) 
      (PRETTYPRINT::toStreamT-4 
       text 
       #'(lambda (pV) 
          (block 
           nil 
           (return (PRETTYPRINT::streamWriter-2 |!stream| (cdr (car pV)))) 
           (error "Nonexhaustive match failure in appendFileWithNewline"))) 
       nil 
       #'(lambda (pV) 
          (block 
           nil 
           (return 
            (PRETTYPRINT::streamWriter-2 
             |!stream| 
             (funcall newlineIndent (car pV)))) 
           (error "Nonexhaustive match failure in appendFileWithNewline")))))) 
    (progn (IO-SPEC::withOpenFileForAppend-2 fileName #'writeFun) nil)))

(defun PRETTYPRINT::appendFile-2 (fileName text) 
  (PRETTYPRINT::appendFileWithNewline-3 
   fileName 
   text 
   #'PRETTYPRINT::newlineAndBlanks))

(defun PRETTYPRINT::appendLatexFile-2 (fileName text) 
  (PRETTYPRINT::appendFileWithNewline-3 
   fileName 
   text 
   #'PRETTYPRINT::latexNewlineAndBlanks))

(defun ANNSPECPRINTER::pdfOneSpecToFile-3 (counter fileName spc) 
  (let ((spc1 
         (ANNSPECPRINTER::ppSpec-1-1 
          (ANNSPECPRINTER::initialize-2 
           (ANNTERMPRINTER::pdfPrinter-2 counter "???") 
           nil) 
          spc))) 
    (let ((menu (ANNSPECPRINTER::pdfMenu spc))) 
      (progn (PRETTYPRINT::appendFile-2 
              fileName 
              (PRETTYPRINT::format-2 90 (PRETTYPRINT::|!string| "\\newpage"))) 
             (PRETTYPRINT::appendLatexFile-2 
              fileName 
              (PRETTYPRINT::format-2 90 (ANNSPECPRINTER::makeSpecListing spc1))) 
             menu))))

(defun ANNSPECPRINTER::pdfPostLudeToFile-2 (fileName menues) 
  (PRETTYPRINT::appendFile-2 
   fileName 
   (PRETTYPRINT::format-2 
    90 
    (PRETTYPRINT::prettysAll 
     (LIST-SPEC::++-2 
      (LIST-SPEC::++-2 
       (cons (PRETTYPRINT::|!string| "\\pdfendthread") nil) 
       menues) 
      (cons 
       (PRETTYPRINT::|!string| "\\pdfcatalog{ /PageMode /UseOutlines }") 
       (cons (PRETTYPRINT::|!string| "\\end{document}") nil)))))))

(defun ANNSPECPRINTER::pdfPreludeToFile (fileName) 
  (let ((sw2000 
         (let ((pV1 (SYSTEM-SPEC::getEnv "SPECWARE2000"))) 
           (block 
            nil 
            (if (eq (car pV1) :|None|) 
                (return "??SPECWARE2000??") 
                (if (eq (car pV1) :|Some|) (return (cdr pV1)))) 
            (error "Nonexhaustive match failure in pdfPreludeToFile"))))) 
    (PRETTYPRINT::toFile-2 
     fileName 
     (PRETTYPRINT::format-2 
      90 
      (PRETTYPRINT::prettysAll 
       (cons 
        (PRETTYPRINT::|!string| "\\documentclass{article}") 
        (cons 
         (PRETTYPRINT::|!string| 
          (STRING-SPEC::^-2 
           (STRING-SPEC::^-2 "\\input{" sw2000) 
           "/doc/pdf-sources/megamacros}")) 
         (cons 
          (PRETTYPRINT::|!string| "\\begin{document}") 
          (cons (PRETTYPRINT::|!string| "\\pdfthread num 1") nil)))))))))

(defun ANNSPECPRINTER::pdfSpecsToFile-2 (fileName spcs) 
  (PRETTYPRINT::toFile-2 
   fileName 
   (PRETTYPRINT::format-2 90 (ANNSPECPRINTER::pdfSpecsToPretty spcs))))

(defun PRETTYPRINT::toFileWithPathIndexing-2 (fileName text) 
  (labels 
    ((appendString (pV3 pV4 pV5 pV6) 
      (block 
       nil 
       (let ((pV10 (svref pV6 3))
             (pV8 (svref pV6 1))) 
         (return 
          (if (svref pV6 2) 
              (if (svref pV6 0) 
                  (vector nil pV8 nil pV10) 
                  (vector nil 0 nil (PRETTYPRINT::shift-3 pV5 pV8 pV10))) 
              (block 
               nil 
               (if (string=  "%(" pV5) 
                   (return (vector nil pV8 t pV10)) 
                   (if (string=  "%)" pV5) 
                       (return 
                        (vector nil 0 nil (PRETTYPRINT::reduce-2 pV8 pV10))) 
                       (if (string=  "%[" pV5) (return (vector t pV8 t pV10))))) 
               (return 
                (progn (PRETTYPRINT::streamWriter-2 pV3 pV5) 
                       (vector nil (INTEGER-SPEC::+-2 pV8 pV4) nil pV10))))))) 
       (error "Nonexhaustive match failure in toFileWithPathIndexing")))) 
    (labels 
      ((writeFun (|!stream|) 
        (let ((base (vector nil 0 nil nil))) 
          (labels 
            ((|!loop| (text0 indent) 
              (block 
               nil 
               (if (null text0) 
                   (return 
                    (let ((pV11 (cons indent (PRETTYPRINT::blanks indent)))) 
                      (block 
                       nil 
                       (return 
                        (appendString |!stream| (car pV11) (cdr pV11) base)) 
                       (error 
                        "Nonexhaustive match failure in toFileWithPathIndexing")))) 
                   (if (consp text0) 
                       (let ((pV40 (cdr text0))
                             (pV39 (car text0))) 
                         (let ((pV42 (cdr pV39))) 
                           (progn (if (consp pV42) 
                                      (if ( =  0 (car (car pV42))) 
                                          (if (null (cdr pV42)) 
                                              (return 
                                               (let ((pV18 (|!loop| pV40 0))) 
                                                 (block 
                                                  nil 
                                                  (return 
                                                   (progn (PRETTYPRINT::streamWriter-2 
                                                           |!stream| 
                                                           (PRETTYPRINT::newlineAndBlanks 
                                                            indent)) 
                                                          (vector 
                                                           (svref pV18 0) 
                                                           (INTEGER-SPEC::+-2 
                                                            (INTEGER-SPEC::+-2 
                                                             (svref pV18 1) 
                                                             indent) 
                                                            1) 
                                                           (svref pV18 2) 
                                                           (svref pV18 3)))) 
                                                  (error 
                                                   "Nonexhaustive match failure in toFileWithPathIndexing"))))))) 
                                  (return 
                                   (let ((head (|!loop| pV40 (car pV39)))) 
                                     (let ((pV24 
                                            (labels 
                                              ((foldr--local-0 (base l) 
                                                (block 
                                                 nil 
                                                 (if (null l) 
                                                     (return base) 
                                                     (if (consp l) 
                                                         (let ((pV35 (car l))) 
                                                           (return 
                                                            (let ((pV30 
                                                                   (foldr--local-0 
                                                                    base 
                                                                    (cdr l)))) 
                                                              (block 
                                                               nil 
                                                               (return 
                                                                (appendString 
                                                                 |!stream| 
                                                                 (car pV35) 
                                                                 (cdr pV35) 
                                                                 pV30)) 
                                                               (error 
                                                                "Nonexhaustive match failure in toFileWithPathIndexing"))))))) 
                                                 (error 
                                                  "Nonexhaustive match failure in toFileWithPathIndexing")))) 
                                              (foldr--local-0 head pV42)))) 
                                       (block 
                                        nil 
                                        (return 
                                         (progn (PRETTYPRINT::streamWriter-2 
                                                 |!stream| 
                                                 (PRETTYPRINT::newlineAndBlanks 
                                                  indent)) 
                                                (vector 
                                                 (svref pV24 0) 
                                                 (INTEGER-SPEC::+-2 
                                                  (INTEGER-SPEC::+-2 
                                                   (svref pV24 1) 
                                                   indent) 
                                                  1) 
                                                 (svref pV24 2) 
                                                 (svref pV24 3)))) 
                                        (error 
                                         "Nonexhaustive match failure in toFileWithPathIndexing")))))))))) 
               (error "Nonexhaustive match failure in toFileWithPathIndexing")))) 
            (block 
             nil 
             (if (null text) 
                 (return base) 
                 (if (consp text) 
                     (let ((pV58 (car text))) 
                       (let ((pV61 (cdr pV58))) 
                         (return 
                          (let ((head (|!loop| (cdr text) (car pV58)))) 
                            (labels 
                              ((foldr--local-0 (base l) 
                                (block 
                                 nil 
                                 (if (null l) 
                                     (return base) 
                                     (if (consp l) 
                                         (let ((pV54 (car l))) 
                                           (return 
                                            (let ((pV49 
                                                   (foldr--local-0 base (cdr l)))) 
                                              (block 
                                               nil 
                                               (return 
                                                (appendString 
                                                 |!stream| 
                                                 (car pV54) 
                                                 (cdr pV54) 
                                                 pV49)) 
                                               (error 
                                                "Nonexhaustive match failure in toFileWithPathIndexing"))))))) 
                                 (error 
                                  "Nonexhaustive match failure in toFileWithPathIndexing")))) 
                              (foldr--local-0 head pV61)))))))) 
             (error "Nonexhaustive match failure in toFileWithPathIndexing")))))) 
      (let ((pV62 (IO-SPEC::withOpenFileForWrite-2 fileName #'writeFun))) 
        (block 
         nil 
         (return (svref pV62 3)) 
         (error "Nonexhaustive match failure in toFileWithPathIndexing"))))))

(defun PRETTYPRINT::toPathFiles-3 (fileName pathFileName text) 
  (let ((trees (PRETTYPRINT::toFileWithPathIndexing-2 fileName text))) 
    (labels 
      ((writeFun (|!stream|) 
        (PRETTYPRINT::streamWriter-2 
         |!stream| 
         (STRING-SPEC::^-2 
          (STRING-SPEC::^-2 
           "(mspe-add-extents '(" 
           (PRETTYPRINT::treesToString trees)) 
          "))")))) 
      (progn (IO-SPEC::withOpenFileForWrite-2 pathFileName #'writeFun) nil))))

(defun ANNSPECPRINTER::printMarkedSpecToFile-5
 (fileName pathFileName indicesToDisable sosIndicesToEnable spc) 
  (let ((context 
         (ANNSPECPRINTER::initializeMark-3 
          ANNTERMPRINTER::asciiPrinter 
          indicesToDisable 
          sosIndicesToEnable))) 
    (let ((specToPretty (ANNSPECPRINTER::ppSpec context))) 
      (progn (PRETTYPRINT::toPathFiles-3 
              fileName 
              pathFileName 
              (PRETTYPRINT::format-2 90 (funcall specToPretty spc))) 
             (STATE::|!!| (svref context 3))))))

(defun ANNSPECPRINTER::printSpecToFile-2 (fileName spc) 
  (PRETTYPRINT::toFile-2 
   fileName 
   (PRETTYPRINT::format-2 90 (ANNSPECPRINTER::specToPretty spc))))

(defun MS::mkArrow-2 (|!s1| |!s2|) 
  (cons :|Arrow| (vector |!s1| |!s2| POSITION-SPEC::noPos)))

(defun I2LTOC::getFieldNamesForTuple (l) 
  (labels 
    ((getFieldNamesForTuple0 (l n) 
      (block 
       nil 
       (if (null l) 
           (return nil) 
           (if (consp l) 
               (return 
                (LIST-SPEC::cons-2 
                 (STRING-SPEC::^-2 "field" (NAT-SPEC::toString n)) 
                 (getFieldNamesForTuple0 (cdr l) (INTEGER-SPEC::+-2 n 1)))))) 
       (error "Nonexhaustive match failure in getFieldNamesForTuple")))) 
    (getFieldNamesForTuple0 l 0)))

(defun I2LTOC::substVarIfDeclared-3 (id decls expr) 
  (labels 
    ((isDeclared (id) 
      (let ((pV2 
             (labels 
               ((find--local-0 (l) 
                 (block 
                  nil 
                  (if (null l) 
                      (return '(:|None|)) 
                      (if (consp l) 
                          (let ((pV8 (car l))) 
                            (return 
                             (if (string=  (svref pV8 0) id) 
                                 (cons 
                                  :|Some| 
                                  (vector 
                                   (svref pV8 0) 
                                   (svref pV8 1) 
                                   (svref pV8 2))) 
                                 (find--local-0 (cdr l))))))) 
                  (error "Nonexhaustive match failure in substVarIfDeclared")))) 
               (find--local-0 decls)))) 
        (block 
         nil 
         (if (eq (car pV2) :|Some|) 
             (return t) 
             (if (eq (car pV2) :|None|) (return nil))) 
         (error "Nonexhaustive match failure in substVarIfDeclared"))))) 
    (labels 
      ((determineId (id) 
        (if (isDeclared id) (determineId (STRING-SPEC::^-2 id "_")) id))) 
      (let ((|!newid| (determineId id))) 
        (if (string=  |!newid| id) 
            (cons id expr) 
            (cons 
             |!newid| 
             (I2L::substVarName-3 expr (cons "" id) (cons "" |!newid|))))))))

(defun I2LTOC::substVarListByFieldRefs-4 (ctxt vlist structexpr expr) 
  (labels 
    ((|!subst| (vlist expr n) 
      (block 
       nil 
       (if (null vlist) 
           (return expr) 
           (if (consp vlist) 
               (let ((pV4 (cdr vlist))
                     (pV3 (car vlist))) 
                 (if (eq (car pV3) :|None|) 
                     (return (|!subst| pV4 expr (INTEGER-SPEC::+-2 n 1))) 
                     (if (eq (car pV3) :|Some|) 
                         (return 
                          (let ((field 
                                 (STRING-SPEC::^-2 
                                  "field" 
                                  (NAT-SPEC::toString n)))) 
                            (|!subst| 
                             pV4 
                             (CUTILS::substVarInExp-3 
                              expr 
                              (cdr pV3) 
                              (cons 
                               :|StructRef| 
                               (cons 
                                (if ctxt 
                                    (cons 
                                     :|Unary| 
                                     (cons '(:|Contents|) structexpr)) 
                                    structexpr) 
                                field))) 
                             (INTEGER-SPEC::+-2 n 1))))))))) 
       (error "Nonexhaustive match failure in substVarListByFieldRefs")))) 
    (|!subst| vlist expr 0)))

(defun I2LTOC::getNumberListOfSameSize (l) 
  (labels 
    ((getNumberList (l n) 
      (block 
       nil 
       (if (null l) 
           (return nil) 
           (if (consp l) 
               (return 
                (LIST-SPEC::cons-2 
                 n 
                 (getNumberList (cdr l) (INTEGER-SPEC::+-2 n 1)))))) 
       (error "Nonexhaustive match failure in getNumberListOfSameSize")))) 
    (getNumberList l 0)))

(defun I2LTOC::getParamName (n) 
  (STRING-SPEC::^-2 "index" (NAT-SPEC::toString n)))

(defun SPECSTOI2L::sort2type-4 (ctxt spc tyvars srt) 
  (labels 
    ((qid2typedefId (qid) 
      (block 
       nil 
       (if (eq (car qid) :|Qualified|) 
           (let ((pV2 (cdr qid))) (return (cons (car pV2) (cdr pV2))))) 
       (error "Nonexhaustive match failure in sort2type")))) 
    (let ((pV167 (SPECSTOI2L::unfoldToSpecials-2 spc srt))) 
      (block 
       nil 
       (if (eq (car pV167) :|Arrow|) 
           (let ((pV173 (cdr pV167))) 
             (let ((pV249 (svref pV173 1))) 
               (return 
                (let ((srt10 
                       (SPECSTOI2L::unfoldToProduct-2 
                        spc 
                        (SPECSTOI2L::unfoldToSpecials-2 spc (svref pV173 0))))) 
                  (block 
                   nil 
                   (if (eq (car srt10) :|Product|) 
                       (let ((pV142 (car (cdr srt10)))) 
                         (return 
                          (cons 
                           :|FunOrMap| 
                           (cons 
                            (labels 
                              ((map--local-0 (l) 
                                (block 
                                 nil 
                                 (if (null l) 
                                     (return nil) 
                                     (if (consp l) 
                                         (return 
                                          (cons 
                                           (let ((srt0 (cdr (car l)))) 
                                             (let ((srt0 
                                                    (SPECSTOI2L::unfoldToSpecials-2 
                                                     spc 
                                                     srt0))) 
                                               (SPECSTOI2L::sort2type-4 
                                                (SPECSTOI2L::unsetToplevel ctxt) 
                                                spc 
                                                tyvars 
                                                srt0))) 
                                           (map--local-0 (cdr l)))))) 
                                 (error 
                                  "Nonexhaustive match failure in sort2type")))) 
                              (map--local-0 pV142)) 
                            (SPECSTOI2L::sort2type-4 
                             (SPECSTOI2L::unsetToplevel ctxt) 
                             spc 
                             tyvars 
                             pV249)))))) 
                   (return 
                    (cons 
                     :|FunOrMap| 
                     (cons 
                      (cons 
                       (SPECSTOI2L::sort2type-4 
                        (SPECSTOI2L::unsetToplevel ctxt) 
                        spc 
                        tyvars 
                        srt10) 
                       nil) 
                      (SPECSTOI2L::sort2type-4 
                       (SPECSTOI2L::unsetToplevel ctxt) 
                       spc 
                       tyvars 
                       pV249))))))))) 
           (if (eq (car pV167) :|Product|) 
               (let ((pV246 (car (cdr pV167)))) 
                 (return 
                  (if (SPECSTOI2L::fieldsAreNumbered pV246) 
                      (let ((types 
                             (labels 
                               ((map--local-0 (l) 
                                 (block 
                                  nil 
                                  (if (null l) 
                                      (return nil) 
                                      (if (consp l) 
                                          (return 
                                           (cons 
                                            (SPECSTOI2L::sort2type-4 
                                             (SPECSTOI2L::unsetToplevel ctxt) 
                                             spc 
                                             tyvars 
                                             (cdr (car l))) 
                                            (map--local-0 (cdr l)))))) 
                                  (error 
                                   "Nonexhaustive match failure in sort2type")))) 
                               (map--local-0 pV246)))) 
                        (if (slang-built-in::slang-term-equals-2 
                             types 
                             LIST-SPEC::|!nil|) 
                            '(:|Void|) 
                            (cons :|Tuple| types))) 
                      (let ((structfields 
                             (labels 
                               ((map--local-0 (l) 
                                 (block 
                                  nil 
                                  (if (null l) 
                                      (return nil) 
                                      (if (consp l) 
                                          (let ((pV152 (car l))) 
                                            (return 
                                             (cons 
                                              (cons 
                                               (car pV152) 
                                               (SPECSTOI2L::sort2type-4 
                                                (SPECSTOI2L::unsetToplevel ctxt) 
                                                spc 
                                                tyvars 
                                                (cdr pV152))) 
                                              (map--local-0 (cdr l))))))) 
                                  (error 
                                   "Nonexhaustive match failure in sort2type")))) 
                               (map--local-0 pV246)))) 
                        (if (slang-built-in::slang-term-equals-2 
                             structfields 
                             LIST-SPEC::|!nil|) 
                            '(:|Void|) 
                            (cons :|Struct| structfields)))))) 
               (if (eq (car pV167) :|CoProduct|) 
                   (let ((pV244 (car (cdr pV167)))) 
                     (return 
                      (cons 
                       :|Union| 
                       (labels 
                         ((map--local-0 (l) 
                           (block 
                            nil 
                            (if (null l) 
                                (return nil) 
                                (if (consp l) 
                                    (let ((pV160 (car l))) 
                                      (return 
                                       (cons 
                                        (let ((pV156 (cdr pV160))
                                              (pV155 (car pV160))) 
                                          (block 
                                           nil 
                                           (if (eq (car pV156) :|None|) 
                                               (return (cons pV155 '(:|Void|))) 
                                               (if (eq (car pV156) :|Some|) 
                                                   (return 
                                                    (cons 
                                                     pV155 
                                                     (SPECSTOI2L::sort2type-4 
                                                      (SPECSTOI2L::unsetToplevel 
                                                       ctxt) 
                                                      spc 
                                                      tyvars 
                                                      (cdr pV156)))))) 
                                           (error 
                                            "Nonexhaustive match failure in sort2type"))) 
                                        (map--local-0 (cdr l))))))) 
                            (error "Nonexhaustive match failure in sort2type")))) 
                         (map--local-0 pV244))))) 
                   (if (eq (car pV167) :|TyVar|) 
                       (return 
                        (if (svref ctxt 3) 
                            '(:|Any|) 
                            (SYSTEM-SPEC::fail 
                             (STRING-SPEC::^-2 
                              "sorry, this version of the code generator doesn't support " 
                              "polymorphic types.")))) 
                       (if (eq (car pV167) :|Base|) 
                           (let ((pV169 (cdr pV167))) 
                             (let ((pV239 (svref pV169 1))
                                   (pV238 (svref pV169 0))) 
                               (progn (if (eq (car pV238) :|Qualified|) 
                                          (let ((pV243 (cdr (cdr pV238)))) 
                                            (if (string=  "Nat" pV243) 
                                                (if (null pV239) 
                                                    (return 
                                                     (cons :|Primitive| "Nat"))) 
                                                (if (string=  "Integer" pV243) 
                                                    (if (null pV239) 
                                                        (return 
                                                         (cons 
                                                          :|Primitive| 
                                                          "Integer"))) 
                                                    (if (string=  "Char" pV243) 
                                                        (if (null pV239) 
                                                            (return 
                                                             (cons 
                                                              :|Primitive| 
                                                              "Char"))) 
                                                        (if (string=  
                                                             "String" 
                                                             pV243) 
                                                            (if (null pV239) 
                                                                (return 
                                                                 (cons 
                                                                  :|Primitive| 
                                                                  "String"))) 
                                                            (if (string=  
                                                                 "Boolean" 
                                                                 pV243) 
                                                                (if (null pV239) 
                                                                    (return 
                                                                     (cons 
                                                                      :|Primitive| 
                                                                      "Boolean"))) 
                                                                (if (string=  
                                                                     "Float" 
                                                                     pV243) 
                                                                    (if (null 
                                                                         pV239) 
                                                                        (return 
                                                                         (cons 
                                                                          :|Primitive| 
                                                                          "Float"))))))))))) 
                                      (return 
                                       (let ((x0 (qid2typedefId pV238))) 
                                         (cons :|Base| (cons (car x0) (cdr x0)))))))) 
                           (if (eq (car pV167) :|Subsort|) 
                               (let ((pV168 (cdr pV167))) 
                                 (let ((pV175 (svref pV168 1))
                                       (pV174 (svref pV168 0))) 
                                   (progn (if (eq (car pV174) :|Base|) 
                                              (let ((pV177 (cdr pV174))) 
                                                (let ((pV179 (svref pV177 1))
                                                      (pV178 (svref pV177 0))) 
                                                  (if (eq 
                                                       (car pV178) 
                                                       :|Qualified|) 
                                                      (let ((pV183 
                                                             (cdr (cdr pV178)))) 
                                                        (if (string=  
                                                             "Nat" 
                                                             pV183) 
                                                            (if (null pV179) 
                                                                (if (eq 
                                                                     (car pV175) 
                                                                     :|Lambda|) 
                                                                    (let ((pV188 
                                                                           (car 
                                                                            (cdr 
                                                                             pV175)))) 
                                                                      (if (consp 
                                                                           pV188) 
                                                                          (let ((pV191 
                                                                                 (car 
                                                                                  pV188))) 
                                                                            (let ((pV195 
                                                                                   (svref 
                                                                                    pV191 
                                                                                    2))
                                                                                  (pV193 
                                                                                   (svref 
                                                                                    pV191 
                                                                                    0))) 
                                                                              (if (eq 
                                                                                   (car 
                                                                                    pV193) 
                                                                                   :|VarPat|) 
                                                                                  (if (eq 
                                                                                       (car 
                                                                                        pV195) 
                                                                                       :|Apply|) 
                                                                                      (let ((pV201 
                                                                                             (cdr 
                                                                                              pV195))) 
                                                                                        (let ((pV203 
                                                                                               (svref 
                                                                                                pV201 
                                                                                                1))
                                                                                              (pV202 
                                                                                               (svref 
                                                                                                pV201 
                                                                                                0))) 
                                                                                          (if (eq 
                                                                                               (car 
                                                                                                pV202) 
                                                                                               :|Fun|) 
                                                                                              (let ((pV206 
                                                                                                     (svref 
                                                                                                      (cdr 
                                                                                                       pV202) 
                                                                                                      0))) 
                                                                                                (if (eq 
                                                                                                     (car 
                                                                                                      pV206) 
                                                                                                     :|Op|) 
                                                                                                    (let ((pV210 
                                                                                                           (car 
                                                                                                            (cdr 
                                                                                                             pV206)))) 
                                                                                                      (if (eq 
                                                                                                           (car 
                                                                                                            pV210) 
                                                                                                           :|Qualified|) 
                                                                                                          (if (string=  
                                                                                                               "<" 
                                                                                                               (cdr 
                                                                                                                (cdr 
                                                                                                                 pV210))) 
                                                                                                              (if (eq 
                                                                                                                   (car 
                                                                                                                    pV203) 
                                                                                                                   :|Record|) 
                                                                                                                  (let ((pV216 
                                                                                                                         (car 
                                                                                                                          (cdr 
                                                                                                                           pV203)))) 
                                                                                                                    (if (consp 
                                                                                                                         pV216) 
                                                                                                                        (let ((pV220 
                                                                                                                               (cdr 
                                                                                                                                pV216))) 
                                                                                                                          (let ((pV222 
                                                                                                                                 (cdr 
                                                                                                                                  (car 
                                                                                                                                   pV216)))) 
                                                                                                                            (if (eq 
                                                                                                                                 (car 
                                                                                                                                  pV222) 
                                                                                                                                 :|Var|) 
                                                                                                                                (if (consp 
                                                                                                                                     pV220) 
                                                                                                                                    (let ((pV232 
                                                                                                                                           (cdr 
                                                                                                                                            (car 
                                                                                                                                             pV220)))) 
                                                                                                                                      (if (eq 
                                                                                                                                           (car 
                                                                                                                                            pV232) 
                                                                                                                                           :|Fun|) 
                                                                                                                                          (let ((pV234 
                                                                                                                                                 (svref 
                                                                                                                                                  (cdr 
                                                                                                                                                   pV232) 
                                                                                                                                                  0))) 
                                                                                                                                            (if (eq 
                                                                                                                                                 (car 
                                                                                                                                                  pV234) 
                                                                                                                                                 :|Nat|) 
                                                                                                                                                (if (null 
                                                                                                                                                     (cdr 
                                                                                                                                                      pV220)) 
                                                                                                                                                    (if (null 
                                                                                                                                                         (cdr 
                                                                                                                                                          pV188)) 
                                                                                                                                                        (return 
                                                                                                                                                         (if (string=  
                                                                                                                                                              (car 
                                                                                                                                                               (car 
                                                                                                                                                                (cdr 
                                                                                                                                                                 pV193))) 
                                                                                                                                                              (car 
                                                                                                                                                               (car 
                                                                                                                                                                (cdr 
                                                                                                                                                                 pV222)))) 
                                                                                                                                                             (cons 
                                                                                                                                                              :|RestrictedNat| 
                                                                                                                                                              (cdr 
                                                                                                                                                               pV234)) 
                                                                                                                                                             (cons 
                                                                                                                                                              :|Primitive| 
                                                                                                                                                              "Nat")))))))))))))))))))))))))))))))) 
                                                            (if (string=  
                                                                 "List" 
                                                                 pV183) 
                                                                (if (consp pV179) 
                                                                    (if (null 
                                                                         (cdr 
                                                                          pV179)) 
                                                                        (return 
                                                                         (let ((ptype 
                                                                                (SPECSTOI2L::sort2type-4 
                                                                                 (SPECSTOI2L::unsetToplevel 
                                                                                  ctxt) 
                                                                                 spc 
                                                                                 tyvars 
                                                                                 (car 
                                                                                  pV179)))) 
                                                                           (block 
                                                                            nil 
                                                                            (if (eq 
                                                                                 (car 
                                                                                  pV175) 
                                                                                 :|Lambda|) 
                                                                                (let ((pV119 
                                                                                       (car 
                                                                                        (cdr 
                                                                                         pV175)))) 
                                                                                  (if (consp 
                                                                                       pV119) 
                                                                                      (let ((pV122 
                                                                                             (car 
                                                                                              pV119))) 
                                                                                        (let ((pV126 
                                                                                               (svref 
                                                                                                pV122 
                                                                                                2))
                                                                                              (pV124 
                                                                                               (svref 
                                                                                                pV122 
                                                                                                0))) 
                                                                                          (if (eq 
                                                                                               (car 
                                                                                                pV124) 
                                                                                               :|VarPat|) 
                                                                                              (let ((pV130 
                                                                                                     (car 
                                                                                                      (car 
                                                                                                       (cdr 
                                                                                                        pV124))))) 
                                                                                                (if (null 
                                                                                                     (cdr 
                                                                                                      pV119)) 
                                                                                                    (return 
                                                                                                     (block 
                                                                                                      nil 
                                                                                                      (if (eq 
                                                                                                           (car 
                                                                                                            pV126) 
                                                                                                           :|Apply|) 
                                                                                                          (let ((pV99 
                                                                                                                 (cdr 
                                                                                                                  pV126))) 
                                                                                                            (let ((pV101 
                                                                                                                   (svref 
                                                                                                                    pV99 
                                                                                                                    1))
                                                                                                                  (pV100 
                                                                                                                   (svref 
                                                                                                                    pV99 
                                                                                                                    0))) 
                                                                                                              (if (eq 
                                                                                                                   (car 
                                                                                                                    pV100) 
                                                                                                                   :|Fun|) 
                                                                                                                  (let ((pV104 
                                                                                                                         (svref 
                                                                                                                          (cdr 
                                                                                                                           pV100) 
                                                                                                                          0))) 
                                                                                                                    (if (eq 
                                                                                                                         (car 
                                                                                                                          pV101) 
                                                                                                                         :|Record|) 
                                                                                                                        (let ((pV108 
                                                                                                                               (car 
                                                                                                                                (cdr 
                                                                                                                                 pV101)))) 
                                                                                                                          (if (consp 
                                                                                                                               pV108) 
                                                                                                                              (let ((pV112 
                                                                                                                                     (cdr 
                                                                                                                                      pV108))
                                                                                                                                    (pV111 
                                                                                                                                     (car 
                                                                                                                                      pV108))) 
                                                                                                                                (if (consp 
                                                                                                                                     pV112) 
                                                                                                                                    (let ((pV114 
                                                                                                                                           (car 
                                                                                                                                            pV112))) 
                                                                                                                                      (if (null 
                                                                                                                                           (cdr 
                                                                                                                                            pV112)) 
                                                                                                                                          (return 
                                                                                                                                           (labels 
                                                                                                                                             ((checklengthterm 
                                                                                                                                               (pV79 
                                                                                                                                                pV80 
                                                                                                                                                pV81) 
                                                                                                                                               (block 
                                                                                                                                                nil 
                                                                                                                                                (let ((pV83 
                                                                                                                                                       (cdr 
                                                                                                                                                        pV79))) 
                                                                                                                                                  (return 
                                                                                                                                                   (progn (block 
                                                                                                                                                           nil 
                                                                                                                                                           (if (eq 
                                                                                                                                                                (car 
                                                                                                                                                                 pV83) 
                                                                                                                                                                :|Apply|) 
                                                                                                                                                               (let ((pV65 
                                                                                                                                                                      (cdr 
                                                                                                                                                                       pV83))) 
                                                                                                                                                                 (let ((pV67 
                                                                                                                                                                        (svref 
                                                                                                                                                                         pV65 
                                                                                                                                                                         1))
                                                                                                                                                                       (pV66 
                                                                                                                                                                        (svref 
                                                                                                                                                                         pV65 
                                                                                                                                                                         0))) 
                                                                                                                                                                   (if (eq 
                                                                                                                                                                        (car 
                                                                                                                                                                         pV66) 
                                                                                                                                                                        :|Fun|) 
                                                                                                                                                                       (let ((pV70 
                                                                                                                                                                              (svref 
                                                                                                                                                                               (cdr 
                                                                                                                                                                                pV66) 
                                                                                                                                                                               0))) 
                                                                                                                                                                         (if (eq 
                                                                                                                                                                              (car 
                                                                                                                                                                               pV70) 
                                                                                                                                                                              :|Op|) 
                                                                                                                                                                             (let ((pV74 
                                                                                                                                                                                    (car 
                                                                                                                                                                                     (cdr 
                                                                                                                                                                                      pV70)))) 
                                                                                                                                                                               (if (eq 
                                                                                                                                                                                    (car 
                                                                                                                                                                                     pV74) 
                                                                                                                                                                                    :|Qualified|) 
                                                                                                                                                                                   (if (string=  
                                                                                                                                                                                        "length" 
                                                                                                                                                                                        (cdr 
                                                                                                                                                                                         (cdr 
                                                                                                                                                                                          pV74))) 
                                                                                                                                                                                       (return 
                                                                                                                                                                                        (block 
                                                                                                                                                                                         nil 
                                                                                                                                                                                         (if (eq 
                                                                                                                                                                                              (car 
                                                                                                                                                                                               pV67) 
                                                                                                                                                                                              :|Var|) 
                                                                                                                                                                                             (return 
                                                                                                                                                                                              (if (string=  
                                                                                                                                                                                                   pV130 
                                                                                                                                                                                                   (car 
                                                                                                                                                                                                    (car 
                                                                                                                                                                                                     (cdr 
                                                                                                                                                                                                      pV67)))) 
                                                                                                                                                                                                  nil 
                                                                                                                                                                                                  (SYSTEM-SPEC::fail 
                                                                                                                                                                                                   "wrong form of restriction term for list length")))) 
                                                                                                                                                                                         (return 
                                                                                                                                                                                          (SYSTEM-SPEC::fail 
                                                                                                                                                                                           "wrong form of restriction term for list length"))))))))))))) 
                                                                                                                                                           (return 
                                                                                                                                                            (SYSTEM-SPEC::fail 
                                                                                                                                                             "wrong form of restriction term for list length"))) 
                                                                                                                                                          (let ((|!const| 
                                                                                                                                                                 (SPECSTOI2L::constantTermIntegerValue-2 
                                                                                                                                                                  spc 
                                                                                                                                                                  (cdr 
                                                                                                                                                                   pV80)))) 
                                                                                                                                                            (if (INTEGER-SPEC::<-2 
                                                                                                                                                                 |!const| 
                                                                                                                                                                 pV81) 
                                                                                                                                                                (SYSTEM-SPEC::fail 
                                                                                                                                                                 "wrong form of restriction term for list length") 
                                                                                                                                                                |!const|))))) 
                                                                                                                                                (error 
                                                                                                                                                 "Nonexhaustive match failure in sort2type")))) 
                                                                                                                                             (block 
                                                                                                                                              nil 
                                                                                                                                              (if (eq 
                                                                                                                                                   (car 
                                                                                                                                                    pV104) 
                                                                                                                                                   :|Op|) 
                                                                                                                                                  (let ((pV92 
                                                                                                                                                         (car 
                                                                                                                                                          (cdr 
                                                                                                                                                           pV104)))) 
                                                                                                                                                    (if (eq 
                                                                                                                                                         (car 
                                                                                                                                                          pV92) 
                                                                                                                                                         :|Qualified|) 
                                                                                                                                                        (let ((pV96 
                                                                                                                                                               (cdr 
                                                                                                                                                                (cdr 
                                                                                                                                                                 pV92)))) 
                                                                                                                                                          (return 
                                                                                                                                                           (block 
                                                                                                                                                            nil 
                                                                                                                                                            (if (string=  
                                                                                                                                                                 ">" 
                                                                                                                                                                 pV96) 
                                                                                                                                                                (return 
                                                                                                                                                                 (cons 
                                                                                                                                                                  :|BoundList| 
                                                                                                                                                                  (cons 
                                                                                                                                                                   ptype 
                                                                                                                                                                   (INTEGER-SPEC::--2 
                                                                                                                                                                    (checklengthterm 
                                                                                                                                                                     pV114 
                                                                                                                                                                     pV111 
                                                                                                                                                                     2) 
                                                                                                                                                                    1)))) 
                                                                                                                                                                (if (string=  
                                                                                                                                                                     "<" 
                                                                                                                                                                     pV96) 
                                                                                                                                                                    (return 
                                                                                                                                                                     (cons 
                                                                                                                                                                      :|BoundList| 
                                                                                                                                                                      (cons 
                                                                                                                                                                       ptype 
                                                                                                                                                                       (INTEGER-SPEC::--2 
                                                                                                                                                                        (checklengthterm 
                                                                                                                                                                         pV111 
                                                                                                                                                                         pV114 
                                                                                                                                                                         2) 
                                                                                                                                                                        1)))) 
                                                                                                                                                                    (if (string=  
                                                                                                                                                                         "<=" 
                                                                                                                                                                         pV96) 
                                                                                                                                                                        (return 
                                                                                                                                                                         (cons 
                                                                                                                                                                          :|BoundList| 
                                                                                                                                                                          (cons 
                                                                                                                                                                           ptype 
                                                                                                                                                                           (checklengthterm 
                                                                                                                                                                            pV111 
                                                                                                                                                                            pV114 
                                                                                                                                                                            1)))) 
                                                                                                                                                                        (if (string=  
                                                                                                                                                                             ">=" 
                                                                                                                                                                             pV96) 
                                                                                                                                                                            (return 
                                                                                                                                                                             (cons 
                                                                                                                                                                              :|BoundList| 
                                                                                                                                                                              (cons 
                                                                                                                                                                               ptype 
                                                                                                                                                                               (checklengthterm 
                                                                                                                                                                                pV114 
                                                                                                                                                                                pV111 
                                                                                                                                                                                1)))))))) 
                                                                                                                                                            (return 
                                                                                                                                                             (SYSTEM-SPEC::fail 
                                                                                                                                                              "wrong form of restriction term for list length")))))))) 
                                                                                                                                              (return 
                                                                                                                                               (cons 
                                                                                                                                                :|BoundList| 
                                                                                                                                                (cons 
                                                                                                                                                 ptype 
                                                                                                                                                 (checklengthterm 
                                                                                                                                                  pV111 
                                                                                                                                                  pV114 
                                                                                                                                                  1))))))))))))))))))) 
                                                                                                      (return 
                                                                                                       (SYSTEM-SPEC::fail 
                                                                                                        "wrong form of restriction term for list length")))))))))))) 
                                                                            (return 
                                                                             (SYSTEM-SPEC::fail 
                                                                              "wrong form of restriction term for list length")))))))))))))) 
                                          (return 
                                           (SPECSTOI2L::sort2type-4 
                                            ctxt 
                                            spc 
                                            tyvars 
                                            pV174))))))))))) 
       (return 
        (SYSTEM-SPEC::fail 
         (STRING-SPEC::^-2 
          "sorry, code generation doesn't support the use of this sort:
       " 
          (ANNSPECPRINTER::printSort srt))))))))

(defun CGEN::ppFnDefnAppendFile-2 (fndefn |!filename|) 
  (PRETTYPRINT::appendFile-2 
   |!filename| 
   (PRETTYPRINT::format-2 80 (CGEN::ppFnDefn fndefn))))

(defun SPECCALC::firstN-2 (l n) 
  (if ( =  n 0) 
      nil 
      (block 
       nil 
       (if (null l) 
           (return nil) 
           (if (consp l) 
               (return 
                (LIST-SPEC::cons-2 
                 (car l) 
                 (SPECCALC::firstN-2 (cdr l) (INTEGER-SPEC::--2 n 1)))))) 
       (error "Nonexhaustive match failure in firstN"))))

(defun SPECCALC::printTypeErrors (errs) 
  (if ( =  (LIST-SPEC::|!length| errs) 0) 
      "" 
      (labels 
        ((printErr (pV7 pV8) 
          (block 
           nil 
           (let ((pV10 (cdr pV7))) 
             (return 
              (let ((|!filename| 
                     (block 
                      nil 
                      (if (eq (car pV10) :|File|) (return (svref (cdr pV10) 0))) 
                      (return "")))) 
                (cons 
                 (STRING-SPEC::^-2 
                  (STRING-SPEC::^-2 
                   (STRING-SPEC::^-2 
                    (STRING-SPEC::^-2 
                     (car pV8) 
                     (if (string=  |!filename| (cdr pV8)) 
                         (POSITION-SPEC::|!print| pV10) 
                         (STRING-SPEC::^-2 
                          "Errors in " 
                          (POSITION-SPEC::printAll pV10)))) 
                    " : ") 
                   (car pV7)) 
                  "
") 
                 |!filename|)))) 
           (error "Nonexhaustive match failure in printTypeErrors")))) 
        (STRING-SPEC::++-2 
         (car 
          (LIST-SPEC::foldl-1-1-1 
           #'(lambda (pV) (printErr (car pV) (cdr pV))) 
           (cons "" "") 
           (SPECCALC::firstN-2 errs SPECCALC::numberOfTypeErrorsToPrint))) 
         (if (INTEGER-SPEC::<=-2 
              (LIST-SPEC::|!length| errs) 
              SPECCALC::numberOfTypeErrorsToPrint) 
             "" 
             (STRING-SPEC::^-2 
              (STRING-SPEC::^-2 
               "...  (" 
               (NAT-SPEC::toString 
                (INTEGER-SPEC::--2 
                 (LIST-SPEC::|!length| errs) 
                 SPECCALC::numberOfTypeErrorsToPrint))) 
              " additional type errors)"))))))

(defun INSTANTIATEHO::sortMatch-3 (|!s1| |!s2| spc) 
  (labels 
    ((match (srt1 srt2 pairs) 
      (block 
       nil 
       (if (eq (car srt1) :|TyVar|) 
           (let ((pV108 (car (cdr srt1)))) 
             (return 
              (if (OPTION::some? 
                   (labels 
                     ((find--local-0 (l) 
                       (block 
                        nil 
                        (if (null l) 
                            (return '(:|None|)) 
                            (if (consp l) 
                                (let ((pV5 (car l))) 
                                  (return 
                                   (if (string=  (car pV5) pV108) 
                                       (cons :|Some| (cons (car pV5) (cdr pV5))) 
                                       (find--local-0 (cdr l))))))) 
                        (error "Nonexhaustive match failure in sortMatch")))) 
                     (find--local-0 pairs))) 
                  pairs 
                  (LIST-SPEC::cons-2 (cons pV108 srt2) pairs)))) 
           (if (eq (car srt1) :|Arrow|) 
               (let ((pV79 (cdr srt1))) 
                 (if (eq (car srt2) :|Arrow|) 
                     (let ((pV104 (cdr srt2))) 
                       (return 
                        (match 
                         (svref pV79 1) 
                         (svref pV104 1) 
                         (match (svref pV79 0) (svref pV104 0) pairs)))))) 
               (if (eq (car srt1) :|Product|) 
                   (let ((pV96 (car (cdr srt1)))) 
                     (if (eq (car srt2) :|Product|) 
                         (let ((pV99 (car (cdr srt2)))) 
                           (return 
                            (labels 
                              ((matchL--local-0 (l1 l2 pairs) 
                                (block 
                                 nil 
                                 (if (consp l1) 
                                     (if (consp l2) 
                                         (return 
                                          (matchL--local-0 
                                           (cdr l1) 
                                           (cdr l2) 
                                           (block 
                                            nil 
                                            (return 
                                             (match 
                                              (cdr (car l1)) 
                                              (cdr (car l2)) 
                                              pairs)) 
                                            (error 
                                             "Nonexhaustive match failure in sortMatch")))))) 
                                 (return pairs)))) 
                              (matchL--local-0 pV96 pV99 pairs)))))) 
                   (if (eq (car srt1) :|CoProduct|) 
                       (let ((pV91 (car (cdr srt1)))) 
                         (if (eq (car srt2) :|CoProduct|) 
                             (let ((pV94 (car (cdr srt2)))) 
                               (return 
                                (labels 
                                  ((matchL--local-0 (l1 l2 pairs) 
                                    (block 
                                     nil 
                                     (if (consp l1) 
                                         (let ((pV46 (car l1))) 
                                           (if (consp l2) 
                                               (let ((pV49 (car l2))) 
                                                 (return 
                                                  (matchL--local-0 
                                                   (cdr l1) 
                                                   (cdr l2) 
                                                   (block 
                                                    nil 
                                                    (let ((pV39 (cdr pV46))) 
                                                      (let ((pV41 (cdr pV49))) 
                                                        (return 
                                                         (if (string=  
                                                              (car pV46) 
                                                              (car pV49)) 
                                                             (block 
                                                              nil 
                                                              (if (eq 
                                                                   (car pV39) 
                                                                   :|None|) 
                                                                  (if (eq 
                                                                       (car pV41) 
                                                                       :|None|) 
                                                                      (return 
                                                                       pairs)) 
                                                                  (if (eq 
                                                                       (car pV39) 
                                                                       :|Some|) 
                                                                      (if (eq 
                                                                           (car 
                                                                            pV41) 
                                                                           :|Some|) 
                                                                          (return 
                                                                           (match 
                                                                            (cdr 
                                                                             pV39) 
                                                                            (cdr 
                                                                             pV41) 
                                                                            pairs))))) 
                                                              (error 
                                                               "Nonexhaustive match failure in sortMatch")) 
                                                             pairs)))) 
                                                    (error 
                                                     "Nonexhaustive match failure in sortMatch")))))))) 
                                     (return pairs)))) 
                                  (matchL--local-0 pV91 pV94 pairs)))))) 
                       (if (eq (car srt1) :|Quotient|) 
                           (if (eq (car srt2) :|Quotient|) 
                               (return 
                                (match 
                                 (svref (cdr srt1) 0) 
                                 (svref (cdr srt2) 0) 
                                 pairs))) 
                           (if (eq (car srt1) :|Subsort|) 
                               (return (match (svref (cdr srt1) 0) srt2 pairs)))))))) 
       (if (eq (car srt2) :|Subsort|) 
           (return (match srt1 (svref (cdr srt2) 0) pairs))) 
       (if (eq (car srt1) :|Base|) 
           (let ((pV63 (cdr srt1))) 
             (if (eq (car srt2) :|Base|) 
                 (let ((pV67 (cdr srt2))) 
                   (return 
                    (if (slang-built-in::slang-term-equals-2 
                         (svref pV63 0) 
                         (svref pV67 0)) 
                        (INSTANTIATEHO::matchL-4 
                         (svref pV63 1) 
                         (svref pV67 1) 
                         pairs 
                         #'(lambda (pV) 
                            (match (svref pV 0) (svref pV 1) (svref pV 2)))) 
                        (let ((s2_ (SPECENVIRONMENT::unfoldBase-2 spc srt2))) 
                          (if (METASLANG::equalSort?-2 srt2 s2_) 
                              pairs 
                              (match srt1 s2_ pairs))))))))) 
       (if (eq (car srt2) :|Base|) 
           (return 
            (let ((s2_ (SPECENVIRONMENT::unfoldBase-2 spc srt2))) 
              (if (METASLANG::equalSort?-2 srt2 s2_) 
                  pairs 
                  (match srt1 s2_ pairs))))) 
       (return pairs)))) (match |!s1| |!s2| nil)))

(defun CODEGENTRANSFORMS::printSortOpInfos (minfo) 
  (let ((|!s1| 
         (labels 
           ((foldl--local-0 (base l) 
             (block 
              nil 
              (if (null l) 
                  (return base) 
                  (if (consp l) 
                      (return 
                       (foldl--local-0 
                        (block 
                         nil 
                         (let ((pV8 (svref (car l) 0))) 
                           (if (consp pV8) 
                               (let ((pV13 (car pV8))) 
                                 (if (eq (car pV13) :|Qualified|) 
                                     (return 
                                      (STRING-SPEC::^-2 
                                       (STRING-SPEC::^-2 base " ") 
                                       (cdr (cdr pV13)))))))) 
                         (error 
                          "Nonexhaustive match failure in printSortOpInfos")) 
                        (cdr l))))) 
              (error "Nonexhaustive match failure in printSortOpInfos")))) 
           (foldl--local-0 "" (car minfo))))) 
    (let ((|!s2| 
           (labels 
             ((foldl--local-0 (base l) 
               (block 
                nil 
                (if (null l) 
                    (return base) 
                    (if (consp l) 
                        (return 
                         (foldl--local-0 
                          (block 
                           nil 
                           (let ((pV28 (svref (car l) 0))) 
                             (if (consp pV28) 
                                 (let ((pV32 (car pV28))) 
                                   (if (eq (car pV32) :|Qualified|) 
                                       (return 
                                        (STRING-SPEC::^-2 
                                         (STRING-SPEC::^-2 base " ") 
                                         (cdr (cdr pV32)))))))) 
                           (error 
                            "Nonexhaustive match failure in printSortOpInfos")) 
                          (cdr l))))) 
                (error "Nonexhaustive match failure in printSortOpInfos")))) 
             (foldl--local-0 "" (cdr minfo))))) 
      (STRING-SPEC::^-2 
       (STRING-SPEC::^-2 
        (STRING-SPEC::^-2 (STRING-SPEC::^-2 "ops: " |!s1|) STRING-SPEC::newline) 
        "sorts: ") 
       |!s2|))))

(defun CONSISTENTINFIXMS::|!Terms| (x) 
  (CONSISTENTINFIXMS::Terms-2 (car x) (cdr x)))

(defun CPRINT::ppFnDefnAppendFile-2 (fndefn |!filename|) 
  (PRETTYPRINT::appendFile-2 
   |!filename| 
   (PRETTYPRINT::format-2 80 (CPRINT::ppFnDefn-1-1 nil fndefn))))

(defun TERMINDEX::getApplys-2 (|!M| Ms) 
  (block 
   nil 
   (if (eq (car |!M|) :|Apply|) 
       (let ((pV10 (cdr |!M|))) 
         (let ((pV12 (svref pV10 1))
               (pV11 (svref pV10 0))) 
           (progn (if (eq (car pV11) :|Fun|) 
                      (let ((pV15 (svref (cdr pV11) 0))) 
                        (if (eq (car pV15) :|Op|) 
                            (let ((pV19 (car (cdr pV15)))) 
                              (if (eq (car pV19) :|Qualified|) 
                                  (if (string=  "%Flex" (cdr (cdr pV19))) 
                                      (if (eq (car pV12) :|Fun|) 
                                          (if (eq 
                                               (car (svref (cdr pV12) 0)) 
                                               :|Nat|) 
                                              (return 
                                               (cons 
                                                (LIST-SPEC::cons-2 |!M| Ms) 
                                                t)))))))))) 
                  (return 
                   (TERMINDEX::getApplys-2 pV11 (LIST-SPEC::cons-2 pV12 Ms))))))) 
   (return (cons (LIST-SPEC::cons-2 |!M| Ms) nil))))

(defun TERMINDEX::subterms (pV7) 
  (block 
   nil 
   (if (consp pV7) 
       (let ((pV9 (car pV7))) 
         (if (eq (car pV9) :|Record|) 
             (let ((pV12 (car (cdr pV9)))) 
               (if (null (cdr pV7)) 
                   (return 
                    (labels 
                      ((map--local-0 (l) 
                        (block 
                         nil 
                         (if (null l) 
                             (return nil) 
                             (if (consp l) 
                                 (return 
                                  (cons (cdr (car l)) (map--local-0 (cdr l)))))) 
                         (error "Nonexhaustive match failure in subterms")))) 
                      (map--local-0 pV12)))))))) 
   (return pV7)))

(defun TERMINDEX::indexTerm-3 (index term id) 
  (labels 
    ((addOne (path index) (TERMDISCNET::addForPath-3 index path id))
     (genPathSymPairs (prefix |!M|) 
      (let ((pV5 (TERMINDEX::getApplys-2 |!M| nil))) 
        (block 
         nil 
         (let ((pV6 (car pV5))) 
           (if (consp pV6) 
               (return 
                (if (cdr pV5) 
                    (cons 
                     (LIST-SPEC::++-2 prefix (cons (INTEGER-SPEC::~ 1) nil)) 
                     nil) 
                    (let ((indexT (TERMINDEX::getFunIndex (car pV6)))) 
                      (let ((Ms (TERMINDEX::subterms (cdr pV6)))) 
                        (labels 
                          ((getRec (i ts) 
                            (block 
                             nil 
                             (if (null ts) 
                                 (return nil) 
                                 (if (consp ts) 
                                     (return 
                                      (LIST-SPEC::++-2 
                                       (genPathSymPairs 
                                        (LIST-SPEC::++-2 
                                         prefix 
                                         (cons indexT (cons i nil))) 
                                        (car ts)) 
                                       (getRec (INTEGER-SPEC::+-2 i 1) (cdr ts)))))) 
                             (error "Nonexhaustive match failure in indexTerm")))) 
                          (LIST-SPEC::cons-2 
                           (LIST-SPEC::@-2 prefix (cons indexT nil)) 
                           (getRec 1 Ms))))))))) 
         (error "Nonexhaustive match failure in indexTerm"))))) 
    (let ((pairs (genPathSymPairs nil term))) 
      (LIST-SPEC::foldr-1-1-1 
       #'(lambda (pV) (addOne (car pV) (cdr pV))) 
       index 
       pairs))))

(defun DEMOD::addRule-3 (pV1 pV2 pV3) 
  (block 
   nil 
   (let ((pV4 (car pV3))) 
     (return 
      (let ((newId (INTEGER-SPEC::+-2 (NATMAP::numItems pV4) 1))) 
        (cons 
         (NATMAP::insert-3 pV4 newId pV2) 
         (TERMINDEX::indexTerm-3 (cdr pV3) pV1 newId))))) 
   (error "Nonexhaustive match failure in addRule")))

(defun SPLAYSET::intersectionSplay-3 (comp |!s1| |!s2|) 
  (block 
   nil 
   (if (eq (car |!s1|) :|SplayNil|) (return (cons '(:|SplayNil|) 0))) 
   (if (eq (car |!s2|) :|SplayNil|) 
       (return (cons '(:|SplayNil|) 0)) 
       (if (eq (car |!s2|) :|SplayObj|) 
           (let ((pV22 (cdr |!s2|))) 
             (let ((pV24 (svref pV22 1))
                   (pV23 (svref pV22 0))) 
               (return 
                (let ((x0 (SPLAYSET::split-3 comp (svref pV22 2) |!s1|))) 
                  (let ((pV18 (svref x0 2))
                        (pV17 (svref x0 1))
                        (pV16 (svref x0 0))) 
                    (block 
                     nil 
                     (if (eq (car pV16) :|Some|) 
                         (return 
                          (let ((pV6 
                                 (SPLAYSET::intersectionSplay-3 comp pV17 pV23))) 
                            (block 
                             nil 
                             (return 
                              (let ((pV3 
                                     (SPLAYSET::intersectionSplay-3 
                                      comp 
                                      pV18 
                                      pV24))) 
                                (block 
                                 nil 
                                 (return 
                                  (cons 
                                   (cons 
                                    :|SplayObj| 
                                    (vector (car pV6) (car pV3) (cdr pV16))) 
                                   (INTEGER-SPEC::+-2 
                                    (INTEGER-SPEC::+-2 (cdr pV6) (cdr pV3)) 
                                    1))) 
                                 (error 
                                  "Nonexhaustive match failure in intersectionSplay")))) 
                             (error 
                              "Nonexhaustive match failure in intersectionSplay"))))) 
                     (return 
                      (let ((pV13 (SPLAYSET::intersectionSplay-3 comp pV17 pV23))) 
                        (block 
                         nil 
                         (return 
                          (let ((pV10 
                                 (SPLAYSET::intersectionSplay-3 comp pV18 pV24))) 
                            (block 
                             nil 
                             (return 
                              (cons 
                               (SPLAYTREE::join-2 (car pV13) (car pV10)) 
                               (INTEGER-SPEC::+-2 (cdr pV13) (cdr pV10)))) 
                             (error 
                              "Nonexhaustive match failure in intersectionSplay")))) 
                         (error 
                          "Nonexhaustive match failure in intersectionSplay")))) 
                     (error "Nonexhaustive match failure in intersectionSplay"))))))))) 
   (error "Nonexhaustive match failure in intersectionSplay")))

(defun SPLAYSET::count-2 (sp n) 
  (block 
   nil 
   (if (eq (car sp) :|SplayNil|) 
       (return n) 
       (if (eq (car sp) :|SplayObj|) 
           (let ((pV2 (cdr sp))) 
             (return 
              (SPLAYSET::count-2 
               (svref pV2 0) 
               (SPLAYSET::count-2 (svref pV2 1) (INTEGER-SPEC::+-2 n 1))))))) 
   (error "Nonexhaustive match failure in count")))

(defun TERMINDEX::generalizations-2 (index term) 
  (labels 
    ((getList (path i terms) 
      (block 
       nil 
       (if (null terms) 
           (return INTEGERSET::empty) 
           (if (consp terms) 
               (let ((pV10 (cdr terms))
                     (pV9 (car terms))) 
                 (progn (if (null pV10) 
                            (return 
                             (|!get| (LIST-SPEC::++-2 path (cons i nil)) pV9))) 
                        (return 
                         (let ((|!set| 
                                (|!get| (LIST-SPEC::++-2 path (cons i nil)) pV9))) 
                           (if (INTEGERSET::isEmpty |!set|) 
                               |!set| 
                               (INTEGERSET::intersection-2 
                                |!set| 
                                (getList path (INTEGER-SPEC::+-2 i 1) pV10))))))))) 
       (error "Nonexhaustive match failure in generalizations")))
     (|!get| (p |!M|) 
      (let ((pV1 (TERMINDEX::getApplys-2 |!M| nil))) 
        (block 
         nil 
         (let ((pV2 (car pV1))) 
           (if (consp pV2) 
               (return 
                (if (cdr pV1) 
                    (TERMINDEX::getTerms-3 index p '(:|Star|)) 
                    (let ((|!subTerms| (TERMINDEX::subterms (cdr pV2)))) 
                      (let ((arity (LIST-SPEC::|!length| |!subTerms|))) 
                        (let ((indexT (TERMINDEX::getFunIndex (car pV2)))) 
                          (INTEGERSET::union-2 
                           (TERMINDEX::getTerms-3 index p '(:|Star|)) 
                           (if ( =  arity 0) 
                               (TERMINDEX::getTerms-3 index p (cons :|S| indexT)) 
                               (getList 
                                (LIST-SPEC::++-2 p (cons indexT nil)) 
                                1 
                                |!subTerms|)))))))))) 
         (error "Nonexhaustive match failure in generalizations"))))) 
    (INTEGERSET::listItems (|!get| nil term))))

(defun POLYSET::union-1-1 (|!s1| |!s2|) 
  (labels 
    ((fold--local-0 (e l) 
      (block 
       nil 
       (if (null l) 
           (return e) 
           (if (consp l) 
               (return (fold--local-0 (POLYSET::insert-1-1 e (car l)) (cdr l))))) 
       (error "Nonexhaustive match failure in union")))) 
    (fold--local-0 |!s1| |!s2|)))

(defun MS::findField-2 (id fields) 
  (block 
   nil 
   (if (null fields) 
       (return 
        (SYSTEM-SPEC::fail 
         (STRING-SPEC::^-2 
          (STRING-SPEC::^-2 "Field identifier " id) 
          " was not found"))) 
       (if (consp fields) 
           (let ((pV3 (car fields))) 
             (return 
              (if (string=  id (car pV3)) 
                  (cdr pV3) 
                  (MS::findField-2 id (cdr fields))))))) 
   (error "Nonexhaustive match failure in findField")))

(defun HIGHERORDERMATCHING::patternMatch-3 (pat |!N| |!S|) 
  (block 
   nil 
   (if (eq (car pat) :|VarPat|) 
       (return 
        (cons :|Match| (LIST-SPEC::cons-2 (cons (car (cdr pat)) |!N|) |!S|))) 
       (if (eq (car pat) :|WildPat|) 
           (return (cons :|Match| |!S|)) 
           (if (eq (car pat) :|RecordPat|) 
               (let ((pV147 (car (cdr pat)))) 
                 (return 
                  (let ((fields2 
                         (labels 
                           ((map--local-0 (l) 
                             (block 
                              nil 
                              (if (null l) 
                                  (return nil) 
                                  (if (consp l) 
                                      (let ((pV6 (car l))) 
                                        (return 
                                         (cons 
                                          (let ((p (cdr pV6))) 
                                            (vector 
                                             (car pV6) 
                                             (METASLANG::patternSort p) 
                                             p)) 
                                          (map--local-0 (cdr l))))))) 
                              (error 
                               "Nonexhaustive match failure in patternMatch")))) 
                           (map--local-0 pV147)))) 
                    (let ((srt 
                           (cons 
                            :|Product| 
                            (cons 
                             (labels 
                               ((map--local-0 (l) 
                                 (block 
                                  nil 
                                  (if (null l) 
                                      (return nil) 
                                      (if (consp l) 
                                          (let ((pV11 (car l))) 
                                            (return 
                                             (cons 
                                              (cons 
                                               (svref pV11 0) 
                                               (svref pV11 1)) 
                                              (map--local-0 (cdr l))))))) 
                                  (error 
                                   "Nonexhaustive match failure in patternMatch")))) 
                               (map--local-0 fields2)) 
                             POSITION-SPEC::noPos)))) 
                      (labels 
                        ((|!loop| (fields |!S|) 
                          (block 
                           nil 
                           (if (consp fields) 
                               (let ((pV23 (car fields))) 
                                 (let ((pV25 (svref pV23 0))) 
                                   (return 
                                    (let ((pV13 
                                           (HIGHERORDERMATCHING::patternMatch-3 
                                            (svref pV23 2) 
                                            (block 
                                             nil 
                                             (if (eq (car |!N|) :|Record|) 
                                                 (return 
                                                  (MS::findField-2 
                                                   pV25 
                                                   (car (cdr |!N|))))) 
                                             (return 
                                              (cons 
                                               :|Apply| 
                                               (vector 
                                                (cons 
                                                 :|Fun| 
                                                 (vector 
                                                  (cons :|Project| pV25) 
                                                  (cons 
                                                   :|Arrow| 
                                                   (vector 
                                                    srt 
                                                    (svref pV23 1) 
                                                    POSITION-SPEC::noPos)) 
                                                  POSITION-SPEC::noPos)) 
                                                |!N| 
                                                POSITION-SPEC::noPos)))) 
                                            |!S|))) 
                                      (block 
                                       nil 
                                       (if (eq (car pV13) :|Match|) 
                                           (return 
                                            (|!loop| (cdr fields) (cdr pV13)))) 
                                       (return pV13)))))) 
                               (if (null fields) (return (cons :|Match| |!S|)))) 
                           (error "Nonexhaustive match failure in patternMatch")))) 
                        (|!loop| fields2 |!S|)))))) 
               (if (eq (car pat) :|EmbedPat|) 
                   (let ((pV130 (cdr pat))) 
                     (let ((pV143 (svref pV130 1))
                           (pV142 (svref pV130 0))) 
                       (if (eq (car pV143) :|None|) 
                           (return 
                            (block 
                             nil 
                             (if (eq (car |!N|) :|Fun|) 
                                 (let ((pV51 (svref (cdr |!N|) 0))) 
                                   (if (eq (car pV51) :|Embed|) 
                                       (return 
                                        (if (string=  pV142 (car (cdr pV51))) 
                                            (cons :|Match| |!S|) 
                                            '(:|NoMatch|))))) 
                                 (if (eq (car |!N|) :|Apply|) 
                                     (let ((pV41 (svref (cdr |!N|) 0))) 
                                       (if (eq (car pV41) :|Fun|) 
                                           (let ((pV45 (svref (cdr pV41) 0))) 
                                             (if (eq (car pV45) :|Embed|) 
                                                 (if (eq t (cdr (cdr pV45))) 
                                                     (return '(:|NoMatch|))))))))) 
                             (return '(:|DontKnow|)))) 
                           (if (eq (car pV143) :|Some|) 
                               (return 
                                (block 
                                 nil 
                                 (if (eq (car |!N|) :|Fun|) 
                                     (if (eq (car (svref (cdr |!N|) 0)) :|Embed|) 
                                         (return '(:|NoMatch|))) 
                                     (if (eq (car |!N|) :|Apply|) 
                                         (let ((pV66 (cdr |!N|))) 
                                           (let ((pV68 (svref pV66 0))) 
                                             (if (eq (car pV68) :|Fun|) 
                                                 (let ((pV72 
                                                        (svref (cdr pV68) 0))) 
                                                   (if (eq (car pV72) :|Embed|) 
                                                       (let ((pV75 (cdr pV72))) 
                                                         (if (eq t (cdr pV75)) 
                                                             (return 
                                                              (if (string=  
                                                                   pV142 
                                                                   (car pV75)) 
                                                                  (HIGHERORDERMATCHING::patternMatch-3 
                                                                   (cdr pV143) 
                                                                   (svref pV66 1) 
                                                                   |!S|) 
                                                                  '(:|NoMatch|)))))))))))) 
                                 (return '(:|DontKnow|)))))))) 
                   (if (eq (car pat) :|StringPat|) 
                       (return 
                        (block 
                         nil 
                         (if (eq (car |!N|) :|Fun|) 
                             (let ((pV90 (svref (cdr |!N|) 0))) 
                               (if (eq (car pV90) :|String|) 
                                   (return 
                                    (if (string=  (car (cdr pat)) (cdr pV90)) 
                                        (cons :|Match| |!S|) 
                                        '(:|NoMatch|)))))) 
                         (return '(:|DontKnow|)))) 
                       (if (eq (car pat) :|BoolPat|) 
                           (return 
                            (block 
                             nil 
                             (if (eq (car |!N|) :|Fun|) 
                                 (let ((pV100 (svref (cdr |!N|) 0))) 
                                   (if (eq (car pV100) :|Bool|) 
                                       (return 
                                        (if (eq (car (cdr pat)) (cdr pV100)) 
                                            (cons :|Match| |!S|) 
                                            '(:|NoMatch|)))))) 
                             (return '(:|DontKnow|)))) 
                           (if (eq (car pat) :|CharPat|) 
                               (return 
                                (block 
                                 nil 
                                 (if (eq (car |!N|) :|Fun|) 
                                     (let ((pV110 (svref (cdr |!N|) 0))) 
                                       (if (eq (car pV110) :|Char|) 
                                           (return 
                                            (if (eq (car (cdr pat)) (cdr pV110)) 
                                                (cons :|Match| |!S|) 
                                                '(:|NoMatch|)))))) 
                                 (return '(:|DontKnow|)))) 
                               (if (eq (car pat) :|NatPat|) 
                                   (return 
                                    (block 
                                     nil 
                                     (if (eq (car |!N|) :|Fun|) 
                                         (let ((pV120 (svref (cdr |!N|) 0))) 
                                           (if (eq (car pV120) :|Nat|) 
                                               (return 
                                                (if ( =  
                                                     (car (cdr pat)) 
                                                     (cdr pV120)) 
                                                    (cons :|Match| |!S|) 
                                                    '(:|NoMatch|)))))) 
                                     (return '(:|DontKnow|)))))))))))) 
   (return '(:|DontKnow|))))

(defun HIGHERORDERMATCHING::patternMatchRules-2 (rules |!N|) 
  (block 
   nil 
   (if (null rules) 
       (return '(:|None|)) 
       (if (consp rules) 
           (let ((pV8 (car rules))) 
             (progn (let ((pV11 (svref pV8 1))) 
                      (if (eq (car pV11) :|Fun|) 
                          (let ((pV14 (svref (cdr pV11) 0))) 
                            (if (eq (car pV14) :|Bool|) 
                                (if (eq t (cdr pV14)) 
                                    (return 
                                     (let ((pV3 
                                            (HIGHERORDERMATCHING::patternMatch-3 
                                             (svref pV8 0) 
                                             |!N| 
                                             nil))) 
                                       (block 
                                        nil 
                                        (if (eq (car pV3) :|Match|) 
                                            (return 
                                             (cons 
                                              :|Some| 
                                              (cons (cdr pV3) (svref pV8 2)))) 
                                            (if (eq (car pV3) :|NoMatch|) 
                                                (return 
                                                 (HIGHERORDERMATCHING::patternMatchRules-2 
                                                  (cdr rules) 
                                                  |!N|)) 
                                                (if (eq (car pV3) :|DontKnow|) 
                                                    (return '(:|None|))))) 
                                        (error 
                                         "Nonexhaustive match failure in patternMatchRules"))))))))) 
                    (return '(:|None|)))))) 
   (error "Nonexhaustive match failure in patternMatchRules")))

(defun UTILITIES::freeVarsRec (|!M|) 
  (block 
   nil 
   (if (eq (car |!M|) :|Var|) 
       (return (cons (car (cdr |!M|)) nil)) 
       (if (eq (car |!M|) :|Apply|) 
           (let ((pV46 (cdr |!M|))) 
             (return 
              (LIST-SPEC::++-2 
               (UTILITIES::freeVarsRec (svref pV46 0)) 
               (UTILITIES::freeVarsRec (svref pV46 1))))) 
           (if (eq (car |!M|) :|Record|) 
               (return (UTILITIES::freeVarsList (car (cdr |!M|)))) 
               (if (eq (car |!M|) :|Fun|) 
                   (return nil) 
                   (if (eq (car |!M|) :|Lambda|) 
                       (let ((pV64 (car (cdr |!M|)))) 
                         (return 
                          (labels 
                            ((foldr--local-0 (base l) 
                              (block 
                               nil 
                               (if (null l) 
                                   (return base) 
                                   (if (consp l) 
                                       (return 
                                        (let ((vs (foldr--local-0 base (cdr l)))) 
                                          (LIST-SPEC::++-2 
                                           vs 
                                           (UTILITIES::freeVarsMatch (car l))))))) 
                               (error 
                                "Nonexhaustive match failure in freeVarsRec")))) 
                            (foldr--local-0 nil pV64)))) 
                       (if (eq (car |!M|) :|Let|) 
                           (let ((pV42 (cdr |!M|))) 
                             (let ((pV61 (svref pV42 0))) 
                               (return 
                                (let ((pV21 
                                       (labels 
                                         ((foldr--local-0 (base l) 
                                           (block 
                                            nil 
                                            (if (null l) 
                                                (return base) 
                                                (if (consp l) 
                                                    (let ((pV19 (car l))) 
                                                      (return 
                                                       (let ((pV12 
                                                              (foldr--local-0 
                                                               base 
                                                               (cdr l)))) 
                                                         (block 
                                                          nil 
                                                          (return 
                                                           (cons 
                                                            (LIST-SPEC::++-2 
                                                             (UTILITIES::patVars 
                                                              (car pV19)) 
                                                             (car pV12)) 
                                                            (LIST-SPEC::++-2 
                                                             (UTILITIES::freeVarsRec 
                                                              (cdr pV19)) 
                                                             (cdr pV12)))) 
                                                          (error 
                                                           "Nonexhaustive match failure in freeVarsRec"))))))) 
                                            (error 
                                             "Nonexhaustive match failure in freeVarsRec")))) 
                                         (foldr--local-0 (cons nil nil) pV61)))) 
                                  (block 
                                   nil 
                                   (return 
                                    (LIST-SPEC::++-2 
                                     (cdr pV21) 
                                     (UTILITIES::deleteVars-2 
                                      (UTILITIES::freeVarsRec (svref pV42 1)) 
                                      (car pV21)))) 
                                   (error 
                                    "Nonexhaustive match failure in freeVarsRec")))))) 
                           (if (eq (car |!M|) :|LetRec|) 
                               (let ((pV41 (cdr |!M|))) 
                                 (let ((pV58 (svref pV41 0))) 
                                   (return 
                                    (UTILITIES::deleteVars-2 
                                     (LIST-SPEC::++-2 
                                      (UTILITIES::freeVarsRec (svref pV41 1)) 
                                      (UTILITIES::freeVarsList pV58)) 
                                     (labels 
                                       ((map--local-0 (l) 
                                         (block 
                                          nil 
                                          (if (null l) 
                                              (return nil) 
                                              (if (consp l) 
                                                  (return 
                                                   (cons 
                                                    (car (car l)) 
                                                    (map--local-0 (cdr l)))))) 
                                          (error 
                                           "Nonexhaustive match failure in freeVarsRec")))) 
                                       (map--local-0 pV58)))))) 
                               (if (eq (car |!M|) :|Bind|) 
                                   (let ((pV40 (cdr |!M|))) 
                                     (return 
                                      (UTILITIES::deleteVars-2 
                                       (UTILITIES::freeVarsRec (svref pV40 2)) 
                                       (svref pV40 1)))) 
                                   (if (eq (car |!M|) :|IfThenElse|) 
                                       (let ((pV39 (cdr |!M|))) 
                                         (return 
                                          (LIST-SPEC::++-2 
                                           (LIST-SPEC::++-2 
                                            (UTILITIES::freeVarsRec 
                                             (svref pV39 0)) 
                                            (UTILITIES::freeVarsRec 
                                             (svref pV39 1))) 
                                           (UTILITIES::freeVarsRec 
                                            (svref pV39 2))))) 
                                       (if (eq (car |!M|) :|Seq|) 
                                           (let ((pV48 (car (cdr |!M|)))) 
                                             (return 
                                              (labels 
                                                ((foldr--local-0 (base l) 
                                                  (block 
                                                   nil 
                                                   (if (null l) 
                                                       (return base) 
                                                       (if (consp l) 
                                                           (return 
                                                            (let ((vs 
                                                                   (foldr--local-0 
                                                                    base 
                                                                    (cdr l)))) 
                                                              (LIST-SPEC::++-2 
                                                               vs 
                                                               (UTILITIES::freeVarsRec 
                                                                (car l))))))) 
                                                   (error 
                                                    "Nonexhaustive match failure in freeVarsRec")))) 
                                                (foldr--local-0 nil pV48)))))))))))))) 
   (error "Nonexhaustive match failure in freeVarsRec")))

(defun UTILITIES::freeVars (|!M|) 
  (LISTUTILITIES::removeDuplicates (UTILITIES::freeVarsRec |!M|)))

(defun UTILITIES::substitute2-3 (|!M| sub freeNames) 
  (labels 
    ((substLet (pV89 pV90) 
      (block 
       nil 
       (return 
        (let ((pV85 
               (UTILITIES::substPattern-3 
                (car pV89) 
                (svref pV90 2) 
                (svref pV90 1)))) 
          (block 
           nil 
           (return 
            (vector 
             (LIST-SPEC::cons-2 (cons (svref pV85 0) (cdr pV89)) (svref pV90 0)) 
             (svref pV85 2) 
             (svref pV85 1))) 
           (error "Nonexhaustive match failure in substitute2")))) 
       (error "Nonexhaustive match failure in substitute2")))
     (substRule (pat |!cond| term) 
      (let ((pV81 (UTILITIES::substPattern-3 pat sub freeNames))) 
        (block 
         nil 
         (let ((pV84 (svref pV81 2))
               (pV83 (svref pV81 1))
               (pV82 (svref pV81 0))) 
           (return 
            (if (LIST-SPEC::|!null| pV83) 
                (vector pV82 |!cond| term) 
                (vector 
                 pV82 
                 (UTILITIES::substitute2-3 |!cond| pV83 pV84) 
                 (UTILITIES::substitute2-3 term pV83 pV84))))) 
         (error "Nonexhaustive match failure in substitute2"))))
     (|!subst| (|!M|) 
      (block 
       nil 
       (if (eq (car |!M|) :|Var|) 
           (let ((pV79 (car (car (cdr |!M|))))) 
             (return 
              (let ((pV3 
                     (labels 
                       ((lookup--local-0 (association_list) 
                         (block 
                          nil 
                          (if (null association_list) 
                              (return '(:|None|)) 
                              (if (consp association_list) 
                                  (let ((pV8 (car association_list))) 
                                    (return 
                                     (if (string=  pV79 (car (car pV8))) 
                                         (cons :|Some| (cdr pV8)) 
                                         (lookup--local-0 (cdr association_list))))))) 
                          (error "Nonexhaustive match failure in substitute2")))) 
                       (lookup--local-0 sub)))) 
                (block 
                 nil 
                 (if (eq (car pV3) :|None|) 
                     (return |!M|) 
                     (if (eq (car pV3) :|Some|) (return (cdr pV3)))) 
                 (error "Nonexhaustive match failure in substitute2"))))) 
           (if (eq (car |!M|) :|Apply|) 
               (let ((pV52 (cdr |!M|))) 
                 (return 
                  (cons 
                   :|Apply| 
                   (vector 
                    (|!subst| (svref pV52 0)) 
                    (|!subst| (svref pV52 1)) 
                    (svref pV52 2))))) 
               (if (eq (car |!M|) :|Record|) 
                   (let ((pV51 (cdr |!M|))) 
                     (let ((pV72 (car pV51))) 
                       (return 
                        (cons 
                         :|Record| 
                         (cons 
                          (labels 
                            ((map--local-0 (l) 
                              (block 
                               nil 
                               (if (null l) 
                                   (return nil) 
                                   (if (consp l) 
                                       (let ((pV14 (car l))) 
                                         (return 
                                          (cons 
                                           (cons 
                                            (car pV14) 
                                            (|!subst| (cdr pV14))) 
                                           (map--local-0 (cdr l))))))) 
                               (error 
                                "Nonexhaustive match failure in substitute2")))) 
                            (map--local-0 pV72)) 
                          (cdr pV51)))))) 
                   (if (eq (car |!M|) :|Fun|) 
                       (return |!M|) 
                       (if (eq (car |!M|) :|Lambda|) 
                           (let ((pV49 (cdr |!M|))) 
                             (return 
                              (cons 
                               :|Lambda| 
                               (cons 
                                (LIST-SPEC::map-1-1 
                                 #'(lambda (pV) 
                                    (substRule 
                                     (svref pV 0) 
                                     (svref pV 1) 
                                     (svref pV 2))) 
                                 (car pV49)) 
                                (cdr pV49))))) 
                           (if (eq (car |!M|) :|Let|) 
                               (let ((pV48 (cdr |!M|))) 
                                 (let ((pV67 (svref pV48 0))) 
                                   (return 
                                    (let ((decls 
                                           (labels 
                                             ((map--local-0 (l) 
                                               (block 
                                                nil 
                                                (if (null l) 
                                                    (return nil) 
                                                    (if (consp l) 
                                                        (let ((pV19 (car l))) 
                                                          (return 
                                                           (cons 
                                                            (cons 
                                                             (car pV19) 
                                                             (|!subst| 
                                                              (cdr pV19))) 
                                                            (map--local-0 
                                                             (cdr l))))))) 
                                                (error 
                                                 "Nonexhaustive match failure in substitute2")))) 
                                             (map--local-0 pV67)))) 
                                      (let ((pV21 
                                             (LIST-SPEC::foldr-1-1-1 
                                              #'(lambda (pV) 
                                                 (substLet (car pV) (cdr pV))) 
                                              (vector nil freeNames sub) 
                                              decls))) 
                                        (block 
                                         nil 
                                         (return 
                                          (cons 
                                           :|Let| 
                                           (vector 
                                            (svref pV21 0) 
                                            (UTILITIES::substitute2-3 
                                             (svref pV48 1) 
                                             (svref pV21 2) 
                                             (svref pV21 1)) 
                                            (svref pV48 2)))) 
                                         (error 
                                          "Nonexhaustive match failure in substitute2"))))))) 
                               (if (eq (car |!M|) :|LetRec|) 
                                   (let ((pV47 (cdr |!M|))) 
                                     (let ((pV64 (svref pV47 0))) 
                                       (return 
                                        (let ((pV35 
                                               (UTILITIES::substBoundVars-3 
                                                (labels 
                                                  ((map--local-0 (l) 
                                                    (block 
                                                     nil 
                                                     (if (null l) 
                                                         (return nil) 
                                                         (if (consp l) 
                                                             (return 
                                                              (cons 
                                                               (car (car l)) 
                                                               (map--local-0 
                                                                (cdr l)))))) 
                                                     (error 
                                                      "Nonexhaustive match failure in substitute2")))) 
                                                  (map--local-0 pV64)) 
                                                sub 
                                                freeNames))) 
                                          (block 
                                           nil 
                                           (let ((pV38 (svref pV35 2))
                                                 (pV37 (svref pV35 1))) 
                                             (return 
                                              (cons 
                                               :|LetRec| 
                                               (vector 
                                                (LISTPAIR::zip-2 
                                                 (svref pV35 0) 
                                                 (labels 
                                                   ((map--local-0 (l) 
                                                     (block 
                                                      nil 
                                                      (if (null l) 
                                                          (return nil) 
                                                          (if (consp l) 
                                                              (return 
                                                               (cons 
                                                                (UTILITIES::substitute2-3 
                                                                 (cdr (car l)) 
                                                                 pV37 
                                                                 pV38) 
                                                                (map--local-0 
                                                                 (cdr l)))))) 
                                                      (error 
                                                       "Nonexhaustive match failure in substitute2")))) 
                                                   (map--local-0 pV64))) 
                                                (UTILITIES::substitute2-3 
                                                 (svref pV47 1) 
                                                 pV37 
                                                 pV38) 
                                                (svref pV47 2))))) 
                                           (error 
                                            "Nonexhaustive match failure in substitute2")))))) 
                                   (if (eq (car |!M|) :|Bind|) 
                                       (let ((pV46 (cdr |!M|))) 
                                         (return 
                                          (let ((pV39 
                                                 (UTILITIES::substBoundVars-3 
                                                  (svref pV46 1) 
                                                  sub 
                                                  freeNames))) 
                                            (block 
                                             nil 
                                             (return 
                                              (cons 
                                               :|Bind| 
                                               (vector 
                                                (svref pV46 0) 
                                                (svref pV39 0) 
                                                (UTILITIES::substitute2-3 
                                                 (svref pV46 2) 
                                                 (svref pV39 1) 
                                                 (svref pV39 2)) 
                                                (svref pV46 3)))) 
                                             (error 
                                              "Nonexhaustive match failure in substitute2"))))) 
                                       (if (eq (car |!M|) :|IfThenElse|) 
                                           (let ((pV45 (cdr |!M|))) 
                                             (return 
                                              (cons 
                                               :|IfThenElse| 
                                               (vector 
                                                (|!subst| (svref pV45 0)) 
                                                (|!subst| (svref pV45 1)) 
                                                (|!subst| (svref pV45 2)) 
                                                (svref pV45 3))))) 
                                           (if (eq (car |!M|) :|Seq|) 
                                               (let ((pV44 (cdr |!M|))) 
                                                 (return 
                                                  (cons 
                                                   :|Seq| 
                                                   (cons 
                                                    (LIST-SPEC::map-1-1 
                                                     #'|!subst| 
                                                     (car pV44)) 
                                                    (cdr pV44))))))))))))))) 
       (error "Nonexhaustive match failure in substitute2")))) (|!subst| |!M|)))

(defun UTILITIES::substitute-2 (|!M| sub) 
  (if (LIST-SPEC::|!null| sub) 
      |!M| 
      (UTILITIES::substitute2-3 
       |!M| 
       sub 
       (labels 
         ((foldr--local-0 (base l) 
           (block 
            nil 
            (if (null l) 
                (return base) 
                (if (consp l) 
                    (return 
                     (let ((pV7 (foldr--local-0 base (cdr l)))) 
                       (block 
                        nil 
                        (let ((pV9 (cdr (car l)))) 
                          (return 
                           (STRINGSET::union-2 
                            (STRINGSET::fromList 
                             (labels 
                               ((map--local-0 (l1) 
                                 (block 
                                  nil 
                                  (if (null l1) 
                                      (return nil) 
                                      (if (consp l1) 
                                          (return 
                                           (cons 
                                            (car (car l1)) 
                                            (map--local-0 (cdr l1)))))) 
                                  (error 
                                   "Nonexhaustive match failure in substitute")))) 
                               (map--local-0 (UTILITIES::freeVars pV9)))) 
                            pV7))) 
                        (error "Nonexhaustive match failure in substitute")))))) 
            (error "Nonexhaustive match failure in substitute")))) 
         (foldr--local-0 STRINGSET::empty sub)))))

(defun HIGHERORDERMATCHING::dereferenceR-1-1 (|!S| term) 
  (block 
   nil 
   (if (eq (car term) :|Apply|) 
       (let ((pV42 (cdr term))) 
         (let ((pV43 (svref pV42 0))
               (pV44 (svref pV42 1))
               (pV45 (svref pV42 2))) 
           (progn (if (eq (car pV43) :|Fun|) 
                      (let ((pV47 (svref (cdr pV43) 0))) 
                        (if (eq (car pV47) :|Op|) 
                            (let ((pV51 (car (cdr pV47)))) 
                              (if (eq (car pV51) :|Qualified|) 
                                  (if (string=  "%Flex" (cdr (cdr pV51))) 
                                      (if (eq (car pV44) :|Fun|) 
                                          (let ((pV57 (svref (cdr pV44) 0))) 
                                            (if (eq (car pV57) :|Nat|) 
                                                (return 
                                                 (let ((pV7 
                                                        (NATMAP::find-2 
                                                         (cdr |!S|) 
                                                         (cdr pV57)))) 
                                                   (block 
                                                    nil 
                                                    (if (eq (car pV7) :|Some|) 
                                                        (return 
                                                         (HIGHERORDERMATCHING::dereferenceR-1-1 
                                                          |!S| 
                                                          (cdr pV7))) 
                                                        (if (eq 
                                                             (car pV7) 
                                                             :|None|) 
                                                            (return term))) 
                                                    (error 
                                                     "Nonexhaustive match failure in dereferenceR"))))))))))))) 
                  (return 
                   (let ((pV31 (HIGHERORDERMATCHING::dereferenceR-1-1 |!S| pV43))) 
                     (block 
                      nil 
                      (if (eq (car pV31) :|Lambda|) 
                          (return 
                           (let ((|!N| 
                                  (HIGHERORDERMATCHING::dereferenceR-1-1 
                                   |!S| 
                                   pV44))) 
                             (let ((pV10 
                                    (HIGHERORDERMATCHING::patternMatchRules-2 
                                     (car (cdr pV31)) 
                                     |!N|))) 
                               (block 
                                nil 
                                (if (eq (car pV10) :|None|) 
                                    (return 
                                     (cons :|Apply| (vector pV43 |!N| pV45))) 
                                    (if (eq (car pV10) :|Some|) 
                                        (let ((pV11 (cdr pV10))) 
                                          (return 
                                           (HIGHERORDERMATCHING::dereferenceR-1-1 
                                            |!S| 
                                            (UTILITIES::substitute-2 
                                             (cdr pV11) 
                                             (car pV11))))))) 
                                (error 
                                 "Nonexhaustive match failure in dereferenceR")))))) 
                      (if (eq (car pV31) :|Fun|) 
                          (let ((pV33 (svref (cdr pV31) 0))) 
                            (if (eq (car pV33) :|Project|) 
                                (let ((pV36 (cdr pV33))) 
                                  (return 
                                   (let ((pV27 
                                          (HIGHERORDERMATCHING::dereferenceR-1-1 
                                           |!S| 
                                           pV44))) 
                                     (block 
                                      nil 
                                      (if (eq (car pV27) :|Record|) 
                                          (let ((pV29 (car (cdr pV27)))) 
                                            (return 
                                             (let ((pV18 
                                                    (labels 
                                                      ((find--local-0 (l0) 
                                                        (block 
                                                         nil 
                                                         (if (null l0) 
                                                             (return '(:|None|)) 
                                                             (if (consp l0) 
                                                                 (let ((pV25 
                                                                        (car l0))) 
                                                                   (return 
                                                                    (if (string=  
                                                                         pV36 
                                                                         (car 
                                                                          pV25)) 
                                                                        (cons 
                                                                         :|Some| 
                                                                         (cons 
                                                                          (car 
                                                                           pV25) 
                                                                          (cdr 
                                                                           pV25))) 
                                                                        (find--local-0 
                                                                         (cdr l0))))))) 
                                                         (error 
                                                          "Nonexhaustive match failure in dereferenceR")))) 
                                                      (find--local-0 pV29)))) 
                                               (block 
                                                nil 
                                                (if (eq (car pV18) :|Some|) 
                                                    (return (cdr (cdr pV18))) 
                                                    (if (eq (car pV18) :|None|) 
                                                        (return 
                                                         (SYSTEM-SPEC::fail 
                                                          (STRING-SPEC::^-2 
                                                           (STRING-SPEC::^-2 
                                                            "Label " 
                                                            pV36) 
                                                           " not found"))))) 
                                                (error 
                                                 "Nonexhaustive match failure in dereferenceR")))))) 
                                      (return 
                                       (cons :|Apply| (vector pV31 pV27 pV45)))))))))) 
                      (return (cons :|Apply| (vector pV31 pV44 pV45)))))))))) 
   (return term)))

(defun MS::mkTuple (terms) 
  (block 
   nil 
   (if (consp terms) (if (null (cdr terms)) (return (car terms)))) 
   (return (MS::mkRecord (MS::tagTuple terms)))))

(defun MS::mkTuplePat (pats) 
  (block 
   nil 
   (if (consp pats) (if (null (cdr pats)) (return (car pats)))) 
   (return (cons :|RecordPat| (cons (MS::tagTuple pats) POSITION-SPEC::noPos)))))

(defun HIGHERORDERMATCHING::inferType-3 (spc |!subst| |!N|) 
  (block 
   nil 
   (if (eq (car |!N|) :|Apply|) 
       (return 
        (let ((pV2 
               (SPECENVIRONMENT::rangeOpt-2 
                spc 
                (HIGHERORDERMATCHING::dereferenceSort-2 
                 |!subst| 
                 (HIGHERORDERMATCHING::inferType-3 
                  spc 
                  |!subst| 
                  (svref (cdr |!N|) 0)))))) 
          (block 
           nil 
           (if (eq (car pV2) :|Some|) 
               (return (cdr pV2)) 
               (if (eq (car pV2) :|None|) 
                   (return 
                    (SYSTEM-SPEC::fail 
                     (STRING-SPEC::^-2 
                      "Could not extract type for " 
                      (ANNSPECPRINTER::printTermWithSorts |!N|)))))) 
           (error "Nonexhaustive match failure in inferType")))) 
       (if (eq (car |!N|) :|Bind|) 
           (return MS::boolSort) 
           (if (eq (car |!N|) :|Record|) 
               (let ((pV33 (cdr |!N|))) 
                 (let ((pV66 (car pV33))) 
                   (return 
                    (cons 
                     :|Product| 
                     (cons 
                      (labels 
                        ((map--local-0 (l) 
                          (block 
                           nil 
                           (if (null l) 
                               (return nil) 
                               (if (consp l) 
                                   (let ((pV7 (car l))) 
                                     (return 
                                      (cons 
                                       (cons 
                                        (car pV7) 
                                        (HIGHERORDERMATCHING::inferType-3 
                                         spc 
                                         |!subst| 
                                         (cdr pV7))) 
                                       (map--local-0 (cdr l))))))) 
                           (error "Nonexhaustive match failure in inferType")))) 
                        (map--local-0 pV66)) 
                      (cdr pV33)))))) 
               (if (eq (car |!N|) :|Let|) 
                   (return 
                    (HIGHERORDERMATCHING::inferType-3 
                     spc 
                     |!subst| 
                     (svref (cdr |!N|) 1))) 
                   (if (eq (car |!N|) :|LetRec|) 
                       (return 
                        (HIGHERORDERMATCHING::inferType-3 
                         spc 
                         |!subst| 
                         (svref (cdr |!N|) 1))) 
                       (if (eq (car |!N|) :|Var|) 
                           (return (cdr (car (cdr |!N|)))) 
                           (if (eq (car |!N|) :|Fun|) 
                               (return (svref (cdr |!N|) 1)) 
                               (if (eq (car |!N|) :|Lambda|) 
                                   (let ((pV45 (car (cdr |!N|)))) 
                                     (if (consp pV45) 
                                         (let ((pV48 (car pV45))) 
                                           (return 
                                            (MS::mkArrow-2 
                                             (METASLANG::patternSort 
                                              (svref pV48 0)) 
                                             (HIGHERORDERMATCHING::inferType-3 
                                              spc 
                                              |!subst| 
                                              (svref pV48 2))))) 
                                         (if (null pV45) 
                                             (return 
                                              (SYSTEM-SPEC::fail 
                                               "Ill formed lambda abstraction"))))) 
                                   (if (eq (car |!N|) :|IfThenElse|) 
                                       (return 
                                        (HIGHERORDERMATCHING::inferType-3 
                                         spc 
                                         |!subst| 
                                         (svref (cdr |!N|) 1))) 
                                       (if (eq (car |!N|) :|Seq|) 
                                           (let ((pV26 (cdr |!N|))) 
                                             (let ((pV37 (cdr pV26))
                                                   (pV36 (car pV26))) 
                                               (if (null pV36) 
                                                   (return 
                                                    (cons 
                                                     :|Product| 
                                                     (cons nil pV37))) 
                                                   (if (consp pV36) 
                                                       (let ((pV40 (cdr pV36))) 
                                                         (progn (if (null pV40) 
                                                                    (return 
                                                                     (HIGHERORDERMATCHING::inferType-3 
                                                                      spc 
                                                                      |!subst| 
                                                                      (car pV36)))) 
                                                                (return 
                                                                 (HIGHERORDERMATCHING::inferType-3 
                                                                  spc 
                                                                  |!subst| 
                                                                  (cons 
                                                                   :|Seq| 
                                                                   (cons 
                                                                    pV40 
                                                                    pV37)))))))))))))))))))) 
   (return (SYSTEM-SPEC::fail "Non-exhaustive match"))))

(defun HIGHERORDERMATCHING::matchPatterns-4 (context pairs S1 S2) 
  (block 
   nil 
   (if (consp pairs) 
       (let ((pV3 (car pairs))) 
         (return 
          (HIGHERORDERMATCHING::matchPattern-6 
           context 
           (car pV3) 
           (cdr pV3) 
           (cdr pairs) 
           S1 
           S2))) 
       (if (null pairs) (return (cons :|Some| (cons S1 S2))))) 
   (error "Nonexhaustive match failure in matchPatterns")))

(defun HIGHERORDERMATCHING::matchPattern-6 (context pat1 pat2 pairs S1 S2) 
  (block 
   nil 
   (if (eq (car pat1) :|VarPat|) 
       (let ((pV117 (car (cdr pat1)))) 
         (let ((pV120 (cdr pV117))) 
           (if (eq (car pat2) :|VarPat|) 
               (let ((pV122 (car (cdr pat2)))) 
                 (return 
                  (let ((z (HIGHERORDERMATCHING::freshBoundVar-2 context pV120))) 
                    (HIGHERORDERMATCHING::matchPatterns-4 
                     context 
                     pairs 
                     (LIST-SPEC::cons-2 
                      (cons 
                       (cons (car pV117) pV120) 
                       (cons :|Var| (cons z POSITION-SPEC::noPos))) 
                      S1) 
                     (LIST-SPEC::cons-2 
                      (cons 
                       (cons (car pV122) (cdr pV122)) 
                       (cons :|Var| (cons z POSITION-SPEC::noPos))) 
                      S2)))))))) 
       (if (eq (car pat1) :|EmbedPat|) 
           (let ((pV55 (cdr pat1))) 
             (let ((pV102 (svref pV55 1))
                   (pV101 (svref pV55 0))) 
               (if (eq (car pV102) :|None|) 
                   (if (eq (car pat2) :|EmbedPat|) 
                       (let ((pV112 (cdr pat2))) 
                         (if (eq (car (svref pV112 1)) :|None|) 
                             (return 
                              (if (string=  pV101 (svref pV112 0)) 
                                  (HIGHERORDERMATCHING::matchPatterns-4 
                                   context 
                                   pairs 
                                   S1 
                                   S2) 
                                  '(:|None|)))))) 
                   (if (eq (car pV102) :|Some|) 
                       (if (eq (car pat2) :|EmbedPat|) 
                           (let ((pV106 (cdr pat2))) 
                             (let ((pV108 (svref pV106 1))) 
                               (if (eq (car pV108) :|Some|) 
                                   (return 
                                    (if (string=  pV101 (svref pV106 0)) 
                                        (HIGHERORDERMATCHING::matchPattern-6 
                                         context 
                                         (cdr pV102) 
                                         (cdr pV108) 
                                         pairs 
                                         S1 
                                         S2) 
                                        '(:|None|))))))))))) 
           (if (eq (car pat1) :|RecordPat|) 
               (let ((pV96 (car (cdr pat1)))) 
                 (if (eq (car pat2) :|RecordPat|) 
                     (let ((pV99 (car (cdr pat2)))) 
                       (return 
                        (HIGHERORDERMATCHING::matchPatterns-4 
                         context 
                         (LIST-SPEC::@-2 
                          (labels 
                            ((map--local-0 (l r) 
                              (block 
                               nil 
                               (if (consp l) 
                                   (if (consp r) 
                                       (return 
                                        (cons 
                                         (block 
                                          nil 
                                          (return 
                                           (cons (cdr (car l)) (cdr (car r)))) 
                                          (error 
                                           "Nonexhaustive match failure in matchPattern")) 
                                         (map--local-0 (cdr l) (cdr r)))))) 
                               (return nil)))) (map--local-0 pV96 pV99)) 
                          pairs) 
                         S1 
                         S2))))) 
               (if (eq (car pat1) :|WildPat|) 
                   (if (eq (car pat2) :|WildPat|) 
                       (return (cons :|Some| (cons S1 S2)))) 
                   (if (eq (car pat1) :|StringPat|) 
                       (if (eq (car pat2) :|StringPat|) 
                           (return 
                            (if (string=  (car (cdr pat1)) (car (cdr pat2))) 
                                (HIGHERORDERMATCHING::matchPatterns-4 
                                 context 
                                 pairs 
                                 S1 
                                 S2) 
                                '(:|None|)))) 
                       (if (eq (car pat1) :|BoolPat|) 
                           (if (eq (car pat2) :|BoolPat|) 
                               (return 
                                (if (eq (car (cdr pat1)) (car (cdr pat2))) 
                                    (HIGHERORDERMATCHING::matchPatterns-4 
                                     context 
                                     pairs 
                                     S1 
                                     S2) 
                                    '(:|None|)))) 
                           (if (eq (car pat1) :|CharPat|) 
                               (if (eq (car pat2) :|CharPat|) 
                                   (return 
                                    (if (eq (car (cdr pat1)) (car (cdr pat2))) 
                                        (HIGHERORDERMATCHING::matchPatterns-4 
                                         context 
                                         pairs 
                                         S1 
                                         S2) 
                                        '(:|None|)))) 
                               (if (eq (car pat1) :|NatPat|) 
                                   (if (eq (car pat2) :|NatPat|) 
                                       (return 
                                        (if ( =  
                                             (car (cdr pat1)) 
                                             (car (cdr pat2))) 
                                            (HIGHERORDERMATCHING::matchPatterns-4 
                                             context 
                                             pairs 
                                             S1 
                                             S2) 
                                            '(:|None|)))) 
                                   (if (eq (car pat1) :|RelaxPat|) 
                                       (if (eq (car pat2) :|RelaxPat|) 
                                           (return 
                                            (if (slang-built-in::slang-term-equals-2 
                                                 (svref (cdr pat1) 1) 
                                                 (svref (cdr pat2) 1)) 
                                                (HIGHERORDERMATCHING::matchPatterns-4 
                                                 context 
                                                 pairs 
                                                 S1 
                                                 S2) 
                                                '(:|None|)))) 
                                       (if (eq (car pat1) :|QuotientPat|) 
                                           (if (eq (car pat2) :|QuotientPat|) 
                                               (return 
                                                (if (slang-built-in::slang-term-equals-2 
                                                     (svref (cdr pat1) 1) 
                                                     (svref (cdr pat2) 1)) 
                                                    (HIGHERORDERMATCHING::matchPatterns-4 
                                                     context 
                                                     pairs 
                                                     S1 
                                                     S2) 
                                                    '(:|None|)))))))))))))) 
   (return 
    (let ((pV43 (HIGHERORDERMATCHING::matchIrefutablePattern-3 context pat1 S1))) 
      (block 
       nil 
       (if (eq (car pV43) :|None|) 
           (return '(:|None|)) 
           (if (eq (car pV43) :|Some|) 
               (return 
                (let ((pV41 
                       (HIGHERORDERMATCHING::matchIrefutablePattern-3 
                        context 
                        pat2 
                        S2))) 
                  (block 
                   nil 
                   (if (eq (car pV41) :|Some|) 
                       (return 
                        (HIGHERORDERMATCHING::matchPatterns-4 
                         context 
                         pairs 
                         (cdr pV43) 
                         (cdr pV41))) 
                       (if (eq (car pV41) :|None|) (return '(:|None|)))) 
                   (error "Nonexhaustive match failure in matchPattern")))))) 
       (error "Nonexhaustive match failure in matchPattern"))))))

(defun HIGHERORDERMATCHING::occursP-1-1 (n pV) 
  (HIGHERORDERMATCHING::occurs-1-1 n (cdr pV)))

(defun HIGHERORDERMATCHING::occurs-1-1 (n term) 
  (block 
   nil 
   (if (eq (car term) :|Var|) 
       (return nil) 
       (if (eq (car term) :|Fun|) 
           (return nil) 
           (if (eq (car term) :|Apply|) 
               (let ((pV27 (cdr term))) 
                 (return 
                  (let ((pV4 (HIGHERORDERMATCHING::isFlexVar? term))) 
                    (block 
                     nil 
                     (if (eq (car pV4) :|Some|) 
                         (return ( =  n (cdr pV4))) 
                         (if (eq (car pV4) :|None|) 
                             (return 
                              (cl:or 
                               (HIGHERORDERMATCHING::occurs-1-1 n (svref pV27 0)) 
                               (HIGHERORDERMATCHING::occurs-1-1 n (svref pV27 1)))))) 
                     (error "Nonexhaustive match failure in occurs"))))) 
               (if (eq (car term) :|Record|) 
                   (return 
                    (LIST-SPEC::exists-1-1 
                     (HIGHERORDERMATCHING::occursP n) 
                     (car (cdr term)))) 
                   (if (eq (car term) :|Lambda|) 
                       (let ((pV46 (car (cdr term)))) 
                         (return 
                          (labels 
                            ((exists--local-0 (l) 
                              (block 
                               nil 
                               (if (null l) 
                                   (return nil) 
                                   (if (consp l) 
                                       (let ((pV11 (car l))) 
                                         (return 
                                          (if (cl:or 
                                               (HIGHERORDERMATCHING::occurs-1-1 
                                                n 
                                                (svref pV11 1)) 
                                               (HIGHERORDERMATCHING::occurs-1-1 
                                                n 
                                                (svref pV11 2))) 
                                              t 
                                              (exists--local-0 (cdr l))))))) 
                               (error "Nonexhaustive match failure in occurs")))) 
                            (exists--local-0 pV46)))) 
                       (if (eq (car term) :|Seq|) 
                           (return 
                            (LIST-SPEC::exists-1-1 
                             (HIGHERORDERMATCHING::occurs n) 
                             (car (cdr term)))) 
                           (if (eq (car term) :|IfThenElse|) 
                               (let ((pV23 (cdr term))) 
                                 (return 
                                  (cl:or 
                                   (HIGHERORDERMATCHING::occurs-1-1 
                                    n 
                                    (svref pV23 0)) 
                                   (cl:or 
                                    (HIGHERORDERMATCHING::occurs-1-1 
                                     n 
                                     (svref pV23 1)) 
                                    (HIGHERORDERMATCHING::occurs-1-1 
                                     n 
                                     (svref pV23 2)))))) 
                               (if (eq (car term) :|Bind|) 
                                   (return 
                                    (HIGHERORDERMATCHING::occurs-1-1 
                                     n 
                                     (svref (cdr term) 2))) 
                                   (if (eq (car term) :|Let|) 
                                       (let ((pV21 (cdr term))) 
                                         (return 
                                          (cl:or 
                                           (HIGHERORDERMATCHING::occurs-1-1 
                                            n 
                                            (svref pV21 1)) 
                                           (LIST-SPEC::exists-1-1 
                                            (HIGHERORDERMATCHING::occursP n) 
                                            (svref pV21 0))))) 
                                       (if (eq (car term) :|LetRec|) 
                                           (let ((pV20 (cdr term))) 
                                             (return 
                                              (cl:or 
                                               (HIGHERORDERMATCHING::occurs-1-1 
                                                n 
                                                (svref pV20 1)) 
                                               (LIST-SPEC::exists-1-1 
                                                (HIGHERORDERMATCHING::occursP n) 
                                                (svref pV20 0))))))))))))))) 
   (error "Nonexhaustive match failure in occurs")))

(defun HIGHERORDERMATCHING::occursProper-1-1 (n |!M|) 
  (let ((pV2 (HIGHERORDERMATCHING::isFlexVar? |!M|))) 
    (block 
     nil 
     (if (eq (car pV2) :|Some|) 
         (return nil) 
         (if (eq (car pV2) :|None|) 
             (return (HIGHERORDERMATCHING::occurs-1-1 n |!M|)))) 
     (error "Nonexhaustive match failure in occursProper"))))

(defun HIGHERORDERMATCHING::projectTerm-4 (fields label srt |!N|) 
  (cons 
   :|Apply| 
   (vector 
    (cons 
     :|Fun| 
     (vector 
      (cons :|Project| label) 
      (cons 
       :|Arrow| 
       (vector 
        (cons :|Product| (cons fields POSITION-SPEC::noPos)) 
        srt 
        POSITION-SPEC::noPos)) 
      POSITION-SPEC::noPos)) 
    |!N| 
    POSITION-SPEC::noPos)))

(defun HIGHERORDERMATCHING::projections-5 (context |!subst| pV1 vars srt) 
  (declare (ignore pV1)) 
  (labels 
    ((projectSort (srt1 |!N|) 
      (LIST-SPEC::@-2 
       (let ((pV2 (HIGHERORDERMATCHING::unifySorts-4 context |!subst| srt1 srt))) 
         (block 
          nil 
          (if (eq (car pV2) :|None|) 
              (return nil) 
              (if (eq (car pV2) :|Some|) 
                  (return (cons (cons (cdr pV2) |!N|) nil)))) 
          (error "Nonexhaustive match failure in projections"))) 
       (let ((pV24 (HIGHERORDERMATCHING::dereferenceSort-2 |!subst| srt1))) 
         (block 
          nil 
          (if (eq (car pV24) :|Product|) 
              (let ((pV30 (car (cdr pV24)))) 
                (return 
                 (LIST-SPEC::flatten 
                  (labels 
                    ((map--local-0 (l) 
                      (block 
                       nil 
                       (if (null l) 
                           (return nil) 
                           (if (consp l) 
                               (let ((pV7 (car l))) 
                                 (return 
                                  (cons 
                                   (let ((s (cdr pV7))) 
                                     (projectSort 
                                      s 
                                      (HIGHERORDERMATCHING::projectTerm-4 
                                       pV30 
                                       (car pV7) 
                                       s 
                                       |!N|))) 
                                   (map--local-0 (cdr l))))))) 
                       (error "Nonexhaustive match failure in projections")))) 
                    (map--local-0 pV30))))) 
              (if (eq (car pV24) :|Arrow|) 
                  (let ((pV25 (cdr pV24))) 
                    (let ((pV27 (svref pV25 0))) 
                      (return 
                       (let ((|!X| 
                              (HIGHERORDERMATCHING::freshVar-2 
                               context 
                               (labels 
                                 ((foldr--local-0 (base l) 
                                   (block 
                                    nil 
                                    (if (null l) 
                                        (return base) 
                                        (if (consp l) 
                                            (return 
                                             (MS::mkArrow-2 
                                              (car l) 
                                              (foldr--local-0 base (cdr l)))))) 
                                    (error 
                                     "Nonexhaustive match failure in projections")))) 
                                 (foldr--local-0 
                                  pV27 
                                  (labels 
                                    ((map--local-0 (l) 
                                      (block 
                                       nil 
                                       (if (null l) 
                                           (return nil) 
                                           (if (consp l) 
                                               (return 
                                                (cons 
                                                 (cdr (car l)) 
                                                 (map--local-0 (cdr l)))))) 
                                       (error 
                                        "Nonexhaustive match failure in projections")))) 
                                    (map--local-0 vars))))))) 
                         (projectSort 
                          (svref pV25 1) 
                          (cons 
                           :|Apply| 
                           (vector 
                            |!N| 
                            (labels 
                              ((foldl--local-0 (base l) 
                                (block 
                                 nil 
                                 (if (null l) 
                                     (return base) 
                                     (if (consp l) 
                                         (return 
                                          (foldl--local-0 
                                           (cons 
                                            :|Apply| 
                                            (vector 
                                             base 
                                             (cons 
                                              :|Var| 
                                              (cons (car l) POSITION-SPEC::noPos)) 
                                             POSITION-SPEC::noPos)) 
                                           (cdr l))))) 
                                 (error 
                                  "Nonexhaustive match failure in projections")))) 
                              (foldl--local-0 |!X| vars)) 
                            POSITION-SPEC::noPos))))))))) 
          (return nil)))))) 
    (let ((terms 
           (LIST-SPEC::flatten 
            (labels 
              ((map--local-0 (l) 
                (block 
                 nil 
                 (if (null l) 
                     (return nil) 
                     (if (consp l) 
                         (let ((pV34 (car l))) 
                           (return 
                            (cons 
                             (let ((s (cdr pV34))) 
                               (projectSort 
                                s 
                                (cons 
                                 :|Var| 
                                 (cons (cons (car pV34) s) POSITION-SPEC::noPos)))) 
                             (map--local-0 (cdr l))))))) 
                 (error "Nonexhaustive match failure in projections")))) 
              (map--local-0 vars))))) 
      (labels 
        ((map--local-0 (l) 
          (block 
           nil 
           (if (null l) 
               (return nil) 
               (if (consp l) 
                   (let ((pV42 (car l))) 
                     (return 
                      (cons 
                       (let ((|!M| (cdr pV42))) 
                         (cons 
                          (car pV42) 
                          (labels 
                            ((foldr--local-0 (base l1) 
                              (block 
                               nil 
                               (if (null l1) 
                                   (return base) 
                                   (if (consp l1) 
                                       (return 
                                        (let ((|!M| 
                                               (foldr--local-0 base (cdr l1)))) 
                                          (HIGHERORDERMATCHING::bindPattern-2 
                                           (cons 
                                            :|VarPat| 
                                            (cons (car l1) POSITION-SPEC::noPos)) 
                                           |!M|))))) 
                               (error 
                                "Nonexhaustive match failure in projections")))) 
                            (foldr--local-0 |!M| vars)))) 
                       (map--local-0 (cdr l))))))) 
           (error "Nonexhaustive match failure in projections")))) 
        (map--local-0 terms)))))

(defun SIMPLIFY::makeSubstFromRecord-2 (pats acts) 
  (labels 
    ((foldl--local-0 (base l) 
      (block 
       nil 
       (if (null l) 
           (return base) 
           (if (consp l) 
               (let ((pV11 (car l))) 
                 (return 
                  (foldl--local-0 
                   (block 
                    nil 
                    (let ((pV5 (cdr pV11))) 
                      (if (eq (car pV5) :|VarPat|) 
                          (return 
                           (cons 
                            (cons 
                             (car (cdr pV5)) 
                             (MS::findField-2 (car pV11) acts)) 
                            base)))) 
                    (error "Nonexhaustive match failure in makeSubstFromRecord")) 
                   (cdr l)))))) 
       (error "Nonexhaustive match failure in makeSubstFromRecord")))) 
    (foldl--local-0 nil pats)))

(defun SIMPLIFY::simplifyCase-1-1 (spc term) 
  (block 
   nil 
   (if (eq (car term) :|Apply|) 
       (let ((pV28 (cdr term))) 
         (let ((pV29 (svref pV28 0))
               (pV30 (svref pV28 1))) 
           (if (eq (car pV29) :|Lambda|) 
               (let ((pV33 (car (cdr pV29)))) 
                 (if (consp pV33) 
                     (let ((pV36 (car pV33))) 
                       (let ((pV38 (svref pV36 0))) 
                         (if (eq (car pV38) :|RecordPat|) 
                             (let ((pV42 (car (cdr pV38)))) 
                               (if (null (cdr pV33)) 
                                   (if (eq (car pV30) :|Record|) 
                                       (let ((pV45 (car (cdr pV30)))) 
                                         (return 
                                          (if (cl:and 
                                               (labels 
                                                 ((all--local-0 (l) 
                                                   (block 
                                                    nil 
                                                    (if (null l) 
                                                        (return t) 
                                                        (if (consp l) 
                                                            (return 
                                                             (if (block 
                                                                  nil 
                                                                  (if (eq 
                                                                       (car 
                                                                        (cdr 
                                                                         (car l))) 
                                                                       :|VarPat|) 
                                                                      (return t)) 
                                                                  (return nil)) 
                                                                 (all--local-0 
                                                                  (cdr l)) 
                                                                 nil)))) 
                                                    (error 
                                                     "Nonexhaustive match failure in simplifyCase")))) 
                                                 (all--local-0 pV42)) 
                                               (labels 
                                                 ((all--local-0 (l) 
                                                   (block 
                                                    nil 
                                                    (if (null l) 
                                                        (return t) 
                                                        (if (consp l) 
                                                            (return 
                                                             (if (block 
                                                                  nil 
                                                                  (if (eq 
                                                                       (car 
                                                                        (cdr 
                                                                         (car l))) 
                                                                       :|Var|) 
                                                                      (return t)) 
                                                                  (return nil)) 
                                                                 (all--local-0 
                                                                  (cdr l)) 
                                                                 nil)))) 
                                                    (error 
                                                     "Nonexhaustive match failure in simplifyCase")))) 
                                                 (all--local-0 pV45))) 
                                              (cons 
                                               :|Some| 
                                               (UTILITIES::substitute-2 
                                                (svref pV36 2) 
                                                (SIMPLIFY::makeSubstFromRecord-2 
                                                 pV42 
                                                 pV45))) 
                                              '(:|None|)))))))))))))))) 
   (return '(:|None|))))

(defun SIMPLIFY::simplifyOne-1-1 (spc term) 
  (block 
   nil 
   (if (eq (car term) :|Let|) 
       (let ((pV34 (cdr term))) 
         (let ((pV76 (svref pV34 0))
               (pV77 (svref pV34 1))) 
           (if (consp pV76) 
               (let ((pV80 (car pV76))
                     (pV81 (cdr pV76))) 
                 (progn (if (consp pV81) 
                            (return 
                             (SIMPLIFY::simplifyOne-1-1 
                              spc 
                              (MS::mkLet-2 
                               (cons pV80 nil) 
                               (SIMPLIFY::simplifyOne-1-1 
                                spc 
                                (MS::mkLet-2 
                                 (LIST-SPEC::cons-2 (car pV81) (cdr pV81)) 
                                 pV77)))))) 
                        (let ((pV82 (car pV80))
                              (pV83 (cdr pV80))) 
                          (if (eq (car pV82) :|VarPat|) 
                              (let ((pV85 (car (cdr pV82)))) 
                                (progn (if (eq (car pV83) :|Var|) 
                                           (if (null pV81) 
                                               (return 
                                                (UTILITIES::substitute-2 
                                                 pV77 
                                                 (cons (cons pV85 pV83) nil))))) 
                                       (if (eq (car pV83) :|Apply|) 
                                           (let ((pV87 (cdr pV83))) 
                                             (let ((pV88 (svref pV87 0))) 
                                               (if (eq (car pV88) :|Fun|) 
                                                   (if (eq 
                                                        (car 
                                                         (svref (cdr pV88) 0)) 
                                                        :|Restrict|) 
                                                       (if (eq 
                                                            (car (svref pV87 1)) 
                                                            :|Var|) 
                                                           (if (null pV81) 
                                                               (return 
                                                                (UTILITIES::substitute-2 
                                                                 pV77 
                                                                 (cons 
                                                                  (cons 
                                                                   pV85 
                                                                   pV83) 
                                                                  nil))))))))))))))))))) 
       (if (eq (car term) :|Apply|) 
           (let ((pV33 (cdr term))) 
             (let ((pV35 (svref pV33 0))
                   (pV36 (svref pV33 1))) 
               (if (eq (car pV35) :|Lambda|) 
                   (let ((pV59 (car (cdr pV35)))) 
                     (if (consp pV59) 
                         (let ((pV62 (car pV59))
                               (pV63 (cdr pV59))) 
                           (let ((pV64 (svref pV62 0))
                                 (pV66 (svref pV62 2))) 
                             (if (eq (car pV64) :|VarPat|) 
                                 (if (null pV63) 
                                     (if (eq (car pV36) :|Var|) 
                                         (return 
                                          (UTILITIES::substitute-2 
                                           pV66 
                                           (cons 
                                            (cons (car (cdr pV64)) pV36) 
                                            nil))))) 
                                 (if (eq (car pV64) :|WildPat|) 
                                     (if (null pV63) 
                                         (return 
                                          (if (SIMPLIFY::sideEffectFree pV36) 
                                              pV66 
                                              term))))))))) 
                   (if (eq (car pV35) :|IfThenElse|) 
                       (let ((pV41 (cdr pV35))) 
                         (return 
                          (if (SIMPLIFY::simpleTerm? pV36) 
                              (cons 
                               :|IfThenElse| 
                               (vector 
                                (svref pV41 0) 
                                (SIMPLIFY::simplifiedApply-3 
                                 (svref pV41 1) 
                                 pV36 
                                 spc) 
                                (SIMPLIFY::simplifiedApply-3 
                                 (svref pV41 2) 
                                 pV36 
                                 spc) 
                                (svref pV41 3))) 
                              term))) 
                       (if (eq (car pV35) :|Let|) 
                           (let ((pV40 (cdr pV35))) 
                             (return 
                              (if (SIMPLIFY::simpleTerm? pV36) 
                                  (cons 
                                   :|Let| 
                                   (vector 
                                    (svref pV40 0) 
                                    (SIMPLIFY::simplifiedApply-3 
                                     (svref pV40 1) 
                                     pV36 
                                     spc) 
                                    (svref pV40 2))) 
                                  term))) 
                           (if (eq (car pV35) :|LetRec|) 
                               (let ((pV39 (cdr pV35))) 
                                 (return 
                                  (if (SIMPLIFY::simpleTerm? pV36) 
                                      (cons 
                                       :|LetRec| 
                                       (vector 
                                        (svref pV39 0) 
                                        (SIMPLIFY::simplifiedApply-3 
                                         (svref pV39 1) 
                                         pV36 
                                         spc) 
                                        (svref pV39 2))) 
                                      term))) 
                               (if (eq (car pV35) :|Apply|) 
                                   (let ((pV38 (cdr pV35))) 
                                     (let ((pV43 (svref pV38 0))) 
                                       (if (eq (car pV43) :|Lambda|) 
                                           (let ((pV46 (cdr pV43))) 
                                             (let ((pV47 (car pV46))) 
                                               (return 
                                                (if (SIMPLIFY::simpleTerm? pV36) 
                                                    (cons 
                                                     :|Apply| 
                                                     (vector 
                                                      (cons 
                                                       :|Lambda| 
                                                       (cons 
                                                        (labels 
                                                          ((map--local-0 (l) 
                                                            (block 
                                                             nil 
                                                             (if (null l) 
                                                                 (return nil) 
                                                                 (if (consp l) 
                                                                     (let ((pV27 
                                                                            (car 
                                                                             l))) 
                                                                       (return 
                                                                        (cons 
                                                                         (vector 
                                                                          (svref 
                                                                           pV27 
                                                                           0) 
                                                                          (svref 
                                                                           pV27 
                                                                           1) 
                                                                          (SIMPLIFY::simplifiedApply-3 
                                                                           (svref 
                                                                            pV27 
                                                                            2) 
                                                                           pV36 
                                                                           spc)) 
                                                                         (map--local-0 
                                                                          (cdr l))))))) 
                                                             (error 
                                                              "Nonexhaustive match failure in simplifyOne")))) 
                                                          (map--local-0 pV47)) 
                                                        (cdr pV46))) 
                                                      (svref pV38 1) 
                                                      (svref pV38 2))) 
                                                    term)))))))))))))))) 
   (return 
    (let ((pV30 (SIMPLIFY::simplifyCase-1-1 spc term))) 
      (block 
       nil 
       (if (eq (car pV30) :|Some|) 
           (return (cdr pV30)) 
           (if (eq (car pV30) :|None|) 
               (return (SIMPLIFY::tupleInstantiate-1-1 spc term)))) 
       (error "Nonexhaustive match failure in simplifyOne"))))))

(defun MS::mkProduct (sorts) 
  (block 
   nil 
   (if (consp sorts) (if (null (cdr sorts)) (return (car sorts)))) 
   (return 
    (labels 
      ((|!loop| (n sorts1) 
        (block 
         nil 
         (if (null sorts1) 
             (return nil) 
             (if (consp sorts1) 
                 (return 
                  (LIST-SPEC::cons-2 
                   (cons (NAT-SPEC::toString n) (car sorts1)) 
                   (|!loop| (INTEGER-SPEC::+-2 n 1) (cdr sorts1)))))) 
         (error "Nonexhaustive match failure in mkProduct")))) 
      (cons :|Product| (cons (|!loop| 1 sorts) POSITION-SPEC::noPos))))))

(defparameter LAMBDALIFT::simulateClosures? nil)

(defun LAMBDALIFT::mkAny (srt) 
  (if LAMBDALIFT::simulateClosures? 
      (MS::mkBase-2 
       (cons :|Qualified| (cons "TranslationBuiltIn" "Any")) 
       (cons srt nil)) 
      srt))

(defun MS::mkTyVar (name) (cons :|TyVar| (cons name POSITION-SPEC::noPos)))

(defun LAMBDALIFT::fromAny-0 () 
  (let ((alpha (MS::mkTyVar "alpha"))) 
    (MS::mkOp-2 
     (cons :|Qualified| (cons "TranslationBuiltIn" "fromAny")) 
     (MS::mkArrow-2 (LAMBDALIFT::mkAny alpha) alpha))))

(defun LAMBDALIFT::getSpecEnv (env) (svref env 4))

(defun MS::tupleFields? (fields) 
  (INTEGER-SPEC::>-2 
   (labels 
     ((foldl--local-0 (base l) 
       (block 
        nil 
        (if (null l) 
            (return base) 
            (if (consp l) 
                (return 
                 (foldl--local-0 
                  (block 
                   nil 
                   (return 
                    (if (INTEGER-SPEC::<-2 base 0) 
                        base 
                        (if (string=  (car (car l)) (NAT-SPEC::toString base)) 
                            (INTEGER-SPEC::+-2 base 1) 
                            (INTEGER-SPEC::~ 1)))) 
                   (error "Nonexhaustive match failure in tupleFields?")) 
                  (cdr l))))) 
        (error "Nonexhaustive match failure in tupleFields?")))) 
     (foldl--local-0 1 fields)) 
   0))

(defun MS::patternToList (|!t|) 
  (block 
   nil 
   (if (eq (car |!t|) :|RecordPat|) 
       (let ((pV10 (car (cdr |!t|)))) 
         (return 
          (if (MS::tupleFields? pV10) 
              (labels 
                ((map--local-0 (l) 
                  (block 
                   nil 
                   (if (null l) 
                       (return nil) 
                       (if (consp l) 
                           (return (cons (cdr (car l)) (map--local-0 (cdr l)))))) 
                   (error "Nonexhaustive match failure in patternToList")))) 
                (map--local-0 pV10)) 
              (cons |!t| nil))))) 
   (return (cons |!t| nil))))

(defun SPECENVIRONMENT::termSortEnv-2 (sp term) 
  (block 
   nil 
   (if (eq (car term) :|Apply|) 
       (return 
        (let ((pV4 
               (SPECENVIRONMENT::stripSubsorts-2 
                sp 
                (SPECENVIRONMENT::termSortEnv-2 sp (svref (cdr term) 0))))) 
          (block 
           nil 
           (if (eq (car pV4) :|Arrow|) (return (svref (cdr pV4) 1))) 
           (return 
            (SYSTEM-SPEC::fail 
             (STRING-SPEC::^-2 
              "Cannot extract sort of application " 
              (SYSTEM-SPEC::toString term))))))) 
       (if (eq (car term) :|Bind|) 
           (return MS::boolSort) 
           (if (eq (car term) :|Record|) 
               (let ((pV65 (car (cdr term)))) 
                 (return 
                  (cons 
                   :|Product| 
                   (cons 
                    (labels 
                      ((map--local-0 (l) 
                        (block 
                         nil 
                         (if (null l) 
                             (return nil) 
                             (if (consp l) 
                                 (let ((pV13 (car l))) 
                                   (return 
                                    (cons 
                                     (cons 
                                      (car pV13) 
                                      (SPECENVIRONMENT::termSortEnv-2 
                                       sp 
                                       (cdr pV13))) 
                                     (map--local-0 (cdr l))))))) 
                         (error "Nonexhaustive match failure in termSortEnv")))) 
                      (map--local-0 pV65)) 
                    POSITION-SPEC::noPos)))) 
               (if (eq (car term) :|Let|) 
                   (return 
                    (SPECENVIRONMENT::termSortEnv-2 sp (svref (cdr term) 1))) 
                   (if (eq (car term) :|LetRec|) 
                       (return 
                        (SPECENVIRONMENT::termSortEnv-2 sp (svref (cdr term) 1))) 
                       (if (eq (car term) :|Var|) 
                           (return 
                            (SPECENVIRONMENT::unfoldToArrow-2 
                             sp 
                             (cdr (car (cdr term))))) 
                           (if (eq (car term) :|Fun|) 
                               (return 
                                (SPECENVIRONMENT::unfoldToArrow-2 
                                 sp 
                                 (svref (cdr term) 1))) 
                               (if (eq (car term) :|Lambda|) 
                                   (let ((pV44 (car (cdr term)))) 
                                     (if (consp pV44) 
                                         (let ((pV47 (car pV44))) 
                                           (return 
                                            (MS::mkArrow-2 
                                             (METASLANG::patternSort 
                                              (svref pV47 0)) 
                                             (SPECENVIRONMENT::termSortEnv-2 
                                              sp 
                                              (svref pV47 2))))) 
                                         (if (null pV44) 
                                             (return 
                                              (SYSTEM-SPEC::fail 
                                               "Ill formed lambda abstraction"))))) 
                                   (if (eq (car term) :|IfThenElse|) 
                                       (return 
                                        (SPECENVIRONMENT::termSortEnv-2 
                                         sp 
                                         (svref (cdr term) 1))) 
                                       (if (eq (car term) :|Seq|) 
                                           (return (MS::mkProduct nil)))))))))))) 
   (return (SYSTEM-SPEC::fail "Non-exhaustive match"))))

(defun LAMBDALIFT::abstractName-5 (env pV1 freeVars pattern body) 
  (declare (ignore pV1)) 
  (if (BOOLEAN-SPEC::~ LAMBDALIFT::simulateClosures?) 
      (let ((newPattern 
             (MS::mkTuplePat 
              (LIST-SPEC::++-2 
               (MS::patternToList pattern) 
               (labels 
                 ((map--local-0 (l) 
                   (block 
                    nil 
                    (if (null l) 
                        (return nil) 
                        (if (consp l) 
                            (return 
                             (cons (MS::mkVarPat (car l)) (map--local-0 (cdr l)))))) 
                    (error "Nonexhaustive match failure in abstractName")))) 
                 (map--local-0 freeVars)))))) 
        (vector 
         nil 
         '(:|Nonfix|) 
         (cons 
          nil 
          (MS::mkArrow-2 
           (METASLANG::patternSort newPattern) 
           (SPECENVIRONMENT::termSortEnv-2 (LAMBDALIFT::getSpecEnv env) body))) 
         (cons (cons nil (MS::mkLambda-2 newPattern body)) nil))) 
      (let ((varSort 
             (MS::mkProduct 
              (labels 
                ((map--local-0 (l) 
                  (block 
                   nil 
                   (if (null l) 
                       (return nil) 
                       (if (consp l) 
                           (return (cons (cdr (car l)) (map--local-0 (cdr l)))))) 
                   (error "Nonexhaustive match failure in abstractName")))) 
                (map--local-0 freeVars))))) 
        (let ((closureVar (cons "closure-var" (LAMBDALIFT::mkAny varSort)))) 
          (let ((closureArg 
                 (MS::mkApply-2 (LAMBDALIFT::fromAny-0) (MS::mkVar closureVar)))) 
            (let ((closureVarPat (MS::mkVarPat closureVar))) 
              (let ((newPattern 
                     (if (LIST-SPEC::|!null| freeVars) 
                         pattern 
                         (block 
                          nil 
                          (if (eq (car pattern) :|VarPat|) 
                              (return 
                               (cons 
                                :|RecordPat| 
                                (cons 
                                 (cons 
                                  (cons "1" pattern) 
                                  (cons (cons "2" closureVarPat) nil)) 
                                 POSITION-SPEC::noPos))) 
                              (if (eq (car pattern) :|RecordPat|) 
                                  (let ((pV16 (car (cdr pattern)))) 
                                    (return 
                                     (cons 
                                      :|RecordPat| 
                                      (cons 
                                       (LIST-SPEC::++-2 
                                        pV16 
                                        (cons 
                                         (cons 
                                          (NAT-SPEC::toString 
                                           (INTEGER-SPEC::+-2 
                                            1 
                                            (LIST-SPEC::|!length| pV16))) 
                                          closureVarPat) 
                                         nil)) 
                                       POSITION-SPEC::noPos)))))) 
                          (error "Nonexhaustive match failure in abstractName"))))) 
                (labels 
                  ((mkProject (pV18 pV19) 
                    (block 
                     nil 
                     (let ((pV21 (cdr pV18))) 
                       (return 
                        (cons 
                         (MS::mkVarPat-2 (car pV18) pV21) 
                         (MS::mkApply-2 
                          (cons 
                           :|Fun| 
                           (vector 
                            (cons :|Project| (NAT-SPEC::toString pV19)) 
                            (MS::mkArrow-2 varSort pV21) 
                            POSITION-SPEC::noPos)) 
                          closureArg)))) 
                     (error "Nonexhaustive match failure in abstractName")))) 
                  (let ((newBody 
                         (block 
                          nil 
                          (if (null freeVars) 
                              (return body) 
                              (if (consp freeVars) 
                                  (if (null (cdr freeVars)) 
                                      (return 
                                       (MS::mkLet-2 
                                        (cons 
                                         (cons 
                                          (MS::mkVarPat (car freeVars)) 
                                          closureArg) 
                                         nil) 
                                        body))))) 
                          (return 
                           (let ((pV31 
                                  (labels 
                                    ((foldl--local-0 (base l) 
                                      (block 
                                       nil 
                                       (if (null l) 
                                           (return base) 
                                           (if (consp l) 
                                               (return 
                                                (foldl--local-0 
                                                 (block 
                                                  nil 
                                                  (let ((pV26 (cdr base))) 
                                                    (return 
                                                     (cons 
                                                      (LIST-SPEC::cons-2 
                                                       (mkProject (car l) pV26) 
                                                       (car base)) 
                                                      (INTEGER-SPEC::+-2 pV26 1)))) 
                                                  (error 
                                                   "Nonexhaustive match failure in abstractName")) 
                                                 (cdr l))))) 
                                       (error 
                                        "Nonexhaustive match failure in abstractName")))) 
                                    (foldl--local-0 (cons nil 1) freeVars)))) 
                             (block 
                              nil 
                              (return (MS::mkLet-2 (car pV31) body)) 
                              (error 
                               "Nonexhaustive match failure in abstractName"))))))) 
                    (vector 
                     nil 
                     '(:|Nonfix|) 
                     (cons 
                      nil 
                      (MS::mkArrow-2 
                       (METASLANG::patternSort newPattern) 
                       (SPECENVIRONMENT::termSortEnv-2 
                        (LAMBDALIFT::getSpecEnv env) 
                        body))) 
                     (cons (cons nil (MS::mkLambda-2 newPattern newBody)) nil)))))))))))


(defun LAMBDALIFT::addNewOp-5 (pV1 pV2 pV3 pV4 pV5) 
  (block 
   nil 
   (if (eq (car pV1) :|Qualified|) 
       (let ((pV6 (cdr pV1))) 
         (return 
          (ANNSPEC::addLocalOpName-2 
           (ANNSPEC::setOps-2 
            pV5 
            (ANNSPEC::insertAQualifierMap-4 
             (svref pV5 1) 
             (car pV6) 
             (cdr pV6) 
             (vector (cons pV1 nil) pV2 pV3 pV4))) 
           pV1)))) 
   (error "Nonexhaustive match failure in addNewOp")))

(defun LAMBDALIFT::actualFreeVars-2 (pV4 pV5) 
  (block 
   nil 
   (let ((pV8 (svref pV4 2))) 
     (return 
      (labels 
        ((lookup (v) 
          (let ((pV2 (MAP-SPEC::apply-2 pV8 (car v)))) 
            (block 
             nil 
             (if (eq (car pV2) :|None|) 
                 (return (cons v nil)) 
                 (if (eq (car pV2) :|Some|) (return (svref (cdr pV2) 2)))) 
             (error "Nonexhaustive match failure in actualFreeVars"))))) 
        (LISTUTILITIES::removeDuplicates 
         (LIST-SPEC::flatten (LIST-SPEC::map-1-1 #'lookup pV5)))))) 
   (error "Nonexhaustive match failure in actualFreeVars")))

(defun LAMBDALIFT::makeClosureOp-0 () 
  (let ((alpha (MS::mkTyVar "alpha"))) 
    (let ((beta (MS::mkTyVar "beta"))) 
      (let ((gamma (MS::mkTyVar "gamma"))) 
        (MS::mkOp-2 
         (cons :|Qualified| (cons "TranslationBuiltIn" "makeClosure")) 
         (MS::mkArrow-2 
          (MS::mkProduct 
           (cons 
            (MS::mkArrow-2 (MS::mkProduct (cons alpha (cons beta nil))) gamma) 
            (cons alpha nil))) 
          (MS::mkArrow-2 beta gamma)))))))

(defun LAMBDALIFT::makeUnitClosureOp-0 () 
  (let ((alpha (MS::mkTyVar "alpha"))) 
    (let ((beta (MS::mkTyVar "beta"))) 
      (MS::mkOp-2 
       (cons :|Qualified| (cons "TranslationBuiltIn" "makeUnitClosure")) 
       (MS::mkArrow-2 
        (MS::mkArrow-2 alpha beta) 
        (cons 
         :|Base| 
         (vector 
          (cons :|Qualified| (cons "TranslationBuiltIn" "Closure")) 
          (cons alpha (cons beta nil)) 
          POSITION-SPEC::noPos)))))))

(defun LAMBDALIFT::ensureClosure (term) 
  (if (BOOLEAN-SPEC::~ LAMBDALIFT::simulateClosures?) 
      term 
      (let ((closureOp (LAMBDALIFT::makeClosureOp-0))) 
        (let ((unitClosureOp (LAMBDALIFT::makeUnitClosureOp-0))) 
          (block 
           nil 
           (if (eq (car term) :|Apply|) 
               (let ((pV5 (svref (cdr term) 0))) 
                 (return 
                  (if (cl:or 
                       (slang-built-in::slang-term-equals-2 pV5 closureOp) 
                       (slang-built-in::slang-term-equals-2 pV5 unitClosureOp)) 
                      term 
                      (MS::mkApply-2 (LAMBDALIFT::makeUnitClosureOp-0) term))))) 
           (return (MS::mkApply-2 (LAMBDALIFT::makeUnitClosureOp-0) term)))))))

(defun LAMBDALIFT::insertOper-2 (pV1 pV2) 
  (block 
   nil 
   (return 
    (vector 
     (svref pV2 0) 
     (svref pV2 1) 
     (MAP-SPEC::update-3 (svref pV2 2) (svref pV1 3) pV1) 
     (svref pV2 3) 
     (svref pV2 4))) 
   (error "Nonexhaustive match failure in insertOper")))

(defun SPECENVIRONMENT::productSorts-2 (sp srt) 
  (let ((pV8 (SPECENVIRONMENT::stripSubsorts-2 sp srt))) 
    (block 
     nil 
     (if (eq (car pV8) :|Product|) 
         (let ((pV10 (car (cdr pV8)))) 
           (return 
            (if (MS::tupleFields? pV10) 
                (labels 
                  ((map--local-0 (l) 
                    (block 
                     nil 
                     (if (null l) 
                         (return nil) 
                         (if (consp l) 
                             (return (cons (cdr (car l)) (map--local-0 (cdr l)))))) 
                     (error "Nonexhaustive match failure in productSorts")))) 
                  (map--local-0 pV10)) 
                (cons srt nil))))) 
     (return (cons srt nil)))))

(defun LAMBDALIFT::makeClosureApplication-5 (env name freeVars dom rng) 
  (let ((|!qualname| (cons :|Qualified| (cons (svref env 3) name)))) 
    (block 
     nil 
     (if (null freeVars) 
         (return (MS::mkOp-2 |!qualname| (MS::mkArrow-2 dom rng))) 
         (if (consp freeVars) 
             (let ((pV13 (car freeVars))) 
               (let ((pV16 (cdr pV13))) 
                 (if (null (cdr freeVars)) 
                     (return 
                      (if (BOOLEAN-SPEC::~ LAMBDALIFT::simulateClosures?) 
                          (MS::mkOp-2 
                           |!qualname| 
                           (MS::mkArrow-2 
                            (MS::mkProduct (cons pV16 (cons dom nil))) 
                            rng)) 
                          (MS::mkApply-2 
                           (LAMBDALIFT::makeClosureOp-0) 
                           (MS::mkTuple 
                            (cons 
                             (MS::mkOp-2 
                              (cons :|Qualified| (cons (svref env 3) name)) 
                              (MS::mkArrow-2 
                               (MS::mkProduct (cons pV16 (cons dom nil))) 
                               rng)) 
                             (cons (MS::mkVar-2 (car pV13) pV16) nil))))))))))) 
     (return 
      (if (BOOLEAN-SPEC::~ LAMBDALIFT::simulateClosures?) 
          (MS::mkOp-2 
           |!qualname| 
           (MS::mkArrow-2 
            (MS::mkProduct 
             (LIST-SPEC::++-2 
              (SPECENVIRONMENT::productSorts-2 (LAMBDALIFT::getSpecEnv env) dom) 
              (labels 
                ((map--local-0 (l) 
                  (block 
                   nil 
                   (if (null l) 
                       (return nil) 
                       (if (consp l) 
                           (return (cons (cdr (car l)) (map--local-0 (cdr l)))))) 
                   (error 
                    "Nonexhaustive match failure in makeClosureApplication")))) 
                (map--local-0 freeVars)))) 
            rng)) 
          (let ((prod 
                 (MS::mkTuple 
                  (labels 
                    ((map--local-0 (l) 
                      (block 
                       nil 
                       (if (null l) 
                           (return nil) 
                           (if (consp l) 
                               (return 
                                (cons (MS::mkVar (car l)) (map--local-0 (cdr l)))))) 
                       (error 
                        "Nonexhaustive match failure in makeClosureApplication")))) 
                    (map--local-0 freeVars))))) 
            (let ((oper 
                   (MS::mkOp-2 
                    |!qualname| 
                    (MS::mkArrow-2 
                     (MS::mkProduct 
                      (cons 
                       (SPECENVIRONMENT::termSortEnv-2 
                        (LAMBDALIFT::getSpecEnv env) 
                        prod) 
                       (cons dom nil))) 
                     rng)))) 
              (MS::mkApply-2 
               (LAMBDALIFT::makeClosureOp-0) 
               (MS::mkTuple 
                (cons 
                 oper 
                 (cons (ARITYNORMALIZE::mkArityTuple-2 (svref env 4) prod) nil)))))))))))


(defun LAMBDALIFT::makeLiftInfo-6 (env id name pat body vars) 
  (vector 
   body 
   (LAMBDALIFT::makeClosureApplication-5 
    env 
    name 
    vars 
    (METASLANG::patternSort pat) 
    (SPECENVIRONMENT::termSortEnv-2 (LAMBDALIFT::getSpecEnv env) body)) 
   vars 
   id 
   name 
   pat))

(defun LAMBDALIFT::makeNewVars (srts) 
  (labels 
    ((foldl--local-0 (base l) 
      (block 
       nil 
       (if (null l) 
           (return base) 
           (if (consp l) 
               (return 
                (foldl--local-0 
                 (LIST-SPEC::cons-2 
                  (cons 
                   (STRING-SPEC::^-2 
                    "llp-" 
                    (NAT-SPEC::toString (LIST-SPEC::|!length| base))) 
                   (car l)) 
                  base) 
                 (cdr l))))) 
       (error "Nonexhaustive match failure in makeNewVars")))) 
    (foldl--local-0 nil srts)))

(defun LAMBDALIFT::mkVarTermTuple (vts) 
  (block 
   nil 
   (if (consp vts) (if (null (cdr vts)) (return (car vts)))) 
   (return (cons (cons :|Record| (MS::tagTuple vts)) nil))))

(defun LAMBDALIFT::removeBound-2 (variableList boundVars) 
  (block 
   nil 
   (if (null boundVars) 
       (return variableList) 
       (if (consp boundVars) 
           (let ((pV12 (cdr boundVars))) 
             (let ((pV13 (car (car boundVars)))) 
               (return 
                (labels 
                  ((removeOne (vars) 
                    (block 
                     nil 
                     (if (null vars) 
                         (return nil) 
                         (if (consp vars) 
                             (let ((pV6 (cdr vars))
                                   (pV5 (car vars))) 
                               (return 
                                (if (string=  (car pV5) pV13) 
                                    (removeOne pV6) 
                                    (cons pV5 (removeOne pV6))))))) 
                     (error "Nonexhaustive match failure in removeBound")))) 
                  (LAMBDALIFT::removeBound-2 (removeOne variableList) pV12))))))) 
   (error "Nonexhaustive match failure in removeBound")))

(defun LAMBDALIFT::toAny (|!t|) 
  (if (BOOLEAN-SPEC::~ LAMBDALIFT::simulateClosures?) 
      |!t| 
      (let ((alpha (MS::mkTyVar "alpha"))) 
        (MS::mkApply-2 
         (MS::mkOp-2 
          (cons :|Qualified| (cons "TranslationBuiltIn" "toAny")) 
          (MS::mkArrow-2 alpha (LAMBDALIFT::mkAny alpha))) 
         |!t|))))

(defun MS::termToList (|!t|) 
  (block 
   nil 
   (if (eq (car |!t|) :|Record|) 
       (let ((pV10 (car (cdr |!t|)))) 
         (return 
          (if (MS::tupleFields? pV10) 
              (labels 
                ((map--local-0 (l) 
                  (block 
                   nil 
                   (if (null l) 
                       (return nil) 
                       (if (consp l) 
                           (return (cons (cdr (car l)) (map--local-0 (cdr l)))))) 
                   (error "Nonexhaustive match failure in termToList")))) 
                (map--local-0 pV10)) 
              (cons |!t| nil))))) 
   (return (cons |!t| nil))))

(defun LAMBDALIFT::lambdaLiftTerm-2 (pV274 pV275) 
  (block 
   nil 
   (let ((pV277 (cdr pV275))
         (pV276 (car pV275))) 
     (return 
      (block 
       nil 
       (if (eq (car pV276) :|Let|) 
           (let ((pV228 (cdr pV276))) 
             (let ((pV273 (cdr pV228))
                   (pV272 (car pV228))) 
               (return 
                (let ((|!opName| (svref pV274 1))) 
                  (labels 
                    ((liftDecl (pV47 pV48) 
                      (block 
                       nil 
                       (let ((pV50 (cdr pV47))
                             (pV49 (car pV47))) 
                         (let ((pV51 (car pV50))) 
                           (let ((pV55 (svref pV48 2))
                                 (pV54 (svref pV48 1))
                                 (pV53 (svref pV48 0))) 
                             (return 
                              (block 
                               nil 
                               (if (eq (car pV49) :|VarPat|) 
                                   (let ((pV38 (car (car (cdr pV49))))) 
                                     (if (eq (car pV51) :|Lambda|) 
                                         (let ((pV40 (cdr pV51))) 
                                           (if (consp pV40) 
                                               (let ((pV42 (car pV40))) 
                                                 (if (null (cdr pV40)) 
                                                     (return 
                                                      (let ((pV26 
                                                             (LAMBDALIFT::lambdaLiftTerm-2 
                                                              pV54 
                                                              (svref pV42 2)))) 
                                                        (block 
                                                         nil 
                                                         (return 
                                                          (let ((oper 
                                                                 (LAMBDALIFT::makeLiftInfo-6 
                                                                  pV54 
                                                                  pV38 
                                                                  (STRING-SPEC::^-2 
                                                                   (STRING-SPEC::^-2 
                                                                    |!opName| 
                                                                    "_") 
                                                                   pV38) 
                                                                  (svref pV42 0) 
                                                                  (cdr pV26) 
                                                                  (LAMBDALIFT::actualFreeVars-2 
                                                                   pV54 
                                                                   (cdr pV50))))) 
                                                            (let ((env0 
                                                                   (LAMBDALIFT::insertOper-2 
                                                                    oper 
                                                                    pV54))) 
                                                              (vector 
                                                               (LIST-SPEC::cons-2 
                                                                oper 
                                                                (LIST-SPEC::++-2 
                                                                 pV53 
                                                                 (car pV26))) 
                                                               env0 
                                                               pV55)))) 
                                                         (error 
                                                          "Nonexhaustive match failure in lambdaLiftTerm"))))))))))) 
                               (return 
                                (let ((pV30 
                                       (LAMBDALIFT::lambdaLiftTerm-2 pV54 pV50))) 
                                  (block 
                                   nil 
                                   (return 
                                    (vector 
                                     (LIST-SPEC::++-2 pV53 (car pV30)) 
                                     pV54 
                                     (LIST-SPEC::cons-2 
                                      (cons pV49 (cdr pV30)) 
                                      pV55))) 
                                   (error 
                                    "Nonexhaustive match failure in lambdaLiftTerm"))))))))) 
                       (error "Nonexhaustive match failure in lambdaLiftTerm")))) 
                    (let ((pV61 
                           (LIST-SPEC::foldr-1-1-1 
                            #'(lambda (pV) (liftDecl (car pV) (cdr pV))) 
                            (vector nil pV274 nil) 
                            pV272))) 
                      (block 
                       nil 
                       (let ((pV64 (svref pV61 2))) 
                         (return 
                          (let ((pV58 
                                 (LAMBDALIFT::lambdaLiftTerm-2 
                                  (svref pV61 1) 
                                  pV273))) 
                            (block 
                             nil 
                             (let ((pV60 (cdr pV58))) 
                               (return 
                                (cons 
                                 (LIST-SPEC::++-2 (svref pV61 0) (car pV58)) 
                                 (block 
                                  nil 
                                  (if (null pV64) (return pV60)) 
                                  (return 
                                   (cons 
                                    :|Let| 
                                    (vector pV64 pV60 POSITION-SPEC::noPos))))))) 
                             (error 
                              "Nonexhaustive match failure in lambdaLiftTerm"))))) 
                       (error "Nonexhaustive match failure in lambdaLiftTerm")))))))) 
           (if (eq (car pV276) :|LetRec|) 
               (let ((pV227 (cdr pV276))) 
                 (let ((pV271 (cdr pV227))
                       (pV270 (car pV227))) 
                   (return 
                    (let ((|!opName| (svref pV274 1))) 
                      (let ((pV124 
                             (labels 
                               ((foldr--local-0 (base l) 
                                 (block 
                                  nil 
                                  (if (null l) 
                                      (return base) 
                                      (if (consp l) 
                                          (let ((pV76 (car l))) 
                                            (return 
                                             (let ((pV67 
                                                    (foldr--local-0 base (cdr l)))) 
                                               (block 
                                                nil 
                                                (let ((pV73 (cdr pV67))) 
                                                  (return 
                                                   (cons 
                                                    (LIST-SPEC::++-2 
                                                     (cdr (cdr pV76)) 
                                                     pV73) 
                                                    (LIST-SPEC::cons-2 
                                                     (car pV76) 
                                                     pV73)))) 
                                                (error 
                                                 "Nonexhaustive match failure in lambdaLiftTerm"))))))) 
                                  (error 
                                   "Nonexhaustive match failure in lambdaLiftTerm")))) 
                               (foldr--local-0 (cons nil nil) pV270)))) 
                        (block 
                         nil 
                         (let ((pV125 (car pV124))) 
                           (return 
                            (let ((vars 
                                   (LAMBDALIFT::removeBound-2 pV125 (cdr pV124)))) 
                              (progn (LISTUTILITIES::removeDuplicates pV125) 
                                     (let ((vars 
                                            (LAMBDALIFT::actualFreeVars-2 
                                             pV274 
                                             vars))) 
                                       (let ((tmpOpers 
                                              (labels 
                                                ((map--local-0 (l) 
                                                  (block 
                                                   nil 
                                                   (if (null l) 
                                                       (return nil) 
                                                       (if (consp l) 
                                                           (let ((pV97 (car l))) 
                                                             (return 
                                                              (cons 
                                                               (block 
                                                                nil 
                                                                (let ((pV84 
                                                                       (car 
                                                                        (car 
                                                                         pV97)))) 
                                                                  (let ((pV86 
                                                                         (car 
                                                                          (cdr 
                                                                           pV97)))) 
                                                                    (if (eq 
                                                                         (car 
                                                                          pV86) 
                                                                         :|Lambda|) 
                                                                        (let ((pV88 
                                                                               (cdr 
                                                                                pV86))) 
                                                                          (if (consp 
                                                                               pV88) 
                                                                              (let ((pV90 
                                                                                     (car 
                                                                                      pV88))) 
                                                                                (if (null 
                                                                                     (cdr 
                                                                                      pV88)) 
                                                                                    (return 
                                                                                     (cons 
                                                                                      (svref 
                                                                                       pV90 
                                                                                       2) 
                                                                                      (LAMBDALIFT::makeLiftInfo-6 
                                                                                       pV274 
                                                                                       pV84 
                                                                                       (STRING-SPEC::^-2 
                                                                                        (STRING-SPEC::^-2 
                                                                                         |!opName| 
                                                                                         "_") 
                                                                                        pV84) 
                                                                                       (svref 
                                                                                        pV90 
                                                                                        0) 
                                                                                       (MS::mkTrue-0) 
                                                                                       vars)))))))))) 
                                                                (return 
                                                                 (SYSTEM-SPEC::fail 
                                                                  "liftDecl Non-lambda abstracted term"))) 
                                                               (map--local-0 
                                                                (cdr l))))))) 
                                                   (error 
                                                    "Nonexhaustive match failure in lambdaLiftTerm")))) 
                                                (map--local-0 pV270)))) 
                                         (let ((env1 
                                                (labels 
                                                  ((foldr--local-0 (base l) 
                                                    (block 
                                                     nil 
                                                     (if (null l) 
                                                         (return base) 
                                                         (if (consp l) 
                                                             (return 
                                                              (let ((pV101 
                                                                     (foldr--local-0 
                                                                      base 
                                                                      (cdr l)))) 
                                                                (block 
                                                                 nil 
                                                                 (return 
                                                                  (LAMBDALIFT::insertOper-2 
                                                                   (cdr (car l)) 
                                                                   pV101)) 
                                                                 (error 
                                                                  "Nonexhaustive match failure in lambdaLiftTerm")))))) 
                                                     (error 
                                                      "Nonexhaustive match failure in lambdaLiftTerm")))) 
                                                  (foldr--local-0 pV274 tmpOpers)))) 
                                           (labels 
                                             ((liftDecl (pV111 pV112) 
                                               (block 
                                                nil 
                                                (let ((pV114 (cdr pV111))) 
                                                  (return 
                                                   (let ((pV108 
                                                          (LAMBDALIFT::lambdaLiftTerm-2 
                                                           env1 
                                                           (car pV111)))) 
                                                     (block 
                                                      nil 
                                                      (return 
                                                       (LIST-SPEC::cons-2 
                                                        (LAMBDALIFT::makeLiftInfo-6 
                                                         pV274 
                                                         (svref pV114 3) 
                                                         (svref pV114 4) 
                                                         (svref pV114 5) 
                                                         (cdr pV108) 
                                                         (svref pV114 2)) 
                                                        (LIST-SPEC::++-2 
                                                         pV112 
                                                         (car pV108)))) 
                                                      (error 
                                                       "Nonexhaustive match failure in lambdaLiftTerm"))))) 
                                                (error 
                                                 "Nonexhaustive match failure in lambdaLiftTerm")))) 
                                             (let ((opers1 
                                                    (LIST-SPEC::foldr-1-1-1 
                                                     #'(lambda (pV) 
                                                        (liftDecl 
                                                         (car pV) 
                                                         (cdr pV))) 
                                                     nil 
                                                     tmpOpers))) 
                                               (let ((pV121 
                                                      (LAMBDALIFT::lambdaLiftTerm-2 
                                                       env1 
                                                       pV271))) 
                                                 (block 
                                                  nil 
                                                  (return 
                                                   (cons 
                                                    (LIST-SPEC::++-2 
                                                     opers1 
                                                     (car pV121)) 
                                                    (cdr pV121))) 
                                                  (error 
                                                   "Nonexhaustive match failure in lambdaLiftTerm")))))))))))) 
                         (error "Nonexhaustive match failure in lambdaLiftTerm"))))))) 
               (if (eq (car pV276) :|Var|) 
                   (let ((pV226 (cdr pV276))) 
                     (let ((pV268 (car pV226))) 
                       (return 
                        (let ((pV127 (MAP-SPEC::apply-2 (svref pV274 2) pV268))) 
                          (block 
                           nil 
                           (if (eq (car pV127) :|Some|) 
                               (return 
                                (cons 
                                 nil 
                                 (LAMBDALIFT::ensureClosure 
                                  (svref (cdr pV127) 1)))) 
                               (if (eq (car pV127) :|None|) 
                                   (return 
                                    (cons 
                                     nil 
                                     (cons 
                                      :|Var| 
                                      (cons 
                                       (cons pV268 (cdr pV226)) 
                                       POSITION-SPEC::noPos)))))) 
                           (error 
                            "Nonexhaustive match failure in lambdaLiftTerm")))))) 
                   (if (eq (car pV276) :|Fun|) 
                       (let ((pV225 (cdr pV276))) 
                         (let ((pV267 (cdr pV225))) 
                           (return 
                            (let ((term (MS::mkFun-2 (car pV225) pV267))) 
                              (cons 
                               nil 
                               (if (BOOLEAN-SPEC::~ 
                                    LAMBDALIFT::simulateClosures?) 
                                   term 
                                   (let ((pV132 
                                          (SPECENVIRONMENT::unfoldToArrow-2 
                                           (LAMBDALIFT::getSpecEnv pV274) 
                                           pV267))) 
                                     (block 
                                      nil 
                                      (if (eq (car pV132) :|Arrow|) 
                                          (return 
                                           (MS::mkApply-2 
                                            (LAMBDALIFT::makeUnitClosureOp-0) 
                                            term)) 
                                          (if (eq (car pV132) :|TyVar|) 
                                              (return 
                                               (MS::mkApply-2 
                                                (LAMBDALIFT::makeUnitClosureOp-0) 
                                                term)))) 
                                      (return term))))))))) 
                       (if (eq (car pV276) :|Lambda|) 
                           (let ((pV224 (cdr pV276))) 
                             (progn (if (consp pV224) 
                                        (let ((pV261 (car pV224))) 
                                          (if (null (cdr pV224)) 
                                              (return 
                                               (let ((pV136 
                                                      (LAMBDALIFT::lambdaLiftTerm-2 
                                                       pV274 
                                                       (svref pV261 2)))) 
                                                 (block 
                                                  nil 
                                                  (return 
                                                   (let ((num 
                                                          (STATE::|!!| 
                                                           (svref pV274 0)))) 
                                                     (progn (STATE::|:=-2| 
                                                             (svref pV274 0) 
                                                             (INTEGER-SPEC::+-2 
                                                              num 
                                                              1)) 
                                                            (let ((name 
                                                                   (STRING-SPEC::^-2 
                                                                    (STRING-SPEC::^-2 
                                                                     (svref 
                                                                      pV274 
                                                                      1) 
                                                                     "_internal_") 
                                                                    (NAT-SPEC::toString 
                                                                     num)))) 
                                                              (let ((liftInfo 
                                                                     (LAMBDALIFT::makeLiftInfo-6 
                                                                      pV274 
                                                                      (STRING-SPEC::^-2 
                                                                       name 
                                                                       "_closure") 
                                                                      name 
                                                                      (svref 
                                                                       pV261 
                                                                       0) 
                                                                      (cdr pV136) 
                                                                      (LAMBDALIFT::actualFreeVars-2 
                                                                       pV274 
                                                                       pV277)))) 
                                                                (let ((liftInfoClosure 
                                                                       (LAMBDALIFT::ensureClosure 
                                                                        (svref 
                                                                         liftInfo 
                                                                         1)))) 
                                                                  (cons 
                                                                   (LIST-SPEC::cons-2 
                                                                    liftInfo 
                                                                    (car pV136)) 
                                                                   liftInfoClosure))))))) 
                                                  (error 
                                                   "Nonexhaustive match failure in lambdaLiftTerm"))))))) 
                                    (if (consp pV224) 
                                        (return 
                                         (let ((newVs 
                                                (LAMBDALIFT::makeNewVars 
                                                 (SPECENVIRONMENT::productSorts-2 
                                                  (LAMBDALIFT::getSpecEnv pV274) 
                                                  (METASLANG::patternSort 
                                                   (svref (car pV224) 0)))))) 
                                           (LAMBDALIFT::lambdaLiftTerm-2 
                                            pV274 
                                            (cons 
                                             (cons 
                                              :|Lambda| 
                                              (cons 
                                               (vector 
                                                (MS::mkTuplePat 
                                                 (labels 
                                                   ((map--local-0 (l) 
                                                     (block 
                                                      nil 
                                                      (if (null l) 
                                                          (return nil) 
                                                          (if (consp l) 
                                                              (return 
                                                               (cons 
                                                                (MS::mkVarPat 
                                                                 (car l)) 
                                                                (map--local-0 
                                                                 (cdr l)))))) 
                                                      (error 
                                                       "Nonexhaustive match failure in lambdaLiftTerm")))) 
                                                   (map--local-0 newVs))) 
                                                (MS::mkTrue-0) 
                                                (cons 
                                                 (cons 
                                                  :|Apply| 
                                                  (cons 
                                                   (cons 
                                                    (cons :|Lambda| pV224) 
                                                    pV277) 
                                                   (LAMBDALIFT::mkVarTermTuple 
                                                    (labels 
                                                      ((map--local-0 (l) 
                                                        (block 
                                                         nil 
                                                         (if (null l) 
                                                             (return nil) 
                                                             (if (consp l) 
                                                                 (let ((pV146 
                                                                        (car l))) 
                                                                   (return 
                                                                    (cons 
                                                                     (cons 
                                                                      (cons 
                                                                       :|Var| 
                                                                       (cons 
                                                                        (car 
                                                                         pV146) 
                                                                        (cdr 
                                                                         pV146))) 
                                                                      nil) 
                                                                     (map--local-0 
                                                                      (cdr l))))))) 
                                                         (error 
                                                          "Nonexhaustive match failure in lambdaLiftTerm")))) 
                                                      (map--local-0 newVs))))) 
                                                 pV277)) 
                                               nil)) 
                                             pV277))))))) 
                           (if (eq (car pV276) :|IfThenElse|) 
                               (let ((pV223 (cdr pV276))) 
                                 (return 
                                  (let ((pV154 
                                         (LAMBDALIFT::lambdaLiftTerm-2 
                                          pV274 
                                          (svref pV223 0)))) 
                                    (block 
                                     nil 
                                     (return 
                                      (let ((pV151 
                                             (LAMBDALIFT::lambdaLiftTerm-2 
                                              pV274 
                                              (svref pV223 1)))) 
                                        (block 
                                         nil 
                                         (return 
                                          (let ((pV148 
                                                 (LAMBDALIFT::lambdaLiftTerm-2 
                                                  pV274 
                                                  (svref pV223 2)))) 
                                            (block 
                                             nil 
                                             (return 
                                              (cons 
                                               (LIST-SPEC::++-2 
                                                (LIST-SPEC::++-2 
                                                 (car pV154) 
                                                 (car pV151)) 
                                                (car pV148)) 
                                               (cons 
                                                :|IfThenElse| 
                                                (vector 
                                                 (cdr pV154) 
                                                 (cdr pV151) 
                                                 (cdr pV148) 
                                                 POSITION-SPEC::noPos)))) 
                                             (error 
                                              "Nonexhaustive match failure in lambdaLiftTerm")))) 
                                         (error 
                                          "Nonexhaustive match failure in lambdaLiftTerm")))) 
                                     (error 
                                      "Nonexhaustive match failure in lambdaLiftTerm"))))) 
                               (if (eq (car pV276) :|Seq|) 
                                   (let ((pV222 (cdr pV276))) 
                                     (return 
                                      (labels 
                                        ((liftRec (pV160 pV161) 
                                          (block 
                                           nil 
                                           (return 
                                            (let ((pV157 
                                                   (LAMBDALIFT::lambdaLiftTerm-2 
                                                    pV274 
                                                    pV160))) 
                                              (block 
                                               nil 
                                               (return 
                                                (cons 
                                                 (LIST-SPEC::++-2 
                                                  (car pV161) 
                                                  (car pV157)) 
                                                 (LIST-SPEC::cons-2 
                                                  (cdr pV157) 
                                                  (cdr pV161)))) 
                                               (error 
                                                "Nonexhaustive match failure in lambdaLiftTerm")))) 
                                           (error 
                                            "Nonexhaustive match failure in lambdaLiftTerm")))) 
                                        (let ((pV164 
                                               (LIST-SPEC::foldr-1-1-1 
                                                #'(lambda (pV) 
                                                   (liftRec (car pV) (cdr pV))) 
                                                (cons nil nil) 
                                                pV222))) 
                                          (block 
                                           nil 
                                           (return 
                                            (cons 
                                             (car pV164) 
                                             (cons 
                                              :|Seq| 
                                              (cons 
                                               (cdr pV164) 
                                               POSITION-SPEC::noPos)))) 
                                           (error 
                                            "Nonexhaustive match failure in lambdaLiftTerm")))))) 
                                   (if (eq (car pV276) :|Apply|) 
                                       (let ((pV221 (cdr pV276))) 
                                         (let ((pV233 (cdr pV221))
                                               (pV232 (car pV221))) 
                                           (progn (let ((pV234 (car pV232))) 
                                                    (if (eq 
                                                         (car pV234) 
                                                         :|Lambda|) 
                                                        (let ((pV236 (cdr pV234))) 
                                                          (progn (if (consp 
                                                                      pV236) 
                                                                     (return 
                                                                      (let ((pV22 
                                                                             (labels 
                                                                               ((foldl--local-0 
                                                                                 (base 
                                                                                  l) 
                                                                                 (block 
                                                                                  nil 
                                                                                  (if (null 
                                                                                       l) 
                                                                                      (return 
                                                                                       base) 
                                                                                      (if (consp 
                                                                                           l) 
                                                                                          (let ((pV17 
                                                                                                 (car 
                                                                                                  l))) 
                                                                                            (return 
                                                                                             (foldl--local-0 
                                                                                              (block 
                                                                                               nil 
                                                                                               (return 
                                                                                                (let ((pV3 
                                                                                                       (LAMBDALIFT::lambdaLiftTerm-2 
                                                                                                        pV274 
                                                                                                        (svref 
                                                                                                         pV17 
                                                                                                         2)))) 
                                                                                                  (block 
                                                                                                   nil 
                                                                                                   (return 
                                                                                                    (let ((match 
                                                                                                           (LIST-SPEC::concat-2 
                                                                                                            (cdr 
                                                                                                             base) 
                                                                                                            (cons 
                                                                                                             (vector 
                                                                                                              (svref 
                                                                                                               pV17 
                                                                                                               0) 
                                                                                                              (svref 
                                                                                                               pV17 
                                                                                                               1) 
                                                                                                              (cdr 
                                                                                                               pV3)) 
                                                                                                             nil)))) 
                                                                                                      (cons 
                                                                                                       (LIST-SPEC::++-2 
                                                                                                        (car 
                                                                                                         base) 
                                                                                                        (car 
                                                                                                         pV3)) 
                                                                                                       match))) 
                                                                                                   (error 
                                                                                                    "Nonexhaustive match failure in lambdaLiftTerm")))) 
                                                                                               (error 
                                                                                                "Nonexhaustive match failure in lambdaLiftTerm")) 
                                                                                              (cdr 
                                                                                               l)))))) 
                                                                                  (error 
                                                                                   "Nonexhaustive match failure in lambdaLiftTerm")))) 
                                                                               (foldl--local-0 
                                                                                (cons 
                                                                                 nil 
                                                                                 nil) 
                                                                                pV236)))) 
                                                                        (block 
                                                                         nil 
                                                                         (return 
                                                                          (let ((pV19 
                                                                                 (LAMBDALIFT::lambdaLiftTerm-2 
                                                                                  pV274 
                                                                                  pV233))) 
                                                                            (block 
                                                                             nil 
                                                                             (return 
                                                                              (cons 
                                                                               (LIST-SPEC::++-2 
                                                                                (car 
                                                                                 pV22) 
                                                                                (car 
                                                                                 pV19)) 
                                                                               (cons 
                                                                                :|Apply| 
                                                                                (vector 
                                                                                 (cons 
                                                                                  :|Lambda| 
                                                                                  (cons 
                                                                                   (cdr 
                                                                                    pV22) 
                                                                                   POSITION-SPEC::noPos)) 
                                                                                 (cdr 
                                                                                  pV19) 
                                                                                 POSITION-SPEC::noPos)))) 
                                                                             (error 
                                                                              "Nonexhaustive match failure in lambdaLiftTerm")))) 
                                                                         (error 
                                                                          "Nonexhaustive match failure in lambdaLiftTerm"))))) 
                                                                 (if (consp 
                                                                      pV236) 
                                                                     (let ((pV238 
                                                                            (car 
                                                                             pV236))) 
                                                                       (let ((pV241 
                                                                              (svref 
                                                                               pV238 
                                                                               1))) 
                                                                         (if (eq 
                                                                              (car 
                                                                               pV241) 
                                                                              :|Fun|) 
                                                                             (let ((pV244 
                                                                                    (svref 
                                                                                     (cdr 
                                                                                      pV241) 
                                                                                     0))) 
                                                                               (if (eq 
                                                                                    (car 
                                                                                     pV244) 
                                                                                    :|Bool|) 
                                                                                   (if (eq 
                                                                                        t 
                                                                                        (cdr 
                                                                                         pV244)) 
                                                                                       (if (null 
                                                                                            (cdr 
                                                                                             pV236)) 
                                                                                           (return 
                                                                                            (LAMBDALIFT::lambdaLiftTerm-2 
                                                                                             pV274 
                                                                                             (cons 
                                                                                              (cons 
                                                                                               :|Let| 
                                                                                               (cons 
                                                                                                (cons 
                                                                                                 (cons 
                                                                                                  (svref 
                                                                                                   pV238 
                                                                                                   0) 
                                                                                                  pV233) 
                                                                                                 nil) 
                                                                                                (svref 
                                                                                                 pV238 
                                                                                                 2))) 
                                                                                              (LIST-SPEC::++-2 
                                                                                               pV277 
                                                                                               (cdr 
                                                                                                pV232))))))))))))))))) 
                                                  (return 
                                                   (let ((pV202 
                                                          (LAMBDALIFT::lambdaLiftTerm-2 
                                                           pV274 
                                                           pV233))) 
                                                     (block 
                                                      nil 
                                                      (let ((pV204 (cdr pV202))) 
                                                        (return 
                                                         (let ((pV199 
                                                                (let ((pV171 
                                                                       (car 
                                                                        pV232))) 
                                                                  (block 
                                                                   nil 
                                                                   (if (eq 
                                                                        (car 
                                                                         pV171) 
                                                                        :|Fun|) 
                                                                       (let ((pV173 
                                                                              (cdr 
                                                                               pV171))) 
                                                                         (return 
                                                                          (cons 
                                                                           nil 
                                                                           (cons 
                                                                            :|Fun| 
                                                                            (vector 
                                                                             (car 
                                                                              pV173) 
                                                                             (cdr 
                                                                              pV173) 
                                                                             POSITION-SPEC::noPos)))))) 
                                                                   (return 
                                                                    (LAMBDALIFT::lambdaLiftTerm-2 
                                                                     pV274 
                                                                     pV232)))))) 
                                                           (block 
                                                            nil 
                                                            (let ((pV201 
                                                                   (cdr pV199))) 
                                                              (return 
                                                               (let ((opers 
                                                                      (LIST-SPEC::++-2 
                                                                       (car 
                                                                        pV199) 
                                                                       (car 
                                                                        pV202)))) 
                                                                 (block 
                                                                  nil 
                                                                  (if (eq 
                                                                       (car 
                                                                        pV201) 
                                                                       :|Fun|) 
                                                                      (return 
                                                                       (if (BOOLEAN-SPEC::~ 
                                                                            LAMBDALIFT::simulateClosures?) 
                                                                           (let ((pV191 
                                                                                  (car 
                                                                                   pV232))) 
                                                                             (block 
                                                                              nil 
                                                                              (if (eq 
                                                                                   (car 
                                                                                    pV191) 
                                                                                   :|Var|) 
                                                                                  (return 
                                                                                   (let ((pV182 
                                                                                          (MAP-SPEC::apply-2 
                                                                                           (svref 
                                                                                            pV274 
                                                                                            2) 
                                                                                           (car 
                                                                                            (cdr 
                                                                                             pV191))))) 
                                                                                     (block 
                                                                                      nil 
                                                                                      (if (eq 
                                                                                           (car 
                                                                                            pV182) 
                                                                                           :|Some|) 
                                                                                          (let ((pV186 
                                                                                                 (svref 
                                                                                                  (cdr 
                                                                                                   pV182) 
                                                                                                  2))) 
                                                                                            (return 
                                                                                             (cons 
                                                                                              opers 
                                                                                              (MS::mkApply-2 
                                                                                               pV201 
                                                                                               (MS::mkTuple 
                                                                                                (LIST-SPEC::++-2 
                                                                                                 (MS::termToList 
                                                                                                  pV204) 
                                                                                                 (labels 
                                                                                                   ((map--local-0 
                                                                                                     (l) 
                                                                                                     (block 
                                                                                                      nil 
                                                                                                      (if (null 
                                                                                                           l) 
                                                                                                          (return 
                                                                                                           nil) 
                                                                                                          (if (consp 
                                                                                                               l) 
                                                                                                              (return 
                                                                                                               (cons 
                                                                                                                (MS::mkVar 
                                                                                                                 (car 
                                                                                                                  l)) 
                                                                                                                (map--local-0 
                                                                                                                 (cdr 
                                                                                                                  l)))))) 
                                                                                                      (error 
                                                                                                       "Nonexhaustive match failure in lambdaLiftTerm")))) 
                                                                                                   (map--local-0 
                                                                                                    pV186))))))))) 
                                                                                      (return 
                                                                                       (cons 
                                                                                        opers 
                                                                                        (MS::mkApply-2 
                                                                                         pV201 
                                                                                         pV204))))))) 
                                                                              (return 
                                                                               (cons 
                                                                                opers 
                                                                                (MS::mkApply-2 
                                                                                 pV201 
                                                                                 pV204))))) 
                                                                           (cons 
                                                                            opers 
                                                                            (MS::mkApply-2 
                                                                             pV201 
                                                                             pV204))))) 
                                                                  (return 
                                                                   (if (BOOLEAN-SPEC::~ 
                                                                        LAMBDALIFT::simulateClosures?) 
                                                                       (cons 
                                                                        opers 
                                                                        (MS::mkApply-2 
                                                                         pV201 
                                                                         pV204)) 
                                                                       (let ((argument 
                                                                              (MS::mkTuple 
                                                                               (cons 
                                                                                pV201 
                                                                                (cons 
                                                                                 (LAMBDALIFT::toAny 
                                                                                  pV204) 
                                                                                 nil))))) 
                                                                         (let ((alpha 
                                                                                (MS::mkTyVar 
                                                                                 "alpha"))) 
                                                                           (let ((beta 
                                                                                  (MS::mkTyVar 
                                                                                   "beta"))) 
                                                                             (cons 
                                                                              opers 
                                                                              (MS::mkApply-2 
                                                                               (MS::mkOp-2 
                                                                                (cons 
                                                                                 :|Qualified| 
                                                                                 (cons 
                                                                                  "TranslationBuiltIn" 
                                                                                  "applyClosure")) 
                                                                                (MS::mkArrow-2 
                                                                                 (MS::mkProduct 
                                                                                  (cons 
                                                                                   (MS::mkArrow-2 
                                                                                    alpha 
                                                                                    beta) 
                                                                                   (cons 
                                                                                    alpha 
                                                                                    nil))) 
                                                                                 beta)) 
                                                                               argument))))))))))) 
                                                            (error 
                                                             "Nonexhaustive match failure in lambdaLiftTerm"))))) 
                                                      (error 
                                                       "Nonexhaustive match failure in lambdaLiftTerm"))))))) 
                                       (if (eq (car pV276) :|Record|) 
                                           (let ((pV220 (cdr pV276))) 
                                             (return 
                                              (labels 
                                                ((liftRec (pV208 pV209) 
                                                  (block 
                                                   nil 
                                                   (return 
                                                    (let ((pV205 
                                                           (LAMBDALIFT::lambdaLiftTerm-2 
                                                            pV274 
                                                            (cdr pV208)))) 
                                                      (block 
                                                       nil 
                                                       (return 
                                                        (cons 
                                                         (LIST-SPEC::++-2 
                                                          (car pV209) 
                                                          (car pV205)) 
                                                         (LIST-SPEC::cons-2 
                                                          (cons 
                                                           (car pV208) 
                                                           (cdr pV205)) 
                                                          (cdr pV209)))) 
                                                       (error 
                                                        "Nonexhaustive match failure in lambdaLiftTerm")))) 
                                                   (error 
                                                    "Nonexhaustive match failure in lambdaLiftTerm")))) 
                                                (let ((pV214 
                                                       (LIST-SPEC::foldr-1-1-1 
                                                        #'(lambda (pV) 
                                                           (liftRec 
                                                            (car pV) 
                                                            (cdr pV))) 
                                                        (cons nil nil) 
                                                        pV220))) 
                                                  (block 
                                                   nil 
                                                   (return 
                                                    (cons 
                                                     (car pV214) 
                                                     (cons 
                                                      :|Record| 
                                                      (cons 
                                                       (cdr pV214) 
                                                       POSITION-SPEC::noPos)))) 
                                                   (error 
                                                    "Nonexhaustive match failure in lambdaLiftTerm")))))) 
                                           (if (eq (car pV276) :|Bind|) 
                                               (return 
                                                (SYSTEM-SPEC::fail 
                                                 "Unexpected binder")))))))))))) 
       (return (SYSTEM-SPEC::fail "Unexpected term"))))) 
   (error "Nonexhaustive match failure in lambdaLiftTerm")))

(defun LAMBDALIFT::patternVars (pat) 
  (block 
   nil 
   (if (eq (car pat) :|VarPat|) 
       (return (cons (car (cdr pat)) nil)) 
       (if (eq (car pat) :|RecordPat|) 
           (let ((pV61 (car (cdr pat)))) 
             (return 
              (labels 
                ((foldr--local-0 (base l) 
                  (block 
                   nil 
                   (if (null l) 
                       (return base) 
                       (if (consp l) 
                           (return 
                            (let ((pV5 (foldr--local-0 base (cdr l)))) 
                              (block 
                               nil 
                               (return 
                                (LIST-SPEC::++-2 
                                 (LAMBDALIFT::patternVars (cdr (car l))) 
                                 pV5)) 
                               (error 
                                "Nonexhaustive match failure in patternVars")))))) 
                   (error "Nonexhaustive match failure in patternVars")))) 
                (foldr--local-0 nil pV61)))) 
           (if (eq (car pat) :|WildPat|) 
               (return nil) 
               (if (eq (car pat) :|EmbedPat|) 
                   (let ((pV57 (svref (cdr pat) 1))) 
                     (if (eq (car pV57) :|Some|) 
                         (return (LAMBDALIFT::patternVars (cdr pV57))) 
                         (if (eq (car pV57) :|None|) (return nil)))) 
                   (if (eq (car pat) :|AliasPat|) 
                       (let ((pV39 (cdr pat))) 
                         (return 
                          (LIST-SPEC::concat-2 
                           (LAMBDALIFT::patternVars (svref pV39 0)) 
                           (LAMBDALIFT::patternVars (svref pV39 1))))) 
                       (if (eq (car pat) :|RelaxPat|) 
                           (return (LAMBDALIFT::patternVars (svref (cdr pat) 0))) 
                           (if (eq (car pat) :|QuotientPat|) 
                               (return 
                                (LAMBDALIFT::patternVars (svref (cdr pat) 0))) 
                               (if (eq (car pat) :|SortedPat|) 
                                   (return 
                                    (LAMBDALIFT::patternVars (svref (cdr pat) 0))) 
                                   (if (eq (car pat) :|StringPat|) 
                                       (return nil) 
                                       (if (eq (car pat) :|BoolPat|) 
                                           (return nil) 
                                           (if (eq (car pat) :|CharPat|) 
                                               (return nil) 
                                               (if (eq (car pat) :|NatPat|) 
                                                   (return nil))))))))))))) 
   (return 
    (SYSTEM-SPEC::fail 
     (STRING-SPEC::^-2 
      "Unexpected pattern in match normalized expression: " 
      (ANNSPECPRINTER::printPattern pat))))))

(defun LIST-SPEC::diff-2 (l1 l2) 
  (block 
   nil 
   (if (null l1) 
       (return nil) 
       (if (consp l1) 
           (let ((pV4 (cdr l1))
                 (pV3 (car l1))) 
             (return 
              (if (LIST-SPEC::member-2 pV3 l2) 
                  (LIST-SPEC::diff-2 pV4 l2) 
                  (cons pV3 (LIST-SPEC::diff-2 pV4 l2))))))) 
   (error "Nonexhaustive match failure in diff")))

(defun LAMBDALIFT::makeVarTerm (term) 
  (block 
   nil 
   (if (eq (car term) :|Let|) 
       (let ((pV127 (cdr term))) 
         (let ((pV153 (svref pV127 0))) 
           (return 
            (let ((decls 
                   (labels 
                     ((map--local-0 (l) 
                       (block 
                        nil 
                        (if (null l) 
                            (return nil) 
                            (if (consp l) 
                                (let ((pV3 (car l))) 
                                  (return 
                                   (cons 
                                    (cons 
                                     (car pV3) 
                                     (LAMBDALIFT::makeVarTerm (cdr pV3))) 
                                    (map--local-0 (cdr l))))))) 
                        (error "Nonexhaustive match failure in makeVarTerm")))) 
                     (map--local-0 pV153)))) 
              (let ((vars 
                     (LIST-SPEC::flatten 
                      (labels 
                        ((map--local-0 (l) 
                          (block 
                           nil 
                           (if (null l) 
                               (return nil) 
                               (if (consp l) 
                                   (return 
                                    (cons 
                                     (block 
                                      nil 
                                      (return (cdr (cdr (car l)))) 
                                      (error 
                                       "Nonexhaustive match failure in makeVarTerm")) 
                                     (map--local-0 (cdr l)))))) 
                           (error "Nonexhaustive match failure in makeVarTerm")))) 
                        (map--local-0 decls))))) 
                (let ((letVars 
                       (LIST-SPEC::flatten 
                        (labels 
                          ((map--local-0 (l) 
                            (block 
                             nil 
                             (if (null l) 
                                 (return nil) 
                                 (if (consp l) 
                                     (return 
                                      (cons 
                                       (LAMBDALIFT::patternVars (car (car l))) 
                                       (map--local-0 (cdr l)))))) 
                             (error "Nonexhaustive match failure in makeVarTerm")))) 
                          (map--local-0 decls))))) 
                  (let ((pV21 (LAMBDALIFT::makeVarTerm (svref pV127 1)))) 
                    (block 
                     nil 
                     (return 
                      (cons 
                       (cons :|Let| (cons decls pV21)) 
                       (LISTUTILITIES::removeDuplicates 
                        (LIST-SPEC::++-2 
                         vars 
                         (LIST-SPEC::diff-2 (cdr pV21) letVars))))) 
                     (error "Nonexhaustive match failure in makeVarTerm"))))))))) 
       (if (eq (car term) :|LetRec|) 
           (let ((pV126 (cdr term))) 
             (let ((pV150 (svref pV126 0))) 
               (return 
                (let ((decls 
                       (labels 
                         ((map--local-0 (l) 
                           (block 
                            nil 
                            (if (null l) 
                                (return nil) 
                                (if (consp l) 
                                    (let ((pV26 (car l))) 
                                      (return 
                                       (cons 
                                        (cons 
                                         (car pV26) 
                                         (LAMBDALIFT::makeVarTerm (cdr pV26))) 
                                        (map--local-0 (cdr l))))))) 
                            (error "Nonexhaustive match failure in makeVarTerm")))) 
                         (map--local-0 pV150)))) 
                  (let ((vars 
                         (LIST-SPEC::flatten 
                          (labels 
                            ((map--local-0 (l) 
                              (block 
                               nil 
                               (if (null l) 
                                   (return nil) 
                                   (if (consp l) 
                                       (return 
                                        (cons 
                                         (block 
                                          nil 
                                          (return (cdr (cdr (car l)))) 
                                          (error 
                                           "Nonexhaustive match failure in makeVarTerm")) 
                                         (map--local-0 (cdr l)))))) 
                               (error 
                                "Nonexhaustive match failure in makeVarTerm")))) 
                            (map--local-0 decls))))) 
                    (let ((letVars 
                           (labels 
                             ((map--local-0 (l) 
                               (block 
                                nil 
                                (if (null l) 
                                    (return nil) 
                                    (if (consp l) 
                                        (return 
                                         (cons 
                                          (car (car l)) 
                                          (map--local-0 (cdr l)))))) 
                                (error 
                                 "Nonexhaustive match failure in makeVarTerm")))) 
                             (map--local-0 decls)))) 
                      (let ((pV44 (LAMBDALIFT::makeVarTerm (svref pV126 1)))) 
                        (block 
                         nil 
                         (return 
                          (cons 
                           (cons :|LetRec| (cons decls pV44)) 
                           (LISTUTILITIES::removeDuplicates 
                            (LIST-SPEC::++-2 
                             vars 
                             (LIST-SPEC::diff-2 (cdr pV44) letVars))))) 
                         (error "Nonexhaustive match failure in makeVarTerm"))))))))) 
           (if (eq (car term) :|Lambda|) 
               (let ((pV148 (car (cdr term)))) 
                 (return 
                  (let ((match 
                         (labels 
                           ((map--local-0 (l) 
                             (block 
                              nil 
                              (if (null l) 
                                  (return nil) 
                                  (if (consp l) 
                                      (let ((pV49 (car l))) 
                                        (return 
                                         (cons 
                                          (vector 
                                           (svref pV49 0) 
                                           (svref pV49 1) 
                                           (LAMBDALIFT::makeVarTerm 
                                            (svref pV49 2))) 
                                          (map--local-0 (cdr l))))))) 
                              (error 
                               "Nonexhaustive match failure in makeVarTerm")))) 
                           (map--local-0 pV148)))) 
                    (cons 
                     (cons :|Lambda| match) 
                     (LIST-SPEC::diff-2 
                      (LIST-SPEC::flatten 
                       (labels 
                         ((map--local-0 (l) 
                           (block 
                            nil 
                            (if (null l) 
                                (return nil) 
                                (if (consp l) 
                                    (return 
                                     (cons 
                                      (block 
                                       nil 
                                       (return (cdr (svref (car l) 2))) 
                                       (error 
                                        "Nonexhaustive match failure in makeVarTerm")) 
                                      (map--local-0 (cdr l)))))) 
                            (error "Nonexhaustive match failure in makeVarTerm")))) 
                         (map--local-0 match))) 
                      (LIST-SPEC::flatten 
                       (labels 
                         ((map--local-0 (l) 
                           (block 
                            nil 
                            (if (null l) 
                                (return nil) 
                                (if (consp l) 
                                    (return 
                                     (cons 
                                      (LAMBDALIFT::patternVars (svref (car l) 0)) 
                                      (map--local-0 (cdr l)))))) 
                            (error "Nonexhaustive match failure in makeVarTerm")))) 
                         (map--local-0 match)))))))) 
               (if (eq (car term) :|Var|) 
                   (let ((pV146 (car (cdr term)))) 
                     (return 
                      (cons 
                       (cons :|Var| (cons (car pV146) (cdr pV146))) 
                       (cons pV146 nil)))) 
                   (if (eq (car term) :|Fun|) 
                       (let ((pV123 (cdr term))) 
                         (return 
                          (cons 
                           (cons :|Fun| (cons (svref pV123 0) (svref pV123 1))) 
                           nil))) 
                       (if (eq (car term) :|IfThenElse|) 
                           (let ((pV122 (cdr term))) 
                             (return 
                              (let ((pV78 
                                     (LAMBDALIFT::makeVarTerm (svref pV122 0)))) 
                                (block 
                                 nil 
                                 (return 
                                  (let ((pV75 
                                         (LAMBDALIFT::makeVarTerm 
                                          (svref pV122 1)))) 
                                    (block 
                                     nil 
                                     (return 
                                      (let ((pV72 
                                             (LAMBDALIFT::makeVarTerm 
                                              (svref pV122 2)))) 
                                        (block 
                                         nil 
                                         (return 
                                          (cons 
                                           (cons 
                                            :|IfThenElse| 
                                            (vector pV78 pV75 pV72)) 
                                           (LISTUTILITIES::removeDuplicates 
                                            (LIST-SPEC::++-2 
                                             (LIST-SPEC::++-2 
                                              (cdr pV78) 
                                              (cdr pV75)) 
                                             (cdr pV72))))) 
                                         (error 
                                          "Nonexhaustive match failure in makeVarTerm")))) 
                                     (error 
                                      "Nonexhaustive match failure in makeVarTerm")))) 
                                 (error 
                                  "Nonexhaustive match failure in makeVarTerm"))))) 
                           (if (eq (car term) :|Seq|) 
                               (let ((pV137 (car (cdr term)))) 
                                 (return 
                                  (let ((terms 
                                         (labels 
                                           ((map--local-0 (l) 
                                             (block 
                                              nil 
                                              (if (null l) 
                                                  (return nil) 
                                                  (if (consp l) 
                                                      (return 
                                                       (cons 
                                                        (LAMBDALIFT::makeVarTerm 
                                                         (car l)) 
                                                        (map--local-0 (cdr l)))))) 
                                              (error 
                                               "Nonexhaustive match failure in makeVarTerm")))) 
                                           (map--local-0 pV137)))) 
                                    (cons 
                                     (cons :|Seq| terms) 
                                     (LISTUTILITIES::removeDuplicates 
                                      (LIST-SPEC::flatten 
                                       (labels 
                                         ((map--local-0 (l) 
                                           (block 
                                            nil 
                                            (if (null l) 
                                                (return nil) 
                                                (if (consp l) 
                                                    (return 
                                                     (cons 
                                                      (cdr (car l)) 
                                                      (map--local-0 (cdr l)))))) 
                                            (error 
                                             "Nonexhaustive match failure in makeVarTerm")))) 
                                         (map--local-0 terms)))))))) 
                               (if (eq (car term) :|Apply|) 
                                   (let ((pV120 (cdr term))) 
                                     (return 
                                      (let ((pV95 
                                             (LAMBDALIFT::makeVarTerm 
                                              (svref pV120 0)))) 
                                        (block 
                                         nil 
                                         (return 
                                          (let ((pV92 
                                                 (LAMBDALIFT::makeVarTerm 
                                                  (svref pV120 1)))) 
                                            (block 
                                             nil 
                                             (return 
                                              (cons 
                                               (cons :|Apply| (cons pV95 pV92)) 
                                               (LISTUTILITIES::removeDuplicates 
                                                (LIST-SPEC::++-2 
                                                 (cdr pV95) 
                                                 (cdr pV92))))) 
                                             (error 
                                              "Nonexhaustive match failure in makeVarTerm")))) 
                                         (error 
                                          "Nonexhaustive match failure in makeVarTerm"))))) 
                                   (if (eq (car term) :|Record|) 
                                       (let ((pV132 (car (cdr term)))) 
                                         (return 
                                          (let ((fields 
                                                 (labels 
                                                   ((map--local-0 (l) 
                                                     (block 
                                                      nil 
                                                      (if (null l) 
                                                          (return nil) 
                                                          (if (consp l) 
                                                              (let ((pV100 
                                                                     (car l))) 
                                                                (return 
                                                                 (cons 
                                                                  (cons 
                                                                   (car pV100) 
                                                                   (LAMBDALIFT::makeVarTerm 
                                                                    (cdr pV100))) 
                                                                  (map--local-0 
                                                                   (cdr l))))))) 
                                                      (error 
                                                       "Nonexhaustive match failure in makeVarTerm")))) 
                                                   (map--local-0 pV132)))) 
                                            (cons 
                                             (cons :|Record| fields) 
                                             (LISTUTILITIES::removeDuplicates 
                                              (LIST-SPEC::flatten 
                                               (labels 
                                                 ((map--local-0 (l) 
                                                   (block 
                                                    nil 
                                                    (if (null l) 
                                                        (return nil) 
                                                        (if (consp l) 
                                                            (return 
                                                             (cons 
                                                              (block 
                                                               nil 
                                                               (return 
                                                                (cdr 
                                                                 (cdr (car l)))) 
                                                               (error 
                                                                "Nonexhaustive match failure in makeVarTerm")) 
                                                              (map--local-0 
                                                               (cdr l)))))) 
                                                    (error 
                                                     "Nonexhaustive match failure in makeVarTerm")))) 
                                                 (map--local-0 fields)))))))) 
                                       (if (eq (car term) :|Bind|) 
                                           (let ((pV118 (cdr term))) 
                                             (let ((pV129 (svref pV118 1))) 
                                               (return 
                                                (let ((pV113 
                                                       (LAMBDALIFT::makeVarTerm 
                                                        (svref pV118 2)))) 
                                                  (block 
                                                   nil 
                                                   (return 
                                                    (cons 
                                                     (cons 
                                                      :|Bind| 
                                                      (vector 
                                                       (svref pV118 0) 
                                                       pV129 
                                                       pV113)) 
                                                     (LIST-SPEC::diff-2 
                                                      (cdr pV113) 
                                                      pV129))) 
                                                   (error 
                                                    "Nonexhaustive match failure in makeVarTerm")))))))))))))))) 
   (return (SYSTEM-SPEC::fail "makeVarTerm"))))

(defun LAMBDALIFT::lambdaLift (spc) 
  (labels 
    ((mkEnv (qname name) 
      (vector (cons :|Ref| 1) name MAP-SPEC::emptyMap qname spc))) 
    (labels 
      ((insertOpers (opers qname spc) 
        (block 
         nil 
         (if (null opers) 
             (return spc) 
             (if (consp opers) 
                 (let ((pV8 (car opers))) 
                   (let ((pV14 (svref pV8 4))) 
                     (return 
                      (let ((pV1 
                             (LAMBDALIFT::abstractName-5 
                              (mkEnv qname pV14) 
                              pV14 
                              (svref pV8 2) 
                              (svref pV8 5) 
                              (svref pV8 0)))) 
                        (block 
                         nil 
                         (return 
                          (insertOpers 
                           (cdr opers) 
                           qname 
                           (LAMBDALIFT::addNewOp-5 
                            (cons :|Qualified| (cons qname pV14)) 
                            (svref pV1 1) 
                            (svref pV1 2) 
                            (svref pV1 3) 
                            spc))) 
                         (error "Nonexhaustive match failure in lambdaLift")))))))) 
         (error "Nonexhaustive match failure in lambdaLift")))) 
      (labels 
        ((doOp (pV37 pV38 pV39 pV40) 
          (block 
           nil 
           (let ((pV44 (svref pV39 3))
                 (pV43 (svref pV39 2))
                 (pV42 (svref pV39 1))) 
             (let ((pV46 (cdr pV43))
                   (pV45 (car pV43))) 
               (return 
                (block 
                 nil 
                 (if (null pV44) 
                     (return 
                      (LAMBDALIFT::addNewOp-5 
                       (cons :|Qualified| (cons pV37 pV38)) 
                       pV42 
                       (cons pV45 pV46) 
                       nil 
                       pV40)) 
                     (if (consp pV44) 
                         (let ((pV25 (cdr pV44))) 
                           (let ((pV27 (cdr (car pV44)))) 
                             (progn (if (eq (car pV27) :|Lambda|) 
                                        (let ((pV28 (cdr pV27))) 
                                          (let ((pV29 (car pV28))) 
                                            (if (consp pV29) 
                                                (let ((pV32 (car pV29))) 
                                                  (if (null (cdr pV29)) 
                                                      (if (null pV25) 
                                                          (return 
                                                           (let ((pV16 
                                                                  (LAMBDALIFT::lambdaLiftTerm-2 
                                                                   (mkEnv 
                                                                    pV37 
                                                                    pV38) 
                                                                   (LAMBDALIFT::makeVarTerm 
                                                                    (svref 
                                                                     pV32 
                                                                     2))))) 
                                                             (block 
                                                              nil 
                                                              (return 
                                                               (insertOpers 
                                                                (car pV16) 
                                                                pV37 
                                                                (LAMBDALIFT::addNewOp-5 
                                                                 (cons 
                                                                  :|Qualified| 
                                                                  (cons 
                                                                   pV37 
                                                                   pV38)) 
                                                                 pV42 
                                                                 (cons pV45 pV46) 
                                                                 (cons 
                                                                  (cons 
                                                                   nil 
                                                                   (cons 
                                                                    :|Lambda| 
                                                                    (cons 
                                                                     (cons 
                                                                      (vector 
                                                                       (svref 
                                                                        pV32 
                                                                        0) 
                                                                       (svref 
                                                                        pV32 
                                                                        1) 
                                                                       (cdr pV16)) 
                                                                      nil) 
                                                                     (cdr pV28)))) 
                                                                  nil) 
                                                                 pV40))) 
                                                              (error 
                                                               "Nonexhaustive match failure in lambdaLift"))))))))))) 
                                    (if (null pV25) 
                                        (return 
                                         (let ((pV19 
                                                (LAMBDALIFT::lambdaLiftTerm-2 
                                                 (mkEnv pV37 pV38) 
                                                 (LAMBDALIFT::makeVarTerm pV27)))) 
                                           (block 
                                            nil 
                                            (return 
                                             (insertOpers 
                                              (car pV19) 
                                              pV37 
                                              (LAMBDALIFT::addNewOp-5 
                                               (cons 
                                                :|Qualified| 
                                                (cons pV37 pV38)) 
                                               pV42 
                                               (cons pV45 pV46) 
                                               (cons (cons nil (cdr pV19)) nil) 
                                               pV40))) 
                                            (error 
                                             "Nonexhaustive match failure in lambdaLift")))))))))) 
                 (error "Nonexhaustive match failure in lambdaLift"))))) 
           (error "Nonexhaustive match failure in lambdaLift")))) 
        (ANNSPEC::foldriAQualifierMap-1-1-1 
         #'(lambda (pV) 
            (doOp (svref pV 0) (svref pV 1) (svref pV 2) (svref pV 3))) 
         (vector 
          (svref spc 0) 
          ANNSPEC::emptyAQualifierMap 
          (svref spc 2) 
          (svref spc 3)) 
         (svref spc 1))))))

(defun JGEN::specToJava-4 (basespc spc optspec |!filename|) 
  (progn (STRING-SPEC::writeLine (ANNSPECPRINTER::printSpec spc)) 
         (progn (STRING-SPEC::writeLine ";;; Renaming Variables") 
                (let ((spc (JGEN::distinctVariable spc))) 
                  (progn (STRING-SPEC::writeLine (ANNSPECPRINTER::printSpec spc)) 
                         (progn (STRING-SPEC::writeLine ";;; Lifting Lambdas") 
                                (let ((spc (LAMBDALIFT::lambdaLift spc))) 
                                  (progn (STRING-SPEC::writeLine 
                                          (ANNSPECPRINTER::printSpec spc)) 
                                         (let ((spc0 
                                                (CODEGENTRANSFORMS::letWildPatToSeq 
                                                 (CODEGENTRANSFORMS::unfoldSortAliases 
                                                  (CODEGENTRANSFORMS::poly2mono-2 
                                                   (CODEGENTRANSFORMS::addMissingFromBase-3 
                                                    basespc 
                                                    (CODEGENTRANSFORMS::identifyIntSorts 
                                                     spc) 
                                                    #'JGEN::builtinSortOp) 
                                                   nil))))) 
                                           (let ((jcginfo 
                                                  (JGEN::modifyClsDeclsFromOps-2 
                                                   spc0 
                                                   (JGEN::clsDeclsFromSorts spc0)))) 
                                             (let ((clsDecls 
                                                    (LIST-SPEC::++-2 
                                                     (car 
                                                      (JGEN::insertClsDeclsForCollectedProductSorts-2 
                                                       spc0 
                                                       jcginfo)) 
                                                     (MERGESORT::uniqueSort-1-1 
                                                      #'(lambda (pV) 
                                                         (block 
                                                          nil 
                                                          (return 
                                                           (STRING-SPEC::compare-2 
                                                            (svref 
                                                             (svref (car pV) 1) 
                                                             0) 
                                                            (svref 
                                                             (svref (cdr pV) 1) 
                                                             0))) 
                                                          (error 
                                                           "Nonexhaustive match failure in specToJava"))) 
                                                      (car (cdr jcginfo)))))) 
                                               (let ((clsOrInterfDecls 
                                                      (labels 
                                                        ((map--local-0 (l) 
                                                          (block 
                                                           nil 
                                                           (if (null l) 
                                                               (return nil) 
                                                               (if (consp l) 
                                                                   (let ((pV30 
                                                                          (car l))) 
                                                                     (return 
                                                                      (cons 
                                                                       (cons 
                                                                        :|ClsDecl| 
                                                                        (vector 
                                                                         (svref 
                                                                          pV30 
                                                                          0) 
                                                                         (svref 
                                                                          pV30 
                                                                          1) 
                                                                         (svref 
                                                                          pV30 
                                                                          2))) 
                                                                       (map--local-0 
                                                                        (cdr l))))))) 
                                                           (error 
                                                            "Nonexhaustive match failure in specToJava")))) 
                                                        (map--local-0 clsDecls)))) 
                                                 (let ((jspc 
                                                        (JAVA::mapJName-1-1 
                                                         #'JGEN::mapJavaIdent 
                                                         (vector 
                                                          '(:|None|) 
                                                          nil 
                                                          clsOrInterfDecls)))) 
                                                   (let ((jfiles 
                                                          (JGEN::processOptions-3 
                                                           jspc 
                                                           optspec 
                                                           |!filename|))) 
                                                     (progn (labels 
                                                              ((app--local-0 
                                                                (l) 
                                                                (block 
                                                                 nil 
                                                                 (if (null l) 
                                                                     (return nil) 
                                                                     (if (consp 
                                                                          l) 
                                                                         (return 
                                                                          (progn (JGEN::printJavaFile 
                                                                                  (car 
                                                                                   l)) 
                                                                                 (app--local-0 
                                                                                  (cdr 
                                                                                   l)))))) 
                                                                 (error 
                                                                  "Nonexhaustive match failure in specToJava")))) 
                                                              (app--local-0 
                                                               jfiles)) 
                                                            jspc)))))))))))))))

(defun JGEN::specToJava (x) 
  (JGEN::specToJava-4 (svref x 0) (svref x 1) (svref x 2) (svref x 3)))

(defun JGEN::specialTermToExpression (x) 
  (JGEN::specialTermToExpression-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun JGEN::srtId_internal (x) (JGEN::srtId_internal-2 (car x) (cdr x)))

(defun JGEN::srtId_v2 (srt) 
  (block 
   nil 
   (if (eq (car srt) :|Base|) 
       (let ((pV5 (svref (cdr srt) 0))) 
         (if (eq (car pV5) :|Qualified|) (return (cdr (cdr pV5)))))) 
   (error "Nonexhaustive match failure in srtId_v2")))

(defun JGEN::srtTermDelta (x) (JGEN::srtTermDelta-2 (car x) (cdr x)))

(defun JGEN::srtTermDelta_internal (x) 
  (JGEN::srtTermDelta_internal-3 (svref x 0) (svref x 1) (svref x 2)))

(defun JGEN::standAloneFromSort (x) 
  (JGEN::standAloneFromSort-4 (svref x 0) (svref x 1) (svref x 2) (svref x 3)))

(defun JGEN::standAloneFromSortWithParNames (x) 
  (JGEN::standAloneFromSortWithParNames-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun JGEN::standalone (x) 
  (JGEN::standalone-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun JGEN::standaloneWithParNames (x) 
  (JGEN::standaloneWithParNames-6 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4) 
   (svref x 5)))

(defun JGEN::subSortToClsDecls (x) 
  (JGEN::subSortToClsDecls-4 (svref x 0) (svref x 1) (svref x 2) (svref x 3)))

(defun JGEN::sumArgToClsDecl-2 (ty c) 
  (vector 
   nil 
   (vector (JGEN::mkSummandId-2 ty c) (cons :|Some| (cons nil ty)) nil) 
   JGEN::emptyClsBody))

(defun JGEN::sumArgToClsDecl (x) (JGEN::sumArgToClsDecl-2 (car x) (cdr x)))

(defun JGEN::sumToClsDecl (x) 
  (JGEN::sumToClsDecl-3 (svref x 0) (svref x 1) (svref x 2)))

(defun JGEN::sumToConsMethodDecl (x) 
  (JGEN::sumToConsMethodDecl-3 (svref x 0) (svref x 1) (svref x 2)))

(defun JGEN::sumTypeToClsDecl (x) 
  (JGEN::sumTypeToClsDecl-3 (svref x 0) (svref x 1) (svref x 2)))

(defun JGEN::termToExpression (x) 
  (JGEN::termToExpression-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun JGEN::translateCaseCasesToSwitchesAsgF-10
 (cId |!fId| tcx pV1 caseExpr cases k0 l0 l spc) 
  (declare (ignore pV1)) 
  (labels 
    ((mkCaseInit (|!cons| coSrt) 
      (let ((pV2 (JGEN::srtId coSrt))) 
        (block 
         nil 
         (return 
          (let ((sumdType (JGEN::mkSumd-2 |!cons| (car pV2)))) 
            (cons 
             (JGEN::mkVarInit-3 
              (JGEN::mkSub-2 |!cons| l) 
              sumdType 
              (cons 
               :|CondExp| 
               (cons 
                (cons 
                 :|Un| 
                 (cons 
                  :|Cast| 
                  (cons 
                   (cons (cons :|Name| (cons nil sumdType)) 0) 
                   (cons :|Prim| (cons :|Paren| caseExpr))))) 
                '(:|None|)))) 
             (cdr pV2)))) 
         (error 
          "Nonexhaustive match failure in translateCaseCasesToSwitchesAsgF"))))) 
    (labels 
      ((translateCaseCaseToSwitch (c ks ls) 
        (let ((pV41 (svref c 2))
              (pV39 (svref c 0))) 
          (block 
           nil 
           (if (eq (car pV39) :|EmbedPat|) 
               (let ((pV44 (cdr pV39))) 
                 (let ((pV51 (svref pV44 0))) 
                   (return 
                    (let ((pV18 (JGEN::getVarsPattern (svref pV44 1)))) 
                      (block 
                       nil 
                       (return 
                        (if (BOOLEAN-SPEC::~ (cdr pV18)) 
                            (progn (JGEN::issueUnsupportedError-2 
                                    (svref pV44 3) 
                                    "pattern not supported") 
                                   (cons 
                                    (vector (cons nil nil) k0 l0) 
                                    JGEN::nothingCollected)) 
                            (let ((pV12 
                                   (JGEN::termToExpressionAsgF-7 
                                    cId 
                                    |!fId| 
                                    (JGEN::addSubsToTcx-3 
                                     tcx 
                                     (car pV18) 
                                     (JGEN::mkSub-2 pV51 l)) 
                                    pV41 
                                    ks 
                                    ls 
                                    spc))) 
                              (block 
                               nil 
                               (let ((pV13 (car pV12))) 
                                 (return 
                                  (let ((coSrt 
                                         (JGEN::unfoldToSubsort-2 
                                          spc 
                                          (svref pV44 2)))) 
                                    (let ((pV9 (mkCaseInit pV51 coSrt))) 
                                      (block 
                                       nil 
                                       (return 
                                        (let ((pV6 (JGEN::srtId coSrt))) 
                                          (block 
                                           nil 
                                           (return 
                                            (cons 
                                             (vector 
                                              (cons 
                                               (cons 
                                                (cons 
                                                 :|JCase| 
                                                 (JGEN::mkFldAccViaClass-2 
                                                  (car pV6) 
                                                  (JGEN::mkTagCId pV51))) 
                                                nil) 
                                               (LIST-SPEC::++-2 
                                                (LIST-SPEC::++-2 
                                                 (cons (car pV9) nil) 
                                                 (svref pV13 0)) 
                                                (cons 
                                                 (cons 
                                                  :|Stmt| 
                                                  (cons :|Break| '(:|None|))) 
                                                 nil))) 
                                              (svref pV13 1) 
                                              (svref pV13 2)) 
                                             (JGEN::concatCollected-2 
                                              (cdr pV12) 
                                              (JGEN::concatCollected-2 
                                               (cdr pV9) 
                                               (cdr pV6))))) 
                                           (error 
                                            "Nonexhaustive match failure in translateCaseCasesToSwitchesAsgF")))) 
                                       (error 
                                        "Nonexhaustive match failure in translateCaseCasesToSwitchesAsgF")))))) 
                               (error 
                                "Nonexhaustive match failure in translateCaseCasesToSwitchesAsgF"))))) 
                       (error 
                        "Nonexhaustive match failure in translateCaseCasesToSwitchesAsgF")))))) 
               (if (eq (car pV39) :|WildPat|) 
                   (return 
                    (let ((pV23 (JGEN::termToExpressionRet-5 tcx pV41 ks ls spc))) 
                      (block 
                       nil 
                       (let ((pV24 (car pV23))) 
                         (return 
                          (cons 
                           (vector 
                            (cons (cons '(:|Default|) nil) (svref pV24 0)) 
                            (svref pV24 1) 
                            (svref pV24 2)) 
                           (cdr pV23)))) 
                       (error 
                        "Nonexhaustive match failure in translateCaseCasesToSwitchesAsgF")))) 
                   (if (eq (car pV39) :|VarPat|) 
                       (return 
                        (let ((pV31 
                               (JGEN::termToExpressionRet-5 
                                (STRINGMAP::insert-3 
                                 tcx 
                                 (car (car (cdr pV39))) 
                                 caseExpr) 
                                pV41 
                                ks 
                                ls 
                                spc))) 
                          (block 
                           nil 
                           (let ((pV32 (car pV31))) 
                             (return 
                              (cons 
                               (vector 
                                (cons (cons '(:|Default|) nil) (svref pV32 0)) 
                                (svref pV32 1) 
                                (svref pV32 2)) 
                               (cdr pV31)))) 
                           (error 
                            "Nonexhaustive match failure in translateCaseCasesToSwitchesAsgF"))))))) 
           (return 
            (progn (JGEN::issueUnsupportedError-2 
                    (METASLANG::patAnn pV39) 
                    (STRING-SPEC::^-2 
                     "pattern not supported: " 
                     (ANNSPECPRINTER::printPattern pV39))) 
                   (cons (vector (cons nil nil) ks ls) JGEN::nothingCollected))) 
           (error 
            "Nonexhaustive match failure in translateCaseCasesToSwitchesAsgF"))))) 
      (labels 
        ((translateCasesToSwitchesRec (cases kr lr hasDefaultLabel?) 
          (block 
           nil 
           (if (null cases) 
               (return 
                (cons 
                 (vector 
                  (if hasDefaultLabel? nil (JGEN::mkDefaultCase-2 cases spc)) 
                  kr 
                  lr) 
                 JGEN::nothingCollected)) 
               (if (consp cases) 
                   (return 
                    (let ((pV61 (translateCaseCaseToSwitch (car cases) kr lr))) 
                      (block 
                       nil 
                       (let ((pV62 (car pV61))) 
                         (let ((pV64 (svref pV62 0))) 
                           (return 
                            (let ((pV55 
                                   (translateCasesToSwitchesRec 
                                    (cdr cases) 
                                    (svref pV62 1) 
                                    (svref pV62 2) 
                                    (if hasDefaultLabel? 
                                        t 
                                        (LIST-SPEC::member-2 
                                         '(:|Default|) 
                                         (car pV64)))))) 
                              (block 
                               nil 
                               (let ((pV56 (car pV55))) 
                                 (return 
                                  (let ((col 
                                         (JGEN::concatCollected-2 
                                          (cdr pV61) 
                                          (cdr pV55)))) 
                                    (cons 
                                     (vector 
                                      (LIST-SPEC::cons-2 pV64 (svref pV56 0)) 
                                      (svref pV56 1) 
                                      (svref pV56 2)) 
                                     col)))) 
                               (error 
                                "Nonexhaustive match failure in translateCaseCasesToSwitchesAsgF")))))) 
                       (error 
                        "Nonexhaustive match failure in translateCaseCasesToSwitchesAsgF")))))) 
           (error 
            "Nonexhaustive match failure in translateCaseCasesToSwitchesAsgF")))) 
        (translateCasesToSwitchesRec cases k0 l0 nil)))))

(defun JGEN::translateCaseAsgF-7 (cId |!fId| tcx term k l spc) 
  (let ((pV27 (JGEN::srtId (JGEN::inferTypeFoldRecords-2 spc term)))) 
    (block 
     nil 
     (return 
      (let ((caseTerm (JGEN::caseTerm term))) 
        (let ((cases (JGEN::caseCases term))) 
          (let ((pV20 
                 (block 
                  nil 
                  (if (eq (car caseTerm) :|Var|) 
                      (return 
                       (JGEN::termToExpression-5 
                        tcx 
                        caseTerm 
                        k 
                        (INTEGER-SPEC::+-2 l 1) 
                        spc))) 
                  (return 
                   (let ((pV9 
                          (JGEN::srtId 
                           (JGEN::inferTypeFoldRecords-2 spc caseTerm)))) 
                     (block 
                      nil 
                      (return 
                       (let ((tgt (JGEN::mkTgt l))) 
                         (let ((pV3 
                                (JGEN::termToExpressionAsgNV-7 
                                 (car pV9) 
                                 tgt 
                                 tcx 
                                 caseTerm 
                                 k 
                                 (INTEGER-SPEC::+-2 l 1) 
                                 spc))) 
                           (block 
                            nil 
                            (let ((pV4 (car pV3))) 
                              (return 
                               (let ((col 
                                      (JGEN::concatCollected-2 
                                       (cdr pV9) 
                                       (cdr pV3)))) 
                                 (cons 
                                  (vector 
                                   (svref pV4 0) 
                                   (JGEN::mkVarJavaExpr tgt) 
                                   (svref pV4 1) 
                                   (svref pV4 2)) 
                                  col)))) 
                            (error 
                             "Nonexhaustive match failure in translateCaseAsgF"))))) 
                      (error "Nonexhaustive match failure in translateCaseAsgF"))))))) 
            (block 
             nil 
             (let ((pV21 (car pV20))) 
               (let ((pV24 (svref pV21 1))) 
                 (return 
                  (let ((pV14 
                         (JGEN::translateCaseCasesToSwitchesAsgF-10 
                          cId 
                          |!fId| 
                          tcx 
                          (car pV27) 
                          pV24 
                          cases 
                          (svref pV21 2) 
                          (svref pV21 3) 
                          l 
                          spc))) 
                    (block 
                     nil 
                     (let ((pV15 (car pV14))) 
                       (return 
                        (let ((switchStatement 
                               (cons 
                                :|Stmt| 
                                (cons 
                                 :|Switch| 
                                 (cons 
                                  (JGEN::mkFldAcc-2 pV24 "tag") 
                                  (svref pV15 0)))))) 
                          (let ((col 
                                 (JGEN::concatCollected-2 
                                  (cdr pV27) 
                                  (JGEN::concatCollected-2 (cdr pV20) (cdr pV14))))) 
                            (cons 
                             (vector 
                              (LIST-SPEC::++-2 
                               (svref pV21 0) 
                               (cons switchStatement nil)) 
                              (svref pV15 1) 
                              (svref pV15 2)) 
                             col))))) 
                     (error "Nonexhaustive match failure in translateCaseAsgF")))))) 
             (error "Nonexhaustive match failure in translateCaseAsgF")))))) 
     (error "Nonexhaustive match failure in translateCaseAsgF"))))

(defun JGEN::translateIfThenElseAsgF-7 (pV21 pV22 pV23 pV24 pV25 pV26 pV27) 
  (block 
   nil 
   (if (eq (car pV24) :|IfThenElse|) 
       (let ((pV28 (cdr pV24))) 
         (return 
          (let ((pV14 
                 (JGEN::termToExpression-5 pV23 (svref pV28 0) pV25 pV26 pV27))) 
            (block 
             nil 
             (let ((pV15 (car pV14))) 
               (return 
                (let ((pV8 
                       (JGEN::termToExpressionAsgF-7 
                        pV21 
                        pV22 
                        pV23 
                        (svref pV28 1) 
                        (svref pV15 2) 
                        (svref pV15 3) 
                        pV27))) 
                  (block 
                   nil 
                   (let ((pV9 (car pV8))) 
                     (return 
                      (let ((pV2 
                             (JGEN::termToExpressionAsgF-7 
                              pV21 
                              pV22 
                              pV23 
                              (svref pV28 2) 
                              (svref pV9 1) 
                              (svref pV9 2) 
                              pV27))) 
                        (block 
                         nil 
                         (let ((pV3 (car pV2))) 
                           (return 
                            (let ((col 
                                   (JGEN::concatCollected-2 
                                    (cdr pV14) 
                                    (JGEN::concatCollected-2 (cdr pV8) (cdr pV2))))) 
                              (cons 
                               (vector 
                                (LIST-SPEC::++-2 
                                 (svref pV15 0) 
                                 (cons 
                                  (JGEN::mkIfStmt-3 
                                   (svref pV15 1) 
                                   (svref pV9 0) 
                                   (svref pV3 0)) 
                                  nil)) 
                                (svref pV3 1) 
                                (svref pV3 2)) 
                               col)))) 
                         (error 
                          "Nonexhaustive match failure in translateIfThenElseAsgF"))))) 
                   (error 
                    "Nonexhaustive match failure in translateIfThenElseAsgF"))))) 
             (error "Nonexhaustive match failure in translateIfThenElseAsgF")))))) 
   (error "Nonexhaustive match failure in translateIfThenElseAsgF")))

(defun JGEN::termToExpressionAsgF-7 (cId |!fId| tcx term k l spc) 
  (if (JGEN::caseTerm? term) 
      (JGEN::translateCaseAsgF-7 cId |!fId| tcx term k l spc) 
      (block 
       nil 
       (if (eq (car term) :|IfThenElse|) 
           (return (JGEN::translateIfThenElseAsgF-7 cId |!fId| tcx term k l spc))) 
       (return 
        (let ((pV3 (JGEN::termToExpression-5 tcx term k l spc))) 
          (block 
           nil 
           (let ((pV4 (car pV3))) 
             (return 
              (cons 
               (vector 
                (LIST-SPEC::++-2 
                 (svref pV4 0) 
                 (cons (JGEN::mkFldAssn-3 cId |!fId| (svref pV4 1)) nil)) 
                (svref pV4 2) 
                (svref pV4 3)) 
               (cdr pV3)))) 
           (error "Nonexhaustive match failure in termToExpressionAsgF")))))))

(defun JGEN::termToExpressionAsgF (x) 
  (JGEN::termToExpressionAsgF-7 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4) 
   (svref x 5) 
   (svref x 6)))

(defun JGEN::termToExpressionAsgNV (x) 
  (JGEN::termToExpressionAsgNV-7 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4) 
   (svref x 5) 
   (svref x 6)))

(defun JGEN::termToExpressionAsgV (x) 
  (JGEN::termToExpressionAsgV-6 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4) 
   (svref x 5)))

(defun JGEN::termToExpressionRet (x) 
  (JGEN::termToExpressionRet-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun JGEN::termToExpression_internal (x) 
  (JGEN::termToExpression_internal-6 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4) 
   (svref x 5)))

(defun JGEN::translateApplyToExpr (x) 
  (JGEN::translateApplyToExpr-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun JGEN::translateBaseApplToExpr (x) 
  (JGEN::translateBaseApplToExpr-7 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4) 
   (svref x 5) 
   (svref x 6)))

(defun JGEN::translateBaseArgsApplToExpr (x) 
  (JGEN::translateBaseArgsApplToExpr-7 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4) 
   (svref x 5) 
   (svref x 6)))

(defun JGEN::translateCaseAsgF (x) 
  (JGEN::translateCaseAsgF-7 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4) 
   (svref x 5) 
   (svref x 6)))

(defun JGEN::translateCaseAsgNV (x) 
  (JGEN::translateCaseAsgNV-7 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4) 
   (svref x 5) 
   (svref x 6)))

(defun JGEN::translateCaseAsgV (x) 
  (JGEN::translateCaseAsgV-6 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4) 
   (svref x 5)))

(defun JGEN::translateCaseCasesToSwitches (x) 
  (JGEN::translateCaseCasesToSwitches-9 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4) 
   (svref x 5) 
   (svref x 6) 
   (svref x 7) 
   (svref x 8)))

(defun JGEN::translateCaseCasesToSwitchesAsgF (x) 
  (JGEN::translateCaseCasesToSwitchesAsgF-10 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4) 
   (svref x 5) 
   (svref x 6) 
   (svref x 7) 
   (svref x 8) 
   (svref x 9)))

(defun JGEN::translateCaseCasesToSwitchesAsgNV (x) 
  (JGEN::translateCaseCasesToSwitchesAsgNV-9 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4) 
   (svref x 5) 
   (svref x 6) 
   (svref x 7) 
   (svref x 8)))

(defun JGEN::translateCaseCasesToSwitchesAsgV (x) 
  (JGEN::translateCaseCasesToSwitchesAsgV-9 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4) 
   (svref x 5) 
   (svref x 6) 
   (svref x 7) 
   (svref x 8)))

(defun JGEN::translateCaseCasesToSwitchesRet (x) 
  (JGEN::translateCaseCasesToSwitchesRet-8 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4) 
   (svref x 5) 
   (svref x 6) 
   (svref x 7)))

(defun JGEN::translateCaseRet (x) 
  (JGEN::translateCaseRet-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun JGEN::translateCaseToExpr (x) 
  (JGEN::translateCaseToExpr-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun JGEN::translateChooseToExpr (x) 
  (JGEN::translateChooseToExpr-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun JGEN::translateConstructToExpr (x) 
  (JGEN::translateConstructToExpr-7 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4) 
   (svref x 5) 
   (svref x 6)))

(defun JGEN::translateEqualsToExpr (x) 
  (JGEN::translateEqualsToExpr-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun JGEN::translateIfThenElseAsgF (x) 
  (JGEN::translateIfThenElseAsgF-7 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4) 
   (svref x 5) 
   (svref x 6)))

(defun JGEN::translateIfThenElseAsgNV (x) 
  (JGEN::translateIfThenElseAsgNV-7 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4) 
   (svref x 5) 
   (svref x 6)))

(defun JGEN::translateIfThenElseAsgV (x) 
  (JGEN::translateIfThenElseAsgV-6 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4) 
   (svref x 5)))

(defun JGEN::translateIfThenElseRet (x) 
  (JGEN::translateIfThenElseRet-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun JGEN::translateIfThenElseToExpr (x) 
  (JGEN::translateIfThenElseToExpr-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun JGEN::translateIfThenElseToStatement (x) 
  (JGEN::translateIfThenElseToStatement-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun JGEN::translateLambdaTerm (x) 
  (JGEN::translateLambdaTerm-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun JGEN::translateLambdaToExpr (x) 
  (JGEN::translateLambdaToExpr-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun JGEN::translateLetRet (x) 
  (JGEN::translateLetRet-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun JGEN::translateLetToExpr (x) 
  (JGEN::translateLetToExpr-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun JGEN::translateOtherTermApply (x) 
  (JGEN::translateOtherTermApply-6 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4) 
   (svref x 5)))

(defun JGEN::translatePrimBaseApplToExpr (x) 
  (JGEN::translatePrimBaseApplToExpr-6 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4) 
   (svref x 5)))

(defun JGEN::translateProjectToExpr (x) 
  (JGEN::translateProjectToExpr-6 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4) 
   (svref x 5)))

(defun JGEN::translateQuotientToExpr (x) 
  (JGEN::translateQuotientToExpr-6 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4) 
   (svref x 5)))

(defun JGEN::translateRecordToExpr (x) 
  (JGEN::translateRecordToExpr-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun JGEN::translateRelaxToExpr (x) 
  (JGEN::translateRelaxToExpr-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun JGEN::translateRestrictToExpr (x) 
  (JGEN::translateRestrictToExpr-6 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4) 
   (svref x 5)))

(defun JGEN::translateStandAloneOpToExpr (x) 
  (JGEN::translateStandAloneOpToExpr-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun JGEN::translateTermsToExpressions (x) 
  (JGEN::translateTermsToExpressions-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun JGEN::translateUserApplToExpr (x) 
  (JGEN::translateUserApplToExpr-7 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4) 
   (svref x 5) 
   (svref x 6)))

(defun JGEN::unfoldToCoProduct-2 (spc srt) 
  (block 
   nil 
   (if (eq (car srt) :|CoProduct|) 
       (return srt) 
       (if (eq (car srt) :|Subsort|) 
           (return (JGEN::unfoldToCoProduct-2 spc (svref (cdr srt) 0))) 
           (if (eq (car srt) :|Quotient|) 
               (return (JGEN::unfoldToCoProduct-2 spc (svref (cdr srt) 0)))))) 
   (return 
    (let ((usrt (SPECENVIRONMENT::unfoldBase-2 spc srt))) 
      (if (slang-built-in::slang-term-equals-2 usrt srt) 
          srt 
          (JGEN::unfoldToCoProduct-2 spc usrt))))))

(defun JGEN::unfoldToCoProduct (x) (JGEN::unfoldToCoProduct-2 (car x) (cdr x)))

(defun JGEN::unfoldToSubsort (x) (JGEN::unfoldToSubsort-2 (car x) (cdr x)))

(defun JGEN::unsupportedInRet-4 (pos k l msg) 
  (progn (JGEN::issueUnsupportedError-2 pos msg) (JGEN::errorResultExpRet-2 k l)))


(defun JGEN::unsupportedInRet (x) 
  (JGEN::unsupportedInRet-4 (svref x 0) (svref x 1) (svref x 2) (svref x 3)))

(defun JGEN::unsupportedInSort (x) 
  (JGEN::unsupportedInSort-4 (svref x 0) (svref x 1) (svref x 2) (svref x 3)))

(defun JGEN::unsupportedInTerm (x) 
  (JGEN::unsupportedInTerm-4 (svref x 0) (svref x 1) (svref x 2) (svref x 3)))

(defun JGEN::unsupportedInTermRet (x) 
  (JGEN::unsupportedInTermRet-4 (svref x 0) (svref x 1) (svref x 2) (svref x 3)))


(defun JGEN::userType? (x) (JGEN::userType?-2 (car x) (cdr x)))

(defun JGEN::userTypeToClsDecls (x) 
  (JGEN::userTypeToClsDecls-2 (car x) (cdr x)))

(defun JGEN::userVar? (x) (JGEN::userVar?-2 (car x) (cdr x)))

(defun JGEN::ut (x) (JGEN::ut-2 (car x) (cdr x)))

(defun JGEN::ut_internal (x1) #'(lambda (x2) (JGEN::ut_internal-1-1 x1 x2)))

(defun JGEN::utlist-2 (spc srts) 
  (JGEN::utlist_internal-1-1 
   #'(lambda (srt) (JGEN::userType?-2 spc srt)) 
   srts))

(defun JGEN::utlist (x) (JGEN::utlist-2 (car x) (cdr x)))

(defun JGEN::utlist_internal (x1) 
  #'(lambda (x2) (JGEN::utlist_internal-1-1 x1 x2)))

(defun JGEN::varToFormalParam-2 (x0 x1) (JGEN::varToFormalParam (cons x0 x1)))

(defun JGEN::warnNoCode (x) 
  (JGEN::warnNoCode-3 (svref x 0) (svref x 1) (svref x 2)))

(defun LAMBDALIFT::abstractName (x) 
  (LAMBDALIFT::abstractName-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun LAMBDALIFT::actualFreeVars (x) 
  (LAMBDALIFT::actualFreeVars-2 (car x) (cdr x)))

(defun LAMBDALIFT::addNewOp (x) 
  (LAMBDALIFT::addNewOp-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun LAMBDALIFT::fromAny (ignore) 
  (declare (ignore ignore)) 
  (LAMBDALIFT::fromAny-0))

(defun LAMBDALIFT::getSpecEnv-5 (x0 x1 x2 x3 x4) 
  (LAMBDALIFT::getSpecEnv (vector x0 x1 x2 x3 x4)))

(defun LAMBDALIFT::insertOper (x) (LAMBDALIFT::insertOper-2 (car x) (cdr x)))

(defun MS::findField (x) (MS::findField-2 (car x) (cdr x)))

(defun PROVER::removePatternLambda (term) 
  (cons (vector nil (MS::mkTrue-0) term) nil))

(defun PROVER::removePatternSortedTerm (term) 
  (cons (vector nil (MS::mkTrue-0) term) nil))

(defun SIMPLIFY::makeSubstFromRecord (x) 
  (SIMPLIFY::makeSubstFromRecord-2 (car x) (cdr x)))

(defun SIMPLIFY::simplifyCase (x1) 
  #'(lambda (x2) (SIMPLIFY::simplifyCase-1-1 x1 x2)))

(defun SIMPLIFY::simplifyCase-4 (x0 x1 x2 x3) 
  (SIMPLIFY::simplifyCase (vector x0 x1 x2 x3)))

(defun SNARK::mkSnarkTerm-5 (context sp dpn vars term) 
  (block 
   nil 
   (if (eq (car term) :|Apply|) 
       (let ((pV16 (cdr term))) 
         (let ((pV36 (svref pV16 0))) 
           (if (eq (car pV36) :|Fun|) 
               (return 
                (SNARK::mkSnarkTermApp-6 
                 context 
                 sp 
                 dpn 
                 vars 
                 (svref (cdr pV36) 0) 
                 (svref pV16 1)))))) 
       (if (eq (car term) :|IfThenElse|) 
           (let ((pV15 (cdr term))) 
             (return 
              (LISP-SPEC::|!list| 
               (cons 
                (LISP-SPEC::symbol-2 "SNARK" "IF") 
                (cons 
                 (SNARK::mkSnarkTerm-5 context sp dpn vars (svref pV15 0)) 
                 (cons 
                  (SNARK::mkSnarkTerm-5 context sp dpn vars (svref pV15 1)) 
                  (cons 
                   (SNARK::mkSnarkTerm-5 context sp dpn vars (svref pV15 2)) 
                   nil))))))) 
           (if (eq (car term) :|Fun|) 
               (let ((pV19 (svref (cdr term) 0))) 
                 (if (eq (car pV19) :|Op|) 
                     (let ((pV27 (car (cdr pV19)))) 
                       (if (eq (car pV27) :|Qualified|) 
                           (let ((pV29 (cdr pV27))) 
                             (return 
                              (LISP-SPEC::symbol-2 
                               "SNARK" 
                               (SNARK::mkSnarkName-2 (car pV29) (cdr pV29))))))) 
                     (if (eq (car pV19) :|Nat|) 
                         (return (LISP-SPEC::|!nat| (cdr pV19))) 
                         (if (eq (car pV19) :|Embed|) 
                             (return 
                              (LISP-SPEC::symbol-2 
                               "SNARK" 
                               (SNARK::mkSnarkName-2 
                                "" 
                                (STRING-SPEC::^-2 "embed_" (car (cdr pV19)))))))))) 
               (if (eq (car term) :|Var|) 
                   (return (SNARK::snarkVar (car (cdr term)))))))) 
   (return (SNARK::mkNewSnarkTerm-2 context term))))

(defun SPECTOLISP::specId (id) 
  (let ((id 
         (STRING-SPEC::translate-1-1 
          #'(lambda (pV1) 
             (block 
              nil 
              (if (eq #\| pV1) 
                  (return "\\|") 
                  (if (eq #\` pV1) 
                      (return "\\`") 
                      (if (eq #\\ pV1) (return "\\\\")))) 
              (return (CHAR-SPEC::toString pV1)))) 
          id))) 
    (let ((|!ID| (STRING-SPEC::map-1-1 #'CHAR-SPEC::toUpperCase id))) 
      (if (cl:or 
           (SPECTOLISP::isLispString |!ID|) 
           (eq (STRING-SPEC::sub-2 id 0) #\!)) 
          (STRING-SPEC::^-2 (STRING-SPEC::^-2 "|!" id) "|") 
          (if (labels 
                ((exists--local-0 (l) 
                  (block 
                   nil 
                   (if (null l) 
                       (return nil) 
                       (if (consp l) 
                           (return 
                            (if (eq (car l) #\:) t (exists--local-0 (cdr l)))))) 
                   (error "Nonexhaustive match failure in specId")))) 
                (exists--local-0 (STRING-SPEC::explode id))) 
              (STRING-SPEC::^-2 (STRING-SPEC::^-2 "|" id) "|") 
              (SPECTOLISP::lookupSpecId-2 id |!ID|))))))

(defparameter SNARK::snarkBaseDecls 
  (cons 
   (LISP-SPEC::|!list| 
    (cons 
     SNARK::declare_predicate 
     (cons 
      (LISP-SPEC::|!quote| (LISP-SPEC::symbol-2 "SNARK" "embed?")) 
      (cons (LISP-SPEC::|!nat| 2) nil)))) 
   (cons 
    (LISP-SPEC::|!list| 
     (cons 
      SNARK::declare_constant 
      (cons 
       (LISP-SPEC::|!quote| (LISP-SPEC::symbol-2 "SNARK" "embed_Nil")) 
       (cons 
        (LISP-SPEC::symbol-2 "KEYWORD" "SORT") 
        (cons (LISP-SPEC::|!quote| (LISP-SPEC::symbol-2 "SNARK" "List")) nil))))) 
    nil)))

(defun SNARK::snarkConjectureRemovePattern-3 (pV1 pV2 pV3) 
  (block 
   nil 
   (return 
    (LISP-SPEC::|!list| 
     (cons 
      SNARK::snark_prove 
      (cons 
       (LISP-SPEC::|!quote| 
        (SNARK::mkSnarkFmla-6 
         pV1 
         pV2 
         "SNARK" 
         STRINGSET::empty 
         nil 
         (MS::mkConj (PROVER::proverPattern (svref pV3 3))))) 
       (cons 
        (LISP-SPEC::symbol-2 "KEYWORD" "NAME") 
        (cons (LISP-SPEC::symbol-2 "KEYWORD" (svref pV3 1)) nil)))))) 
   (error "Nonexhaustive match failure in snarkConjectureRemovePattern")))

(defun SNARK::snarkConjectureRemovePattern (x) 
  (SNARK::snarkConjectureRemovePattern-3 (svref x 0) (svref x 1) (svref x 2)))

(defun SNARK::snarkPropertiesFromProperty-3 (pV5 pV6 pV7) 
  (block 
   nil 
   (let ((pV9 (svref pV7 1))) 
     (return 
      (let ((liftedFmlas (PROVER::proverPattern (svref pV7 3)))) 
        (labels 
          ((map--local-0 (l) 
            (block 
             nil 
             (if (null l) 
                 (return nil) 
                 (if (consp l) 
                     (return 
                      (cons 
                       (LISP-SPEC::|!list| 
                        (cons 
                         SNARK::snark_assert 
                         (cons 
                          (LISP-SPEC::|!quote| 
                           (SNARK::mkSnarkFmla-6 
                            pV5 
                            pV6 
                            "SNARK" 
                            STRINGSET::empty 
                            nil 
                            (car l))) 
                          (cons 
                           (LISP-SPEC::symbol-2 "KEYWORD" "NAME") 
                           (cons (LISP-SPEC::symbol-2 "KEYWORD" pV9) nil))))) 
                       (map--local-0 (cdr l)))))) 
             (error "Nonexhaustive match failure in snarkPropertiesFromProperty")))) 
          (map--local-0 liftedFmlas))))) 
   (error "Nonexhaustive match failure in snarkPropertiesFromProperty")))

(defun SNARK::snarkPropertiesFromProperty (x) 
  (SNARK::snarkPropertiesFromProperty-3 (svref x 0) (svref x 1) (svref x 2)))

(defun SPECCALC::mergeOpInfo-1-1-1-1 (newPOpInfo optOldPOpInfo |!position| x-3) 
  (block 
   nil 
   (if (eq (car optOldPOpInfo) :|None|) 
       (return (SPECCALC::return-1-1 newPOpInfo x-3))) 
   (let ((pV44 (svref newPOpInfo 1))
         (pV45 (svref newPOpInfo 2))
         (pV46 (svref newPOpInfo 3))) 
     (if (eq (car optOldPOpInfo) :|Some|) 
         (let ((pV47 (cdr optOldPOpInfo))) 
           (let ((pV50 (svref pV47 2))
                 (pV51 (svref pV47 3))) 
             (return 
              (let ((op_names 
                     (LISTUTILITIES::listUnion-2 
                      (svref pV47 0) 
                      (svref newPOpInfo 0)))) 
                (if (BOOLEAN-SPEC::~ 
                     (slang-built-in::slang-term-equals-2 pV44 (svref pV47 1))) 
                    (SPECCALC::raise-1-1 
                     (cons 
                      :|SpecError| 
                      (cons 
                       |!position| 
                       (STRING-SPEC::^-2 
                        (STRING-SPEC::^-2 
                         "Merged versions of Op " 
                         (SPECCALC::printAliases op_names)) 
                        " have different fixity"))) 
                     x-3) 
                    (if (BOOLEAN-SPEC::~ 
                         (block 
                          nil 
                          (if (null (car pV50)) 
                              (if (eq (car (cdr pV50)) :|MetaTyVar|) (return t))) 
                          (if (null (car pV45)) 
                              (if (eq (car (cdr pV45)) :|MetaTyVar|) (return t))) 
                          (return 
                           (progn (if (BOOLEAN-SPEC::~ 
                                       (SPECCALC::equivSortScheme?-1-1 
                                        ANNSPEC::emptySpec 
                                        (cons pV50 pV45))) 
                                      (STRING-SPEC::toScreen 
                                       (STRING-SPEC::^-2 
                                        (STRING-SPEC::^-2 
                                         (STRING-SPEC::^-2 
                                          (STRING-SPEC::^-2 
                                           (STRING-SPEC::^-2 
                                            (STRING-SPEC::^-2 
                                             (STRING-SPEC::^-2 
                                              "Merged versions of op " 
                                              (SPECCALC::printAliases op_names)) 
                                             "have different sorts:") 
                                            "
 ") 
                                           (ANNSPECPRINTER::printSortScheme pV45)) 
                                          "
 ") 
                                         (ANNSPECPRINTER::printSortScheme pV50)) 
                                        "
")) 
                                      nil) 
                                  (slang-built-in::slang-term-equals-2 
                                   (car pV45) 
                                   (car pV50)))) 
                          (return t))) 
                        (SPECCALC::raise-1-1 
                         (cons 
                          :|SpecError| 
                          (cons 
                           |!position| 
                           (STRING-SPEC::^-2 
                            (STRING-SPEC::^-2 
                             (STRING-SPEC::^-2 
                              (STRING-SPEC::^-2 
                               (STRING-SPEC::^-2 
                                (STRING-SPEC::^-2 
                                 "Merged versions of Op " 
                                 (SPECCALC::printAliases op_names)) 
                                " have incompatible sorts:") 
                               "
 ") 
                              (ANNSPECPRINTER::printSortScheme pV45)) 
                             "
 ") 
                            (ANNSPECPRINTER::printSortScheme pV50)))) 
                         x-3) 
                        (block 
                         nil 
                         (if (null pV51) 
                             (if (null pV46) 
                                 (return 
                                  (SPECCALC::return-1-1 
                                   (vector op_names pV44 pV45 nil) 
                                   x-3)) 
                                 (if (consp pV46) 
                                     (return 
                                      (SPECCALC::return-1-1 
                                       (vector op_names pV44 pV45 pV46) 
                                       x-3)))) 
                             (if (consp pV51) 
                                 (if (null pV46) 
                                     (return 
                                      (SPECCALC::return-1-1 
                                       (vector op_names pV44 pV45 pV51) 
                                       x-3))))) 
                         (return 
                          (SPECCALC::return-1-1 
                           (vector 
                            op_names 
                            pV44 
                            pV45 
                            (labels 
                              ((foldl--local-0 (base l) 
                                (block 
                                 nil 
                                 (if (null l) 
                                     (return base) 
                                     (if (consp l) 
                                         (let ((pV31 (car l))) 
                                           (return 
                                            (foldl--local-0 
                                             (if (labels 
                                                   ((exists--local-0 (l1) 
                                                     (block 
                                                      nil 
                                                      (if (null l1) 
                                                          (return nil) 
                                                          (if (consp l1) 
                                                              (return 
                                                               (if (METASLANG::equalTerm?-2 
                                                                    (cdr pV31) 
                                                                    (cdr 
                                                                     (car l1))) 
                                                                   t 
                                                                   (exists--local-0 
                                                                    (cdr l1)))))) 
                                                      (error 
                                                       "Nonexhaustive match failure in mergeOpInfo")))) 
                                                   (exists--local-0 base)) 
                                                 base 
                                                 (LIST-SPEC::cons-2 pV31 base)) 
                                             (cdr l)))))) 
                                 (error 
                                  "Nonexhaustive match failure in mergeOpInfo")))) 
                              (foldl--local-0 pV51 pV46))) 
                           x-3))))))))))) 
   (error "Nonexhaustive match failure in mergeOpInfo")))

(defun SPECCALC::attemptSubstitution (x1) 
  #'(lambda (x2) 
     #'(lambda (x3) 
        #'(lambda (x4) 
           #'(lambda (x5) 
              (SPECCALC::attemptSubstitution-1-1-1-1-1 x1 x2 x3 x4 x5))))))

(defun SPECCALC::attemptSubstitution-4 (x0 x1 x2 x3) 
  (SPECCALC::attemptSubstitution (vector x0 x1 x2 x3)))

(defun SPECCALC::auxTranslateSpec (x1) 
  #'(lambda (x2) 
     #'(lambda (x3) 
        #'(lambda (x4) (SPECCALC::auxTranslateSpec-1-1-1-1 x1 x2 x3 x4)))))

(defun SPECCALC::auxTranslateSpec-4 (x0 x1 x2 x3) 
  (SPECCALC::auxTranslateSpec (vector x0 x1 x2 x3)))

(defun SPECCALC::undefinedGlobalVariable (name) 
  (cons :|UndefinedGlobalVar| name))

(defun SPECCALC::readGlobalVar-1-1 (name x-1) 
  (let ((pV1 (MONADICSTATEINTERNAL::readGlobalVar name))) 
    (block 
     nil 
     (if (eq (car pV1) :|Some|) 
         (return (SPECCALC::return-1-1 (cdr pV1) x-1)) 
         (if (eq (car pV1) :|None|) 
             (return 
              (SPECCALC::raise-1-1 (SPECCALC::undefinedGlobalVariable name) x-1)))) 
     (error "Nonexhaustive match failure in readGlobalVar"))))

(defun SPECCALC::getGlobalContext-0 () 
  (SPECCALC::readGlobalVar-1-1 "GlobalContext" nil))

(defun SPECCALC::getGlobalContext (ignore) 
  (declare (ignore ignore)) 
  (SPECCALC::getGlobalContext-0))

(defun SPECCALC::writeGlobalVar-1-1 (!x1 x-1) 
  (let ((name (car !x1))) 
    (if (MONADICSTATEINTERNAL::writeGlobalVar-2 name (cdr !x1)) 
        (SPECCALC::return-1-1 nil x-1) 
        (SPECCALC::raise-1-1 (SPECCALC::undefinedGlobalVariable name) x-1))))

(defun SPECCALC::setGlobalContext-1-1 (globalContext x-1) 
  (SPECCALC::writeGlobalVar-1-1 (cons "GlobalContext" globalContext) x-1))

(defun SPECCALC::bindInGlobalContext-1-1-1 (unitId value x-2) 
  (let ((x0 (SPECCALC::getGlobalContext x-2))) 
    (let ((pV1 (car x0))
          (pV2 (cdr x0))) 
      (block 
       nil 
       (if (eq (car pV1) :|Ok|) 
           (return 
            (SPECCALC::setGlobalContext-1-1 
             (POLYMAP::update-1-1-1 (cdr pV1) unitId value) 
             pV2)) 
           (if (eq (car pV1) :|Exception|) 
               (return (cons (cons :|Exception| (cdr pV1)) pV2)))) 
       (error "Nonexhaustive match failure in bindInGlobalContext")))))

(defun SPECCALC::bindInGlobalContext (x1) 
  #'(lambda (x2) 
     #'(lambda (x3) (SPECCALC::bindInGlobalContext-1-1-1 x1 x2 x3))))

(defun SPECCALC::bindInGlobalContext-2 (x0 x1) 
  (SPECCALC::bindInGlobalContext (cons x0 x1)))

(defun SPECCALC::bindInLocalContext-1-1-1 (relativeUnitId value x-2) 
  (let ((x0 (SPECCALC::readGlobalVar-1-1 "LocalContext" x-2))) 
    (let ((pV1 (car x0))
          (pV2 (cdr x0))) 
      (block 
       nil 
       (if (eq (car pV1) :|Ok|) 
           (return 
            (SPECCALC::writeGlobalVar-1-1 
             (cons 
              "LocalContext" 
              (POLYMAP::update-1-1-1 (cdr pV1) relativeUnitId value)) 
             pV2)) 
           (if (eq (car pV1) :|Exception|) 
               (return (cons (cons :|Exception| (cdr pV1)) pV2)))) 
       (error "Nonexhaustive match failure in bindInLocalContext")))))

(defun SPECCALC::bindInLocalContext (x1) 
  #'(lambda (x2) 
     #'(lambda (x3) (SPECCALC::bindInLocalContext-1-1-1 x1 x2 x3))))

(defun SPECCALC::completeMorphismMap-1-1-1-1-1
 (trans_map dom_map cod_map |!position| x-4) 
  (labels 
    ((compl (qualifier id pV1 new_map) 
      (declare (ignore pV1)) 
      (let ((pV7 (ANNSPEC::findAQualifierMap-3 trans_map qualifier id))) 
        (block 
         nil 
         (if (eq (car pV7) :|Some|) 
             (return 
              (SPECCALC::|!return| 
               (POLYMAP::update-1-1-1 
                new_map 
                (cons :|Qualified| (cons qualifier id)) 
                (cdr pV7))))) 
         (return 
          (let ((pV5 (ANNSPEC::findAQualifierMap-3 cod_map qualifier id))) 
            (block 
             nil 
             (if (eq (car pV5) :|Some|) 
                 (return 
                  (SPECCALC::|!return| 
                   (POLYMAP::update-1-1-1 
                    new_map 
                    (cons :|Qualified| (cons qualifier id)) 
                    (cons :|Qualified| (cons qualifier id)))))) 
             (return 
              (SPECCALC::raise 
               (cons 
                :|MorphError| 
                (cons 
                 |!position| 
                 (STRING-SPEC::^-2 
                  (STRING-SPEC::^-2 
                   (STRING-SPEC::^-2 "No mapping for " qualifier) 
                   ".") 
                  id)))))))))))) 
    (ANNSPEC::foldOverQualifierMap-1-1-1-1 
     #'(lambda (pV) (compl (svref pV 0) (svref pV 1) (svref pV 2) (svref pV 3))) 
     POLYMAP::emptyMap 
     dom_map 
     x-4)))

(defun SPECCALC::buildSpecMorphism-1-1-1-1-1
 (domSpec codSpec pV |!position| x-4) 
  (let ((x0 
         (SPECCALC::completeMorphismMap-1-1-1-1-1 
          (car pV) 
          (svref domSpec 1) 
          (svref codSpec 1) 
          |!position| 
          x-4))) 
    (let ((pV5 (car x0))
          (pV6 (cdr x0))) 
      (block 
       nil 
       (if (eq (car pV5) :|Ok|) 
           (return 
            (let ((x0 
                   (SPECCALC::completeMorphismMap-1-1-1-1-1 
                    (cdr pV) 
                    (svref domSpec 3) 
                    (svref codSpec 3) 
                    |!position| 
                    pV6))) 
              (let ((pV1 (car x0))
                    (pV2 (cdr x0))) 
                (block 
                 nil 
                 (if (eq (car pV1) :|Ok|) 
                     (return 
                      (SPECCALC::return-1-1 
                       (vector codSpec domSpec (cdr pV5) (cdr pV1)) 
                       pV2)) 
                     (if (eq (car pV1) :|Exception|) 
                         (return (cons (cons :|Exception| (cdr pV1)) pV2)))) 
                 (error "Nonexhaustive match failure in buildSpecMorphism"))))) 
           (if (eq (car pV5) :|Exception|) 
               (return (cons (cons :|Exception| (cdr pV5)) pV6)))) 
       (error "Nonexhaustive match failure in buildSpecMorphism")))))

(defun SPECCALC::buildSpecMorphism (x1) 
  #'(lambda (x2) 
     #'(lambda (x3) 
        #'(lambda (x4) 
           #'(lambda (x5) 
              (SPECCALC::buildSpecMorphism-1-1-1-1-1 x1 x2 x3 x4 x5))))))

(defun SPECCALC::buildSpecMorphism-4 (x0 x1 x2 x3) 
  (SPECCALC::buildSpecMorphism (vector x0 x1 x2 x3)))

(defun SPECCALC::catch-1-1-1 (f handler state) 
  (let ((x0 (funcall f state))) 
    (let ((pV1 (car x0))
          (pV2 (cdr x0))) 
      (block 
       nil 
       (if (eq (car pV1) :|Ok|) 
           (return (cons (cons :|Ok| (cdr pV1)) pV2)) 
           (if (eq (car pV1) :|Exception|) 
               (return (funcall (funcall handler (cdr pV1)) pV2)))) 
       (error "Nonexhaustive match failure in catch")))))

(defun SPECCALC::checkForMultipleDefs-1-1 (decls x-1) 
  (let ((x0 
         (labels 
           ((foldl--local-0 (base l) 
             (block 
              nil 
              (if (null l) 
                  (return base) 
                  (if (consp l) 
                      (let ((pV21 (car l))) 
                        (return 
                         (foldl--local-0 
                          (block 
                           nil 
                           (let ((pV15 (car pV21))) 
                             (let ((pV17 (car base))) 
                               (return 
                                (block 
                                 nil 
                                 (if (eq (car (cdr base)) :|None|) 
                                     (return 
                                      (if (LIST-SPEC::member-2 pV15 pV17) 
                                          (cons 
                                           pV17 
                                           (cons :|Some| (cons pV15 (cdr pV21)))) 
                                          (cons 
                                           (LIST-SPEC::cons-2 pV15 pV17) 
                                           '(:|None|))))) 
                                 (return base))))) 
                           (error 
                            "Nonexhaustive match failure in checkForMultipleDefs")) 
                          (cdr l)))))) 
              (error "Nonexhaustive match failure in checkForMultipleDefs")))) 
           (foldl--local-0 (cons nil '(:|None|)) decls)))) 
    (let ((pV5 (cdr x0))) 
      (block 
       nil 
       (if (eq (car pV5) :|Some|) 
           (let ((pV6 (cdr pV5))) 
             (return 
              (SPECCALC::raise-1-1 
               (cons 
                :|SpecError| 
                (cons 
                 (cdr (cdr pV6)) 
                 (STRING-SPEC::^-2 
                  (STRING-SPEC::^-2 "Name \"" (car pV6)) 
                  "\" defined twice in file."))) 
               x-1)))) 
       (return (SPECCALC::return-1-1 nil x-1))))))

(defun SPECCALC::checkForMultipleDefs (x1) 
  #'(lambda (x2) (SPECCALC::checkForMultipleDefs-1-1 x1 x2)))

(defun SPECCALC::getCurrentUnitId-0 () 
  (let ((x0 (SPECCALC::readGlobalVar-1-1 "CurrentUnitId" nil))) 
    (let ((pV4 (cdr x0))
          (pV3 (car x0))) 
      (block 
       nil 
       (if (eq (car pV3) :|Ok|) 
           (let ((pV6 (cdr pV3))) 
             (return 
              (block 
               nil 
               (if (eq (car pV6) :|None|) 
                   (return 
                    (SPECCALC::raise-1-1 (cons :|Fail| "No current Unit Id") pV4)) 
                   (if (eq (car pV6) :|Some|) 
                       (return (SPECCALC::return-1-1 (cdr pV6) pV4)))) 
               (error "Nonexhaustive match failure in getCurrentUnitId")))) 
           (if (eq (car pV3) :|Exception|) 
               (return (cons (cons :|Exception| (cdr pV3)) pV4)))) 
       (error "Nonexhaustive match failure in getCurrentUnitId")))))

(defun SPECCALC::getCurrentUID-0 () (SPECCALC::getCurrentUnitId-0))

(defun SPECCALC::getCurrentUID (ignore) 
  (declare (ignore ignore)) 
  (SPECCALC::getCurrentUID-0))

(defun SPECCALC::mapM-1-1-1 (f l x-2) 
  (block 
   nil 
   (if (null l) 
       (return (SPECCALC::return-1-1 nil x-2)) 
       (if (consp l) 
           (return 
            (let ((x0 (funcall (funcall f (car l)) x-2))) 
              (let ((pV5 (car x0))
                    (pV6 (cdr x0))) 
                (block 
                 nil 
                 (if (eq (car pV5) :|Ok|) 
                     (return 
                      (let ((x0 (SPECCALC::mapM-1-1-1 f (cdr l) pV6))) 
                        (let ((pV1 (car x0))
                              (pV2 (cdr x0))) 
                          (block 
                           nil 
                           (if (eq (car pV1) :|Ok|) 
                               (return 
                                (SPECCALC::return-1-1 
                                 (cons (cdr pV5) (cdr pV1)) 
                                 pV2)) 
                               (if (eq (car pV1) :|Exception|) 
                                   (return 
                                    (cons (cons :|Exception| (cdr pV1)) pV2)))) 
                           (error "Nonexhaustive match failure in mapM"))))) 
                     (if (eq (car pV5) :|Exception|) 
                         (return (cons (cons :|Exception| (cdr pV5)) pV6)))) 
                 (error "Nonexhaustive match failure in mapM"))))))) 
   (error "Nonexhaustive match failure in mapM")))

(defun SPECCALC::pathStringToCanonicalUID (str) 
  (let ((str 
         (STRING-SPEC::map-1-1 
          #'(lambda (pV1) 
             (block nil (if (eq #\\ pV1) (return #\/)) (return pV1))) 
          str))) 
    (let ((absoluteString 
           (let ((pV4 (STRING-SPEC::explode str))) 
             (block 
              nil 
              (if (consp pV4) 
                  (let ((pV7 (cdr pV4))
                        (pV6 (car pV4))) 
                    (progn (if (eq #\/ pV6) (return str)) 
                           (if (consp pV7) 
                               (if (eq #\: (car pV7)) 
                                   (return 
                                    (STRING-SPEC::^-2 
                                     (STRING-SPEC::^-2 
                                      (CHAR-SPEC::toString 
                                       (CHAR-SPEC::toUpperCase pV6)) 
                                      ":") 
                                     (STRING-SPEC::implode (cdr pV7))))))))) 
              (return 
               (STRING-SPEC::++-2 
                (STRING-SPEC::++-2 (IO-SPEC::getCurrentDirectory-0) "/") 
                str)))))) 
      (cons '(:|None|) (SPECCALC::splitStringAtChar-1-1 #\/ absoluteString)))))

(defun SPECCALC::pathToCanonicalUID-1-1 (str x-1) 
  (SPECCALC::return-1-1 (SPECCALC::pathStringToCanonicalUID str) x-1))

(defun SPECCALC::pathToCanonicalUID (x1) 
  #'(lambda (x2) (SPECCALC::pathToCanonicalUID-1-1 x1 x2)))

(defparameter SPECCALC::specPathSeparator 
  (if SYSTEM-SPEC::msWindowsSystem? #\; #\:))

(defun SPECCALC::getSpecPath-0 () 
  (let ((specware4Dirs 
         (let ((pV1 (SYSTEM-SPEC::getEnv "SPECWARE4"))) 
           (block 
            nil 
            (if (eq (car pV1) :|Some|) 
                (return (cons (cdr pV1) nil)) 
                (if (eq (car pV1) :|None|) (return nil))) 
            (error "Nonexhaustive match failure in getSpecPath"))))) 
    (let ((currDir (IO-SPEC::getCurrentDirectory-0))) 
      (let ((strings 
             (let ((pV4 (SYSTEM-SPEC::getEnv "SWPATH"))) 
               (block 
                nil 
                (if (eq (car pV4) :|Some|) 
                    (return 
                     (let ((paths 
                            (SPECCALC::splitStringAtChar-1-1 
                             SPECCALC::specPathSeparator 
                             (cdr pV4)))) 
                       (LIST-SPEC::++-2 
                        (LIST-SPEC::++-2 paths (cons currDir nil)) 
                        (if (cl:or 
                             (slang-built-in::slang-term-equals-2 
                              specware4Dirs 
                              nil) 
                             (LIST-SPEC::member-2 
                              (LIST-SPEC::hd specware4Dirs) 
                              paths)) 
                            nil 
                            specware4Dirs))))) 
                (return 
                 (LIST-SPEC::++-2 (cons currDir (cons "/" nil)) specware4Dirs)))))) 
        (SPECCALC::mapM-1-1-1 #'SPECCALC::pathToCanonicalUID strings nil)))))

(defun SPECCALC::getSpecPath (ignore) 
  (declare (ignore ignore)) 
  (SPECCALC::getSpecPath-0))

(defun SPECCALC::normalizeUID-2 (hashSuffix path) 
  (labels 
    ((iterate (current) 
      #'(lambda (next) 
         (if (slang-built-in::slang-term-equals-2 current next) 
             current 
             (funcall (iterate next) (onePass next)))))
     (onePass (elems) 
      (block 
       nil 
       (if (null elems) 
           (return nil) 
           (if (consp elems) 
               (let ((pV4 (cdr elems))
                     (pV3 (car elems))) 
                 (progn (if (consp pV4) 
                            (let ((pV7 (cdr pV4))
                                  (pV6 (car pV4))) 
                              (if (string=  "." pV6) 
                                  (return (cons pV3 pV7)) 
                                  (if (string=  ".." pV6) (return pV7))))) 
                        (return (cons pV3 (onePass pV4))))))) 
       (error "Nonexhaustive match failure in normalizeUID")))) 
    (cons 
     hashSuffix 
     (SPECCALC::addDevice? (funcall (iterate path) (onePass path))))))

(defun SPECCALC::removeLast-1-1 (elems x-1) 
  (block 
   nil 
   (if (null elems) 
       (return (SPECCALC::error-1-1 "removeLast: encountered empty list" x-1)) 
       (if (consp elems) 
           (let ((pV8 (cdr elems))) 
             (progn (if (null pV8) (return (SPECCALC::return-1-1 nil x-1))) 
                    (return 
                     (let ((x0 (SPECCALC::removeLast-1-1 pV8 x-1))) 
                       (let ((pV1 (car x0))
                             (pV2 (cdr x0))) 
                         (block 
                          nil 
                          (if (eq (car pV1) :|Ok|) 
                              (return 
                               (SPECCALC::return-1-1 
                                (cons (car elems) (cdr pV1)) 
                                pV2)) 
                              (if (eq (car pV1) :|Exception|) 
                                  (return 
                                   (cons (cons :|Exception| (cdr pV1)) pV2)))) 
                          (error "Nonexhaustive match failure in removeLast"))))))))) 
   (error "Nonexhaustive match failure in removeLast")))

(defun SPECCALC::generateUIDList-1-1 (unitId x-1) 
  (block 
   nil 
   (if (eq (car unitId) :|SpecPath_Relative|) 
       (let ((pV34 (cdr unitId))) 
         (let ((pV37 (car pV34))
               (pV38 (cdr pV34))) 
           (return 
            (let ((x0 (SPECCALC::getSpecPath x-1))) 
              (let ((pV6 (car x0))
                    (pV7 (cdr x0))) 
                (block 
                 nil 
                 (if (eq (car pV6) :|Ok|) 
                     (let ((pV9 (cdr pV6))) 
                       (return 
                        (SPECCALC::return-1-1 
                         (labels 
                           ((map--local-0 (l) 
                             (block 
                              nil 
                              (if (null l) 
                                  (return nil) 
                                  (if (consp l) 
                                      (return 
                                       (cons 
                                        (SPECCALC::normalizeUID-2 
                                         pV37 
                                         (LIST-SPEC::++-2 (cdr (car l)) pV38)) 
                                        (map--local-0 (cdr l)))))) 
                              (error 
                               "Nonexhaustive match failure in generateUIDList")))) 
                           (map--local-0 pV9)) 
                         pV7))) 
                     (if (eq (car pV6) :|Exception|) 
                         (return (cons (cons :|Exception| (cdr pV6)) pV7)))) 
                 (error "Nonexhaustive match failure in generateUIDList"))))))) 
       (if (eq (car unitId) :|UnitId_Relative|) 
           (let ((pV33 (cdr unitId))) 
             (let ((pV35 (car pV33))
                   (pV36 (cdr pV33))) 
               (return 
                (let ((x0 (SPECCALC::getCurrentUID x-1))) 
                  (let ((pV28 (car x0))
                        (pV29 (cdr x0))) 
                    (block 
                     nil 
                     (if (eq (car pV28) :|Ok|) 
                         (let ((pV31 (cdr pV28))) 
                           (return 
                            (let ((currentPath (cdr pV31))) 
                              (let ((x01 
                                     (SPECCALC::removeLast-1-1 currentPath pV29))) 
                                (let ((pV24 (car x01))
                                      (pV25 (cdr x01))) 
                                  (block 
                                   nil 
                                   (if (eq (car pV24) :|Ok|) 
                                       (let ((pV27 (cdr pV24))) 
                                         (return 
                                          (block 
                                           nil 
                                           (if (eq (car (car pV31)) :|Some|) 
                                               (if (consp pV36) 
                                                   (if (null (cdr pV36)) 
                                                       (if (eq 
                                                            (car pV35) 
                                                            :|None|) 
                                                           (return 
                                                            (SPECCALC::return-1-1 
                                                             (cons 
                                                              (SPECCALC::normalizeUID-2 
                                                               (cons 
                                                                :|Some| 
                                                                (car pV36)) 
                                                               currentPath) 
                                                              (cons 
                                                               (SPECCALC::normalizeUID-2 
                                                                '(:|None|) 
                                                                (LIST-SPEC::++-2 
                                                                 pV27 
                                                                 pV36)) 
                                                               nil)) 
                                                             pV25)))))) 
                                           (return 
                                            (SPECCALC::return-1-1 
                                             (cons 
                                              (SPECCALC::normalizeUID-2 
                                               pV35 
                                               (LIST-SPEC::++-2 pV27 pV36)) 
                                              nil) 
                                             pV25)) 
                                           (error 
                                            "Nonexhaustive match failure in generateUIDList")))) 
                                       (if (eq (car pV24) :|Exception|) 
                                           (return 
                                            (cons 
                                             (cons :|Exception| (cdr pV24)) 
                                             pV25)))) 
                                   (error 
                                    "Nonexhaustive match failure in generateUIDList"))))))) 
                         (if (eq (car pV28) :|Exception|) 
                             (return (cons (cons :|Exception| (cdr pV28)) pV29)))) 
                     (error "Nonexhaustive match failure in generateUIDList"))))))))) 
   (error "Nonexhaustive match failure in generateUIDList")))

(defun SPECCALC::lookupInGlobalContext-1-1 (unitId x-1) 
  (let ((x0 (SPECCALC::getGlobalContext x-1))) 
    (let ((pV1 (car x0))
          (pV2 (cdr x0))) 
      (block 
       nil 
       (if (eq (car pV1) :|Ok|) 
           (return 
            (SPECCALC::return-1-1 
             (POLYMAP::evalPartial-1-1 (cdr pV1) unitId) 
             pV2)) 
           (if (eq (car pV1) :|Exception|) 
               (return (cons (cons :|Exception| (cdr pV1)) pV2)))) 
       (error "Nonexhaustive match failure in lookupInGlobalContext")))))

(defparameter SPECCALC::futureTimeStamp 9999999999)

(defun SPECCALC::removeFromGlobalContext-1-1 (unitId x-1) 
  (let ((x0 (SPECCALC::getGlobalContext x-1))) 
    (let ((pV1 (car x0))
          (pV2 (cdr x0))) 
      (block 
       nil 
       (if (eq (car pV1) :|Ok|) 
           (return 
            (SPECCALC::setGlobalContext-1-1 
             (POLYMAP::remove-1-1 (cdr pV1) unitId) 
             pV2)) 
           (if (eq (car pV1) :|Exception|) 
               (return (cons (cons :|Exception| (cdr pV1)) pV2)))) 
       (error "Nonexhaustive match failure in removeFromGlobalContext")))))

(defun SPECCALC::removeFromGlobalContext (x1) 
  #'(lambda (x2) (SPECCALC::removeFromGlobalContext-1-1 x1 x2)))

(defun SPECCALC::setValidatedUnitId-1-1 (unitId x-1) 
  (let ((x0 (SPECCALC::readGlobalVar-1-1 "ValidatedUnitIds" x-1))) 
    (let ((pV1 (car x0))
          (pV2 (cdr x0))) 
      (block 
       nil 
       (if (eq (car pV1) :|Ok|) 
           (return 
            (SPECCALC::writeGlobalVar-1-1 
             (cons "ValidatedUnitIds" (LIST-SPEC::cons-2 unitId (cdr pV1))) 
             pV2)) 
           (if (eq (car pV1) :|Exception|) 
               (return (cons (cons :|Exception| (cdr pV1)) pV2)))) 
       (error "Nonexhaustive match failure in setValidatedUnitId")))))

(defun SPECCALC::setValidatedUID-1-1 (x-0 x-1) 
  (SPECCALC::setValidatedUnitId-1-1 x-0 x-1))

(defun SPECCALC::setValidatedUID (x1) 
  #'(lambda (x2) (SPECCALC::setValidatedUID-1-1 x1 x2)))

(defun SPECCALC::uidToFullPath (x) (SPECCALC::uidToFullPath-2 (car x) (cdr x)))

(defun SPECCALC::upToDate?-2 (unitId timeStamp) 
  (INTEGER-SPEC::<=-2 
   (IO-SPEC::fileWriteTime 
    (STRING-SPEC::^-2 (SPECCALC::uidToFullPath unitId) ".sw")) 
   timeStamp))

(defun SPECCALC::validateCache (x1) 
  #'(lambda (x2) (SPECCALC::validateCache-1-1 x1 x2)))

(defun SPECCALC::validatedUnitId?-1-1 (unitId x-1) 
  (let ((x0 (SPECCALC::readGlobalVar-1-1 "ValidatedUnitIds" x-1))) 
    (let ((pV1 (car x0))
          (pV2 (cdr x0))) 
      (block 
       nil 
       (if (eq (car pV1) :|Ok|) 
           (return 
            (SPECCALC::return-1-1 (LIST-SPEC::member-2 unitId (cdr pV1)) pV2)) 
           (if (eq (car pV1) :|Exception|) 
               (return (cons (cons :|Exception| (cdr pV1)) pV2)))) 
       (error "Nonexhaustive match failure in validatedUnitId?")))))

(defun SPECCALC::validatedUID?-1-1 (x-0 x-1) 
  (SPECCALC::validatedUnitId?-1-1 x-0 x-1))

(defun SPECCALC::validateCache-1-1 (unitId x-1) 
  (let ((x0 (SPECCALC::validatedUID?-1-1 unitId x-1))) 
    (let ((pV15 (car x0))
          (pV16 (cdr x0))) 
      (block 
       nil 
       (if (eq (car pV15) :|Ok|) 
           (return 
            (if (cdr pV15) 
                (SPECCALC::return-1-1 0 pV16) 
                (let ((x0 (SPECCALC::lookupInGlobalContext-1-1 unitId pV16))) 
                  (let ((pV11 (car x0))
                        (pV12 (cdr x0))) 
                    (block 
                     nil 
                     (if (eq (car pV11) :|Ok|) 
                         (let ((pV14 (cdr pV11))) 
                           (return 
                            (block 
                             nil 
                             (if (eq (car pV14) :|None|) 
                                 (return 
                                  (SPECCALC::return-1-1 
                                   SPECCALC::futureTimeStamp 
                                   pV12)) 
                                 (if (eq (car pV14) :|Some|) 
                                     (let ((pV7 (cdr pV14))) 
                                       (let ((pV9 (svref pV7 1))) 
                                         (return 
                                          (let ((x0 
                                                 (SPECCALC::foldM-1-1-1-1 
                                                  #'(lambda (val) 
                                                     #'(lambda (depUID) 
                                                        (SPECCALC::monadBind-2 
                                                         (SPECCALC::validateCache 
                                                          depUID) 
                                                         #'(lambda (dVal) 
                                                            (SPECCALC::|!return| 
                                                             (INTEGER-SPEC::max-2 
                                                              val 
                                                              dVal)))))) 
                                                  pV9 
                                                  (svref pV7 2) 
                                                  pV12))) 
                                            (let ((pV2 (car x0))
                                                  (pV3 (cdr x0))) 
                                              (block 
                                               nil 
                                               (if (eq (car pV2) :|Ok|) 
                                                   (let ((pV5 (cdr pV2))) 
                                                     (return 
                                                      (if (cl:and 
                                                           (INTEGER-SPEC::>=-2 
                                                            pV9 
                                                            pV5) 
                                                           (SPECCALC::upToDate?-2 
                                                            unitId 
                                                            pV5)) 
                                                          (SPECCALC::monadSeq-1-1 
                                                           (cons 
                                                            (SPECCALC::setValidatedUID 
                                                             unitId) 
                                                            (SPECCALC::|!return| 
                                                             pV5)) 
                                                           pV3) 
                                                          (SPECCALC::monadSeq-1-1 
                                                           (cons 
                                                            (SPECCALC::removeFromGlobalContext 
                                                             unitId) 
                                                            (SPECCALC::|!return| 
                                                             SPECCALC::futureTimeStamp)) 
                                                           pV3)))) 
                                                   (if (eq 
                                                        (car pV2) 
                                                        :|Exception|) 
                                                       (return 
                                                        (cons 
                                                         (cons 
                                                          :|Exception| 
                                                          (cdr pV2)) 
                                                         pV3)))) 
                                               (error 
                                                "Nonexhaustive match failure in validateCache"))))))))) 
                             (error 
                              "Nonexhaustive match failure in validateCache")))) 
                         (if (eq (car pV11) :|Exception|) 
                             (return (cons (cons :|Exception| (cdr pV11)) pV12)))) 
                     (error "Nonexhaustive match failure in validateCache")))))) 
           (if (eq (car pV15) :|Exception|) 
               (return (cons (cons :|Exception| (cdr pV15)) pV16)))) 
       (error "Nonexhaustive match failure in validateCache")))))

(defun SPECCALC::searchContextForUID-1-1 (uids x-1) 
  (block 
   nil 
   (if (null uids) 
       (return (SPECCALC::return-1-1 '(:|None|) x-1)) 
       (if (consp uids) 
           (let ((pV19 (car uids))) 
             (return 
              (let ((x0 (SPECCALC::lookupInGlobalContext-1-1 pV19 x-1))) 
                (let ((pV13 (car x0))
                      (pV14 (cdr x0))) 
                  (block 
                   nil 
                   (if (eq (car pV13) :|Ok|) 
                       (let ((pV16 (cdr pV13))) 
                         (return 
                          (block 
                           nil 
                           (if (eq (car pV16) :|Some|) 
                               (let ((pV9 (cdr pV16))) 
                                 (let ((pV10 (svref pV9 0))
                                       (pV11 (svref pV9 1))) 
                                   (return 
                                    (block 
                                     nil 
                                     (if (eq (car pV10) :|InProcess|) 
                                         (return 
                                          (SPECCALC::raise-1-1 
                                           (cons 
                                            :|CircularDefinition| 
                                            (cons (car pV19) (cdr pV19))) 
                                           pV14))) 
                                     (return 
                                      (let ((x0 
                                             (SPECCALC::validateCache-1-1 
                                              pV19 
                                              pV14))) 
                                        (let ((pV3 (car x0))
                                              (pV4 (cdr x0))) 
                                          (block 
                                           nil 
                                           (if (eq (car pV3) :|Ok|) 
                                               (return 
                                                (SPECCALC::return-1-1 
                                                 (if (INTEGER-SPEC::<=-2 
                                                      (cdr pV3) 
                                                      pV11) 
                                                     (cons 
                                                      :|Some| 
                                                      (cons 
                                                       (vector 
                                                        pV10 
                                                        pV11 
                                                        (cons pV19 nil)) 
                                                       pV19)) 
                                                     '(:|None|)) 
                                                 pV4)) 
                                               (if (eq (car pV3) :|Exception|) 
                                                   (return 
                                                    (cons 
                                                     (cons 
                                                      :|Exception| 
                                                      (cdr pV3)) 
                                                     pV4)))) 
                                           (error 
                                            "Nonexhaustive match failure in searchContextForUID"))))))))) 
                               (if (eq (car pV16) :|None|) 
                                   (return 
                                    (SPECCALC::searchContextForUID-1-1 
                                     (cdr uids) 
                                     pV14)))) 
                           (error 
                            "Nonexhaustive match failure in searchContextForUID")))) 
                       (if (eq (car pV13) :|Exception|) 
                           (return (cons (cons :|Exception| (cdr pV13)) pV14)))) 
                   (error "Nonexhaustive match failure in searchContextForUID")))))))) 
   (error "Nonexhaustive match failure in searchContextForUID")))

(defun SPECCALC::checkInCache?-1-1 (unitId x-1) 
  (let ((x0 (SPECCALC::generateUIDList-1-1 unitId x-1))) 
    (let ((pV5 (car x0))
          (pV6 (cdr x0))) 
      (block 
       nil 
       (if (eq (car pV5) :|Ok|) 
           (return 
            (let ((x0 (SPECCALC::searchContextForUID-1-1 (cdr pV5) pV6))) 
              (let ((pV1 (car x0))
                    (pV2 (cdr x0))) 
                (block 
                 nil 
                 (if (eq (car pV1) :|Ok|) 
                     (return 
                      (SPECCALC::return-1-1 (OPTION::some? (cdr pV1)) pV2)) 
                     (if (eq (car pV1) :|Exception|) 
                         (return (cons (cons :|Exception| (cdr pV1)) pV2)))) 
                 (error "Nonexhaustive match failure in checkInCache?"))))) 
           (if (eq (car pV5) :|Exception|) 
               (return (cons (cons :|Exception| (cdr pV5)) pV6)))) 
       (error "Nonexhaustive match failure in checkInCache?")))))

(defun SPECCALC::checkInCache? (x1) 
  #'(lambda (x2) (SPECCALC::checkInCache?-1-1 x1 x2)))

(defun TYPECHECKER::blankString (n) 
  (if (INTEGER-SPEC::<=-2 n 0) 
      "" 
      (if (INTEGER-SPEC::<-2 n 100) 
          (STRING-SPEC::substring-3 
           "                                                                                                    " 
           0 
           n) 
          (STRING-SPEC::^-2 
           "                                                                                                    " 
           (TYPECHECKER::blankString (INTEGER-SPEC::--2 n 100))))))

(defun TYPECHECKER::mkProject-4 (env id srt pos) 
  (let ((pV23 (UTILITIES::unfoldSort-2 env srt))) 
    (block 
     nil 
     (if (eq (car pV23) :|Arrow|) 
         (let ((pV25 (cdr pV23))) 
           (let ((pV30 (svref pV25 1))
                 (pV29 (svref pV25 0))) 
             (return 
              (labels 
                ((analyzeDom (dom) 
                  (let ((pV12 (UTILITIES::unfoldSort-2 env dom))) 
                    (block 
                     nil 
                     (if (eq (car pV12) :|Product|) 
                         (let ((pV18 (car (cdr pV12)))) 
                           (return 
                            (labels 
                              ((findId (ls) 
                                (block 
                                 nil 
                                 (if (null ls) 
                                     (return '(:|None|)) 
                                     (if (consp ls) 
                                         (let ((pV5 (car ls))) 
                                           (return 
                                            (if (string=  id (car pV5)) 
                                                (progn (TYPECHECKER::elaborateSort-3 
                                                        env 
                                                        (METASLANG::withAnnS-2 
                                                         pV30 
                                                         pos) 
                                                        (cdr pV5)) 
                                                       (cons 
                                                        :|Some| 
                                                        (cons 
                                                         :|Fun| 
                                                         (vector 
                                                          (cons :|Project| id) 
                                                          srt 
                                                          pos)))) 
                                                (findId (cdr ls))))))) 
                                 (error 
                                  "Nonexhaustive match failure in mkProject")))) 
                              (findId pV18)))) 
                         (if (eq (car pV12) :|Subsort|) 
                             (return (analyzeDom (svref (cdr pV12) 0))))) 
                     (return '(:|None|)))))) (analyzeDom pV29))))) 
         (if (eq (car pV23) :|Subsort|) 
             (return (TYPECHECKER::mkProject-4 env id (svref (cdr pV23) 0) pos)))) 
     (return '(:|None|)))))

(defun TYPECHECKER::pass2Error-4 (env pV1 msg pos) 
  (declare (ignore pV1)) 
  (if (svref env 3) nil (UTILITIES::error-3 env msg pos)))

(defun TYPECHECKER::ambiguousCons-5 (env trm id srt pos) 
  (if (svref env 3) 
      trm 
      (progn (UTILITIES::error-3 
              env 
              (STRING-SPEC::^-2 
               (STRING-SPEC::^-2 "Constructor " id) 
               " could not be disambiguated") 
              pos) 
             (cons 
              :|Fun| 
              (vector (cons :|OneName| (cons id '(:|Nonfix|))) srt pos)))))

(defun TYPECHECKER::undeclaredName-5 (env trm id srt pos) 
  (if (svref env 3) 
      trm 
      (progn (UTILITIES::error-3 
              env 
              (STRING-SPEC::^-2 
               (STRING-SPEC::^-2 "Name " id) 
               " could not be identified") 
              pos) 
             (cons 
              :|Fun| 
              (vector (cons :|OneName| (cons id '(:|Nonfix|))) srt pos)))))

(defun TYPECHECKER::mkEmbed1-5 (env srt trm id pos) 
  (let ((pV11 (TYPECHECKER::isArrowCoProduct-2 env srt))) 
    (block 
     nil 
     (if (eq (car pV11) :|Some|) 
         (let ((pV12 (cdr pV11))) 
           (let ((pV14 (cdr pV12))
                 (pV13 (car pV12))) 
             (return 
              (labels 
                ((findId (ls) 
                  (block 
                   nil 
                   (if (null ls) 
                       (return 
                        (cons 
                         :|Some| 
                         (TYPECHECKER::undeclaredName-5 env trm id srt pos))) 
                       (if (consp ls) 
                           (let ((pV6 (cdr ls))
                                 (pV5 (car ls))) 
                             (progn (let ((pV8 (cdr pV5))) 
                                      (if (eq (car pV8) :|Some|) 
                                          (return 
                                           (if (string=  id (car pV5)) 
                                               (let ((constructor_dom_sort 
                                                      (TYPECHECKER::checkSort-2 
                                                       env 
                                                       (cdr pV8)))) 
                                                 (progn (TYPECHECKER::elaborateSort-3 
                                                         env 
                                                         (METASLANG::withAnnS-2 
                                                          pV13 
                                                          pos) 
                                                         constructor_dom_sort) 
                                                        (cons 
                                                         :|Some| 
                                                         (cons 
                                                          :|Fun| 
                                                          (vector 
                                                           (cons 
                                                            :|Embed| 
                                                            (cons id t)) 
                                                           (TYPECHECKER::checkSort-2 
                                                            env 
                                                            srt) 
                                                           pos))))) 
                                               (findId pV6))))) 
                                    (return (findId pV6)))))) 
                   (error "Nonexhaustive match failure in mkEmbed1")))) 
                (findId pV14)))))) 
     (return '(:|None|)))))

(defun TYPECHECKER::uniqueConstr-4 (env trm id pos) 
  (let ((pV25 (STRINGMAP::find-2 (svref env 0) id))) 
    (block 
     nil 
     (if (eq (car pV25) :|Some|) 
         (let ((pV26 (cdr pV25))) 
           (if (consp pV26) 
               (if (null (cdr pV26)) 
                   (return 
                    (let ((pV21 (UTILITIES::copySort (car pV26)))) 
                      (block 
                       nil 
                       (let ((pV23 (cdr pV21))) 
                         (return 
                          (let ((id_srt 
                                 (block 
                                  nil 
                                  (if (eq (car pV23) :|CoProduct|) 
                                      (let ((pV16 (cdr pV23))) 
                                        (let ((pV17 (car pV16))) 
                                          (return 
                                           (let ((pV4 
                                                  (labels 
                                                    ((find--local-0 (l) 
                                                      (block 
                                                       nil 
                                                       (if (null l) 
                                                           (return '(:|None|)) 
                                                           (if (consp l) 
                                                               (let ((pV12 
                                                                      (car l))) 
                                                                 (return 
                                                                  (if (string=  
                                                                       id 
                                                                       (car pV12)) 
                                                                      (cons 
                                                                       :|Some| 
                                                                       (cons 
                                                                        (car 
                                                                         pV12) 
                                                                        (cdr 
                                                                         pV12))) 
                                                                      (find--local-0 
                                                                       (cdr l))))))) 
                                                       (error 
                                                        "Nonexhaustive match failure in uniqueConstr")))) 
                                                    (find--local-0 pV17)))) 
                                             (block 
                                              nil 
                                              (if (eq (car pV4) :|Some|) 
                                                  (let ((pV7 (cdr (cdr pV4)))) 
                                                    (if (eq (car pV7) :|Some|) 
                                                        (return 
                                                         (cons 
                                                          :|Arrow| 
                                                          (vector 
                                                           (cdr pV7) 
                                                           pV23 
                                                           (cdr pV16))))))) 
                                              (return pV23))))))) 
                                  (return pV23)))) 
                            (let ((pV19 (TYPECHECKER::mkEmbed0-3 env id_srt id))) 
                              (block 
                               nil 
                               (if (eq (car pV19) :|Some|) 
                                   (return 
                                    (cons 
                                     :|Some| 
                                     (cons 
                                      :|Fun| 
                                      (vector 
                                       (cons :|Embed| (cons (cdr pV19) nil)) 
                                       (TYPECHECKER::checkSort-2 env id_srt) 
                                       pos)))) 
                                   (if (eq (car pV19) :|None|) 
                                       (return 
                                        (TYPECHECKER::mkEmbed1-5 
                                         env 
                                         id_srt 
                                         trm 
                                         id 
                                         pos)))) 
                               (error 
                                "Nonexhaustive match failure in uniqueConstr")))))) 
                       (error "Nonexhaustive match failure in uniqueConstr")))))))) 
     (return '(:|None|)))))

(defun TYPECHECKER::resolveNameFromSort-5 (env trm id srt pos) 
  (let ((pV8 (TYPECHECKER::mkEmbed0-3 env srt id))) 
    (block 
     nil 
     (if (eq (car pV8) :|Some|) 
         (return 
          (cons 
           :|Fun| 
           (vector 
            (cons :|Embed| (cons (cdr pV8) nil)) 
            (TYPECHECKER::checkSort-2 env srt) 
            pos))) 
         (if (eq (car pV8) :|None|) 
             (return 
              (let ((pV6 (TYPECHECKER::mkEmbed1-5 env srt trm id pos))) 
                (block 
                 nil 
                 (if (eq (car pV6) :|Some|) 
                     (return (cdr pV6)) 
                     (if (eq (car pV6) :|None|) 
                         (return 
                          (let ((pV4 
                                 (TYPECHECKER::uniqueConstr-4 env trm id pos))) 
                            (block 
                             nil 
                             (if (eq (car pV4) :|Some|) (return (cdr pV4))) 
                             (return 
                              (let ((pV3 (STRINGMAP::find-2 (svref env 0) id))) 
                                (block 
                                 nil 
                                 (if (eq (car pV3) :|None|) 
                                     (return 
                                      (TYPECHECKER::undeclaredName-5 
                                       env 
                                       trm 
                                       id 
                                       srt 
                                       pos))) 
                                 (return 
                                  (TYPECHECKER::ambiguousCons-5 
                                   env 
                                   trm 
                                   id 
                                   srt 
                                   pos)))))))))) 
                 (error "Nonexhaustive match failure in resolveNameFromSort")))))) 
     (error "Nonexhaustive match failure in resolveNameFromSort"))))

(defun TYPECHECKER::selectTermWithConsistentSort-5 (env id pos terms srt) 
  (block 
   nil 
   (if (consp terms) (if (null (cdr terms)) (return (cons :|Some| (car terms))))) 
   (return 
    (let ((pV56 (UTILITIES::unlinkSort srt))) 
      (block 
       nil 
       (if (eq (car pV56) :|MetaTyVar|) (return '(:|None|))) 
       (return 
        (let ((pV52 
               (LIST-SPEC::filter-1-1 
                (TYPECHECKER::consistentSortOp?-2 
                 env 
                 (METASLANG::withAnnS-2 pV56 (METASLANG::sortAnn srt))) 
                terms))) 
          (block 
           nil 
           (if (null pV52) 
               (return 
                (progn (UTILITIES::error-3 
                        env 
                        (STRING-SPEC::^-2 
                         (STRING-SPEC::^-2 
                          (STRING-SPEC::^-2 "No matches for op " id) 
                          " of sort ") 
                         (ANNSPECPRINTER::printSort srt)) 
                        pos) 
                       '(:|None|))) 
               (if (consp pV52) 
                   (if (null (cdr pV52)) (return (cons :|Some| (car pV52)))))) 
           (return 
            (if (svref env 3) 
                '(:|None|) 
                (labels 
                  ((findUnqualified (tms) 
                    (block 
                     nil 
                     (if (null tms) 
                         (return '(:|None|)) 
                         (if (consp tms) 
                             (let ((pV27 (cdr tms))
                                   (pV26 (car tms))) 
                               (return 
                                (block 
                                 nil 
                                 (if (eq (car pV26) :|Fun|) 
                                     (let ((pV14 (svref (cdr pV26) 0))) 
                                       (if (eq (car pV14) :|OneName|) 
                                           (return (cons :|Some| pV26)) 
                                           (if (eq (car pV14) :|TwoNames|) 
                                               (return 
                                                (if (string=  
                                                     (svref (cdr pV14) 0) 
                                                     METASLANG::UnQualified) 
                                                    (cons :|Some| pV26) 
                                                    (findUnqualified pV27))))))) 
                                 (return (findUnqualified pV27))))))) 
                     (error 
                      "Nonexhaustive match failure in selectTermWithConsistentSort")))) 
                  (let ((pV50 (findUnqualified pV52))) 
                    (block 
                     nil 
                     (if (eq (car pV50) :|Some|) 
                         (return (cons :|Some| (cdr pV50))) 
                         (if (eq (car pV50) :|None|) 
                             (return 
                              (progn (UTILITIES::error-3 
                                      env 
                                      (STRING-SPEC::^-2 
                                       (STRING-SPEC::^-2 
                                        (STRING-SPEC::^-2 
                                         (STRING-SPEC::^-2 
                                          "Several matches for overloaded op " 
                                          id) 
                                         " of sort ") 
                                        (ANNSPECPRINTER::printSort srt)) 
                                       (labels 
                                         ((foldl--local-0 (base l) 
                                           (block 
                                            nil 
                                            (if (null l) 
                                                (return base) 
                                                (if (consp l) 
                                                    (let ((pV48 (car l))) 
                                                      (return 
                                                       (foldl--local-0 
                                                        (STRING-SPEC::^-2 
                                                         base 
                                                         (block 
                                                          nil 
                                                          (if (eq 
                                                               (car pV48) 
                                                               :|Fun|) 
                                                              (let ((pV36 
                                                                     (svref 
                                                                      (cdr pV48) 
                                                                      0))) 
                                                                (if (eq 
                                                                     (car pV36) 
                                                                     :|OneName|) 
                                                                    (return 
                                                                     (STRING-SPEC::^-2 
                                                                      " " 
                                                                      (car 
                                                                       (cdr pV36)))) 
                                                                    (if (eq 
                                                                         (car 
                                                                          pV36) 
                                                                         :|TwoNames|) 
                                                                        (let ((pV39 
                                                                               (cdr 
                                                                                pV36))) 
                                                                          (return 
                                                                           (STRING-SPEC::^-2 
                                                                            (STRING-SPEC::^-2 
                                                                             (STRING-SPEC::^-2 
                                                                              " " 
                                                                              (svref 
                                                                               pV39 
                                                                               0)) 
                                                                             ".") 
                                                                            (svref 
                                                                             pV39 
                                                                             1)))))))) 
                                                          (error 
                                                           "Nonexhaustive match failure in selectTermWithConsistentSort"))) 
                                                        (cdr l)))))) 
                                            (error 
                                             "Nonexhaustive match failure in selectTermWithConsistentSort")))) 
                                         (foldl--local-0 " : " terms))) 
                                      pos) 
                                     '(:|None|))))) 
                     (error 
                      "Nonexhaustive match failure in selectTermWithConsistentSort"))))))))))))))


(defparameter TYPECHECKER::sortCognizantOperators 
  (cons 
   (cons "XML" "readXMLFile") 
   (cons 
    (cons "<unqualified>" "readXMLFile") 
    (cons 
     (cons "XML" "parseXML") 
     (cons 
      (cons "<unqualified>" "parseXML") 
      (cons 
       (cons "XML" "parseUnicodeXML") 
       (cons 
        (cons "<unqualified>" "parseUnicodeXML") 
        (cons 
         (cons "XML" "internalize_Document") 
         (cons 
          (cons "<unqualified>" "internalize_Document") 
          (cons 
           (cons "XML" "writeXMLFile") 
           (cons 
            (cons "<unqualified>" "writeXMLFile") 
            (cons 
             (cons "XML" "printXML") 
             (cons 
              (cons "<unqualified>" "printXML") 
              (cons 
               (cons "XML" "printUnicodeXML") 
               (cons (cons "<unqualified>" "printUnicodeXML") nil)))))))))))))))

(defun TYPECHECKER::sortCognizantOperator? (f1) 
  (block 
   nil 
   (if (eq (car f1) :|TwoNames|) 
       (let ((pV4 (cdr f1))) 
         (return 
          (LIST-SPEC::member-2 
           (cons (svref pV4 0) (svref pV4 1)) 
           TYPECHECKER::sortCognizantOperators)))) 
   (return nil)))

(defun TYPECHECKER::undeclared2-6 (env trm id1 id2 srt pos) 
  (if (svref env 3) 
      trm 
      (progn (UTILITIES::error-3 
              env 
              (STRING-SPEC::^-2 
               (STRING-SPEC::^-2 (STRING-SPEC::^-2 id1 ".") id2) 
               " has not been declared as a qualified name or as a field selection") 
              pos) 
             (cons 
              :|Fun| 
              (vector (cons :|TwoNames| (vector id1 id2 '(:|Nonfix|))) srt pos)))))


(defun TYPECHECKER::undeclaredResolving-5 (env trm id srt pos) 
  (if (svref env 3) 
      trm 
      (progn (UTILITIES::error-3 
              env 
              (STRING-SPEC::^-2 
               (STRING-SPEC::^-2 
                (STRING-SPEC::^-2 "Name " id) 
                " could not be identified; resolving with ") 
               (ANNSPECPRINTER::printSort srt)) 
              pos) 
             (cons 
              :|Fun| 
              (vector (cons :|OneName| (cons id '(:|Nonfix|))) srt pos)))))

(defun XML::sort_expansion_table-2 (env srt) 
  (labels 
    ((scan (srt table) 
      (block 
       nil 
       (if (eq (car srt) :|CoProduct|) 
           (let ((pV61 (car (cdr srt)))) 
             (return 
              (labels 
                ((foldl--local-0 (base l) 
                  (block 
                   nil 
                   (if (null l) 
                       (return base) 
                       (if (consp l) 
                           (return 
                            (foldl--local-0 
                             (block 
                              nil 
                              (let ((pV6 (cdr (car l)))) 
                                (return 
                                 (block 
                                  nil 
                                  (if (eq (car pV6) :|Some|) 
                                      (return (scan (cdr pV6) base)) 
                                      (if (eq (car pV6) :|None|) (return base))) 
                                  (error 
                                   "Nonexhaustive match failure in sort_expansion_table")))) 
                              (error 
                               "Nonexhaustive match failure in sort_expansion_table")) 
                             (cdr l))))) 
                   (error "Nonexhaustive match failure in sort_expansion_table")))) 
                (foldl--local-0 table pV61)))) 
           (if (eq (car srt) :|Product|) 
               (let ((pV59 (car (cdr srt)))) 
                 (return 
                  (labels 
                    ((foldl--local-0 (base l) 
                      (block 
                       nil 
                       (if (null l) 
                           (return base) 
                           (if (consp l) 
                               (return 
                                (foldl--local-0 
                                 (block 
                                  nil 
                                  (return (scan (cdr (car l)) base)) 
                                  (error 
                                   "Nonexhaustive match failure in sort_expansion_table")) 
                                 (cdr l))))) 
                       (error 
                        "Nonexhaustive match failure in sort_expansion_table")))) 
                    (foldl--local-0 table pV59)))) 
               (if (eq (car srt) :|Arrow|) 
                   (let ((pV44 (cdr srt))) 
                     (return (scan (svref pV44 0) (scan (svref pV44 1) table)))) 
                   (if (eq (car srt) :|Quotient|) 
                       (return (scan (svref (cdr srt) 0) table)) 
                       (if (eq (car srt) :|Subsort|) 
                           (return (scan (svref (cdr srt) 0) table)) 
                           (if (eq (car srt) :|Base|) 
                               (let ((pV41 (cdr srt))) 
                                 (let ((pV47 (svref pV41 0))) 
                                   (return 
                                    (let ((table0 
                                           (if (labels 
                                                 ((foldl--local-0 (base l) 
                                                   (block 
                                                    nil 
                                                    (if (null l) 
                                                        (return base) 
                                                        (if (consp l) 
                                                            (return 
                                                             (foldl--local-0 
                                                              (block 
                                                               nil 
                                                               (let ((pV30 
                                                                      (car 
                                                                       (car l)))) 
                                                                 (return 
                                                                  (cl:or 
                                                                   base 
                                                                   (block 
                                                                    nil 
                                                                    (if (eq 
                                                                         (car 
                                                                          pV30) 
                                                                         :|Base|) 
                                                                        (return 
                                                                         (cl:or 
                                                                          (slang-built-in::slang-term-equals-2 
                                                                           pV47 
                                                                           (svref 
                                                                            (cdr 
                                                                             pV30) 
                                                                            0)) 
                                                                          (slang-built-in::slang-term-equals-2 
                                                                           pV47 
                                                                           (cons 
                                                                            :|Qualified| 
                                                                            (cons 
                                                                             "List" 
                                                                             "List")))))) 
                                                                    (return base))))) 
                                                               (error 
                                                                "Nonexhaustive match failure in sort_expansion_table")) 
                                                              (cdr l))))) 
                                                    (error 
                                                     "Nonexhaustive match failure in sort_expansion_table")))) 
                                                 (foldl--local-0 nil table)) 
                                               table 
                                               (add_to_table srt table)))) 
                                      (LIST-SPEC::foldl-1-1-1 
                                       #'(lambda (pV) (scan (car pV) (cdr pV))) 
                                       table0 
                                       (svref pV41 1)))))) 
                               (if (eq (car srt) :|TyVar|) 
                                   (return table) 
                                   (if (eq (car srt) :|MetaTyVar|) 
                                       (return 
                                        (let ((new_sort 
                                               (UTILITIES::unlinkSort srt))) 
                                          (if (slang-built-in::slang-term-equals-2 
                                               new_sort 
                                               srt) 
                                              table 
                                              (scan new_sort table)))))))))))) 
       (error "Nonexhaustive match failure in sort_expansion_table")))
     (add_to_table (srt table) 
      (let ((expansion (XML::unfoldSort_once-2 env srt))) 
        (if (slang-built-in::slang-term-equals-2 expansion srt) 
            table 
            (scan expansion (LIST-SPEC::cons-2 (cons srt expansion) table)))))) 
    (scan srt nil)))

(defun TYPECHECKER::elaborateTerm-3 (env trm term_sort) 
  (block 
   nil 
   (if (eq (car trm) :|Fun|) 
       (let ((pV257 (cdr trm))) 
         (let ((pV318 (svref pV257 2))
               (pV317 (svref pV257 1))
               (pV316 (svref pV257 0))) 
           (if (eq (car pV316) :|OneName|) 
               (let ((pV331 (cdr pV316))) 
                 (let ((pV338 (cdr pV331))
                       (pV337 (car pV331))) 
                   (return 
                    (progn (TYPECHECKER::elaborateCheckSortForTerm-4 
                            env 
                            trm 
                            pV317 
                            term_sort) 
                           (let ((pV22 
                                  (UTILITIES::findVarOrOps-3 env pV337 pV318))) 
                             (block 
                              nil 
                              (if (consp pV22) 
                                  (return 
                                   (let ((pV20 
                                          (TYPECHECKER::selectTermWithConsistentSort-5 
                                           env 
                                           pV337 
                                           pV318 
                                           pV22 
                                           term_sort))) 
                                     (block 
                                      nil 
                                      (if (eq (car pV20) :|None|) 
                                          (return trm) 
                                          (if (eq (car pV20) :|Some|) 
                                              (let ((pV21 (cdr pV20))) 
                                                (return 
                                                 (let ((srt 
                                                        (TYPECHECKER::elaborateCheckSortForTerm-4 
                                                         env 
                                                         pV21 
                                                         (METASLANG::termSort 
                                                          pV21) 
                                                         term_sort))) 
                                                   (block 
                                                    nil 
                                                    (if (eq (car pV21) :|Var|) 
                                                        (let ((pV10 (cdr pV21))) 
                                                          (return 
                                                           (cons 
                                                            :|Var| 
                                                            (cons 
                                                             (cons 
                                                              (car (car pV10)) 
                                                              srt) 
                                                             (cdr pV10))))) 
                                                        (if (eq 
                                                             (car pV21) 
                                                             :|Fun|) 
                                                            (let ((pV9 
                                                                   (cdr pV21))) 
                                                              (let ((pV13 
                                                                     (svref 
                                                                      pV9 
                                                                      2))
                                                                    (pV11 
                                                                     (svref 
                                                                      pV9 
                                                                      0))) 
                                                                (if (eq 
                                                                     (car pV11) 
                                                                     :|OneName|) 
                                                                    (return 
                                                                     (cons 
                                                                      :|Fun| 
                                                                      (vector 
                                                                       (let ((x0 
                                                                              (TYPECHECKER::fixateOneName-2 
                                                                               (cdr 
                                                                                pV11) 
                                                                               pV338))) 
                                                                         (cons 
                                                                          :|OneName| 
                                                                          (cons 
                                                                           (car 
                                                                            x0) 
                                                                           (cdr 
                                                                            x0)))) 
                                                                       srt 
                                                                       pV13))) 
                                                                    (if (eq 
                                                                         (car 
                                                                          pV11) 
                                                                         :|TwoNames|) 
                                                                        (return 
                                                                         (cons 
                                                                          :|Fun| 
                                                                          (vector 
                                                                           (let ((x0 
                                                                                  (TYPECHECKER::fixateTwoNames-2 
                                                                                   (cdr 
                                                                                    pV11) 
                                                                                   pV338))) 
                                                                             (cons 
                                                                              :|TwoNames| 
                                                                              (vector 
                                                                               (svref 
                                                                                x0 
                                                                                0) 
                                                                               (svref 
                                                                                x0 
                                                                                1) 
                                                                               (svref 
                                                                                x0 
                                                                                2)))) 
                                                                           srt 
                                                                           pV13))))))))) 
                                                    (return 
                                                     (SYSTEM-SPEC::fail 
                                                      "Variable or constant expected")))))))) 
                                      (error 
                                       "Nonexhaustive match failure in elaborateTerm"))))) 
                              (if (null pV22) 
                                  (return 
                                   (TYPECHECKER::resolveNameFromSort-5 
                                    env 
                                    trm 
                                    pV337 
                                    pV317 
                                    pV318))) 
                              (error 
                               "Nonexhaustive match failure in elaborateTerm"))))))) 
               (if (eq (car pV316) :|TwoNames|) 
                   (let ((pV330 (cdr pV316))) 
                     (let ((pV335 (svref pV330 1))
                           (pV334 (svref pV330 0))) 
                       (return 
                        (progn (TYPECHECKER::elaborateCheckSortForTerm-4 
                                env 
                                trm 
                                pV317 
                                term_sort) 
                               (let ((pV67 
                                      (UTILITIES::findTheOp2-3 env pV334 pV335))) 
                                 (block 
                                  nil 
                                  (if (eq (car pV67) :|Some|) 
                                      (let ((pV68 (cdr pV67))) 
                                        (let ((pV71 (svref pV68 2))
                                              (pV69 (svref pV68 0))) 
                                          (if (consp pV69) 
                                              (let ((pV74 (car pV69))) 
                                                (if (eq (car pV74) :|Qualified|) 
                                                    (let ((pV76 (cdr pV74))) 
                                                      (let ((pV78 (cdr pV76))
                                                            (pV77 (car pV76))) 
                                                        (return 
                                                         (let ((pV37 
                                                                (UTILITIES::copySort-2 
                                                                 (car pV71) 
                                                                 (cdr pV71)))) 
                                                           (block 
                                                            nil 
                                                            (let ((pV39 
                                                                   (cdr pV37))) 
                                                              (return 
                                                               (let ((term 
                                                                      (cons 
                                                                       :|Fun| 
                                                                       (vector 
                                                                        (cons 
                                                                         :|TwoNames| 
                                                                         (vector 
                                                                          pV77 
                                                                          pV78 
                                                                          (svref 
                                                                           pV68 
                                                                           1))) 
                                                                        pV39 
                                                                        pV318)))) 
                                                                 (block 
                                                                  nil 
                                                                  (if (eq 
                                                                       (car term) 
                                                                       :|Fun|) 
                                                                      (let ((pV32 
                                                                             (cdr 
                                                                              term))) 
                                                                        (let ((pV33 
                                                                               (svref 
                                                                                pV32 
                                                                                0))) 
                                                                          (if (eq 
                                                                               (car 
                                                                                pV33) 
                                                                               :|TwoNames|) 
                                                                              (let ((pV36 
                                                                                     (cdr 
                                                                                      pV33))) 
                                                                                (return 
                                                                                 (cons 
                                                                                  :|Fun| 
                                                                                  (vector 
                                                                                   (cons 
                                                                                    :|TwoNames| 
                                                                                    (vector 
                                                                                     (svref 
                                                                                      pV36 
                                                                                      0) 
                                                                                     (svref 
                                                                                      pV36 
                                                                                      1) 
                                                                                     (svref 
                                                                                      pV36 
                                                                                      2))) 
                                                                                   (TYPECHECKER::elaborateCheckSortForTerm-4 
                                                                                    env 
                                                                                    term 
                                                                                    pV39 
                                                                                    term_sort) 
                                                                                   (svref 
                                                                                    pV32 
                                                                                    2))))))))) 
                                                                  (return 
                                                                   (SYSTEM-SPEC::fail 
                                                                    (STRING-SPEC::^-2 
                                                                     (STRING-SPEC::^-2 
                                                                      (STRING-SPEC::^-2 
                                                                       (STRING-SPEC::^-2 
                                                                        (STRING-SPEC::^-2 
                                                                         (STRING-SPEC::^-2 
                                                                          (STRING-SPEC::^-2 
                                                                           "Op expected for elaboration of " 
                                                                           pV334) 
                                                                          ".") 
                                                                         pV335) 
                                                                        " as resolved to ") 
                                                                       pV77) 
                                                                      ".") 
                                                                     pV78))))))) 
                                                            (error 
                                                             "Nonexhaustive match failure in elaborateTerm"))))))))))) 
                                      (if (eq (car pV67) :|None|) 
                                          (return 
                                           (let ((pV62 
                                                  (UTILITIES::findVarOrOps-3 
                                                   env 
                                                   pV334 
                                                   pV318))) 
                                             (block 
                                              nil 
                                              (if (consp pV62) 
                                                  (let ((pV64 (car pV62))) 
                                                    (if (null (cdr pV62)) 
                                                        (return 
                                                         (let ((big_sort 
                                                                (TYPECHECKER::checkSort-2 
                                                                 env 
                                                                 (METASLANG::termSort 
                                                                  pV64)))) 
                                                           (labels 
                                                             ((getProduct (srt) 
                                                               (let ((pV50 
                                                                      (UTILITIES::unfoldSort-2 
                                                                       env 
                                                                       srt))) 
                                                                 (block 
                                                                  nil 
                                                                  (if (eq 
                                                                       (car pV50) 
                                                                       :|Product|) 
                                                                      (return 
                                                                       (cons 
                                                                        :|Some| 
                                                                        (car 
                                                                         (cdr 
                                                                          pV50)))) 
                                                                      (if (eq 
                                                                           (car 
                                                                            pV50) 
                                                                           :|Subsort|) 
                                                                          (return 
                                                                           (getProduct 
                                                                            (svref 
                                                                             (cdr 
                                                                              pV50) 
                                                                             0))))) 
                                                                  (return 
                                                                   '(:|None|)))))
                                                              (projectRow 
                                                               (big_term0 
                                                                big_sort 
                                                                row 
                                                                id2) 
                                                               (block 
                                                                nil 
                                                                (if (null row) 
                                                                    (return 
                                                                     (TYPECHECKER::undeclared2-6 
                                                                      env 
                                                                      trm 
                                                                      pV334 
                                                                      id2 
                                                                      term_sort 
                                                                      pV318)) 
                                                                    (if (consp 
                                                                         row) 
                                                                        (let ((pV43 
                                                                               (car 
                                                                                row))) 
                                                                          (return 
                                                                           (if (string=  
                                                                                id2 
                                                                                (car 
                                                                                 pV43)) 
                                                                               (let ((field_sort 
                                                                                      (TYPECHECKER::checkSort-2 
                                                                                       env 
                                                                                       (cdr 
                                                                                        pV43)))) 
                                                                                 (let ((projection 
                                                                                        (cons 
                                                                                         :|ApplyN| 
                                                                                         (cons 
                                                                                          (cons 
                                                                                           (cons 
                                                                                            :|Fun| 
                                                                                            (vector 
                                                                                             (cons 
                                                                                              :|Project| 
                                                                                              id2) 
                                                                                             (cons 
                                                                                              :|Arrow| 
                                                                                              (vector 
                                                                                               big_sort 
                                                                                               field_sort 
                                                                                               pV318)) 
                                                                                             pV318)) 
                                                                                           (cons 
                                                                                            big_term0 
                                                                                            nil)) 
                                                                                          pV318)))) 
                                                                                   (progn (TYPECHECKER::elaborateSortForTerm-4 
                                                                                           env 
                                                                                           projection 
                                                                                           field_sort 
                                                                                           term_sort) 
                                                                                          projection))) 
                                                                               (projectRow 
                                                                                big_term0 
                                                                                big_sort 
                                                                                (cdr 
                                                                                 row) 
                                                                                id2)))))) 
                                                                (error 
                                                                 "Nonexhaustive match failure in elaborateTerm")))) 
                                                             (let ((pV59 
                                                                    (getProduct 
                                                                     big_sort))) 
                                                               (block 
                                                                nil 
                                                                (if (eq 
                                                                     (car pV59) 
                                                                     :|Some|) 
                                                                    (return 
                                                                     (projectRow 
                                                                      pV64 
                                                                      big_sort 
                                                                      (cdr pV59) 
                                                                      pV335)) 
                                                                    (if (eq 
                                                                         (car 
                                                                          pV59) 
                                                                         :|None|) 
                                                                        (return 
                                                                         (TYPECHECKER::undeclared2-6 
                                                                          env 
                                                                          trm 
                                                                          pV334 
                                                                          pV335 
                                                                          term_sort 
                                                                          pV318)))) 
                                                                (return 
                                                                 (TYPECHECKER::undeclared2-6 
                                                                  env 
                                                                  trm 
                                                                  pV334 
                                                                  pV335 
                                                                  term_sort 
                                                                  pV318)))))))))) 
                                              (return 
                                               (TYPECHECKER::undeclared2-6 
                                                env 
                                                trm 
                                                pV334 
                                                pV335 
                                                term_sort 
                                                pV318))))))) 
                                  (return 
                                   (TYPECHECKER::undeclared2-6 
                                    env 
                                    trm 
                                    pV334 
                                    pV335 
                                    term_sort 
                                    pV318)))))))) 
                   (if (eq (car pV316) :|Embed|) 
                       (return 
                        (progn (TYPECHECKER::elaborateCheckSortForTerm-4 
                                env 
                                trm 
                                pV317 
                                term_sort) 
                               (TYPECHECKER::resolveNameFromSort-5 
                                env 
                                trm 
                                (car (cdr pV316)) 
                                term_sort 
                                pV318))) 
                       (if (eq (car pV316) :|Project|) 
                           (let ((pV328 (cdr pV316))) 
                             (return 
                              (let ((pV83 
                                     (TYPECHECKER::mkProject-4 
                                      env 
                                      pV328 
                                      (TYPECHECKER::elaborateCheckSortForTerm-4 
                                       env 
                                       trm 
                                       pV317 
                                       term_sort) 
                                      pV318))) 
                                (block 
                                 nil 
                                 (if (eq (car pV83) :|Some|) 
                                     (return (cdr pV83)) 
                                     (if (eq (car pV83) :|None|) 
                                         (return 
                                          (TYPECHECKER::undeclaredResolving-5 
                                           env 
                                           trm 
                                           pV328 
                                           term_sort 
                                           pV318)))) 
                                 (error 
                                  "Nonexhaustive match failure in elaborateTerm"))))) 
                           (if (eq (car pV316) :|Embedded|) 
                               (let ((pV327 (cdr pV316))) 
                                 (return 
                                  (let ((srt 
                                         (TYPECHECKER::elaborateCheckSortForTerm-4 
                                          env 
                                          trm 
                                          pV317 
                                          term_sort))) 
                                    (progn (let ((pV95 
                                                  (UTILITIES::unfoldSort-2 
                                                   env 
                                                   srt))) 
                                             (block 
                                              nil 
                                              (if (eq (car pV95) :|Arrow|) 
                                                  (let ((pV97 
                                                         (svref (cdr pV95) 0))) 
                                                    (return 
                                                     (let ((pV92 
                                                            (TYPECHECKER::isCoproduct-2 
                                                             env 
                                                             pV97))) 
                                                       (block 
                                                        nil 
                                                        (if (eq 
                                                             (car pV92) 
                                                             :|Some|) 
                                                            (let ((pV93 
                                                                   (cdr pV92))) 
                                                              (return 
                                                               (if (labels 
                                                                     ((exists--local-0 
                                                                       (l) 
                                                                       (block 
                                                                        nil 
                                                                        (if (null 
                                                                             l) 
                                                                            (return 
                                                                             nil) 
                                                                            (if (consp 
                                                                                 l) 
                                                                                (return 
                                                                                 (if (string=  
                                                                                      pV327 
                                                                                      (car 
                                                                                       (car 
                                                                                        l))) 
                                                                                     t 
                                                                                     (exists--local-0 
                                                                                      (cdr 
                                                                                       l)))))) 
                                                                        (error 
                                                                         "Nonexhaustive match failure in elaborateTerm")))) 
                                                                     (exists--local-0 
                                                                      pV93)) 
                                                                   nil 
                                                                   (UTILITIES::error-3 
                                                                    env 
                                                                    (STRING-SPEC::^-2 
                                                                     (STRING-SPEC::^-2 
                                                                      (STRING-SPEC::^-2 
                                                                       "Name " 
                                                                       pV327) 
                                                                      " is not among the constructors of ") 
                                                                     (ANNSPECPRINTER::printSort 
                                                                      pV97)) 
                                                                    pV318)))) 
                                                            (if (eq 
                                                                 (car pV92) 
                                                                 :|None|) 
                                                                (return 
                                                                 (TYPECHECKER::pass2Error-4 
                                                                  env 
                                                                  pV97 
                                                                  (TYPECHECKER::newLines 
                                                                   (cons 
                                                                    (STRING-SPEC::^-2 
                                                                     (STRING-SPEC::^-2 
                                                                      "Sum sort with constructor " 
                                                                      pV327) 
                                                                     " expected") 
                                                                    (cons 
                                                                     (STRING-SPEC::^-2 
                                                                      "found instead " 
                                                                      (ANNSPECPRINTER::printSort 
                                                                       pV97)) 
                                                                     nil))) 
                                                                  pV318)))) 
                                                        (error 
                                                         "Nonexhaustive match failure in elaborateTerm")))))) 
                                              (return 
                                               (TYPECHECKER::pass2Error-4 
                                                env 
                                                srt 
                                                "Function sort expected " 
                                                pV318)))) 
                                           (cons 
                                            :|Fun| 
                                            (vector 
                                             (cons :|Embedded| pV327) 
                                             srt 
                                             pV318)))))) 
                               (if (eq (car pV316) :|PChoose|) 
                                   (return 
                                    (let ((a (UTILITIES::freshMetaTyVar pV318))) 
                                      (let ((b (UTILITIES::freshMetaTyVar pV318))) 
                                        (let ((equiv 
                                               (TYPECHECKER::elaborateTerm-3 
                                                env 
                                                (cdr pV316) 
                                                (cons 
                                                 :|Arrow| 
                                                 (vector 
                                                  (cons 
                                                   :|Product| 
                                                   (cons 
                                                    (cons 
                                                     (cons "1" a) 
                                                     (cons (cons "2" a) nil)) 
                                                    pV318)) 
                                                  TYPECHECKER::type_bool 
                                                  pV318))))) 
                                          (let ((ty4 
                                                 (cons 
                                                  :|Arrow| 
                                                  (vector 
                                                   (cons 
                                                    :|Arrow| 
                                                    (vector a b pV318)) 
                                                   (cons 
                                                    :|Arrow| 
                                                    (vector 
                                                     (cons 
                                                      :|Quotient| 
                                                      (vector a equiv pV318)) 
                                                     b 
                                                     pV318)) 
                                                   pV318)))) 
                                            (progn (TYPECHECKER::elaborateSortForTerm-4 
                                                    env 
                                                    trm 
                                                    ty4 
                                                    term_sort) 
                                                   (TYPECHECKER::elaborateSortForTerm-4 
                                                    env 
                                                    trm 
                                                    pV317 
                                                    ty4) 
                                                   (cons 
                                                    :|Fun| 
                                                    (vector 
                                                     (cons :|PChoose| equiv) 
                                                     pV317 
                                                     pV318)))))))) 
                                   (if (eq (car pV316) :|PQuotient|) 
                                       (return 
                                        (let ((a 
                                               (UTILITIES::freshMetaTyVar pV318))) 
                                          (let ((equiv 
                                                 (TYPECHECKER::elaborateTerm-3 
                                                  env 
                                                  (cdr pV316) 
                                                  (cons 
                                                   :|Arrow| 
                                                   (vector 
                                                    (cons 
                                                     :|Product| 
                                                     (cons 
                                                      (cons 
                                                       (cons "1" a) 
                                                       (cons (cons "2" a) nil)) 
                                                      pV318)) 
                                                    TYPECHECKER::type_bool 
                                                    pV318))))) 
                                            (let ((ty2 
                                                   (cons 
                                                    :|Arrow| 
                                                    (vector 
                                                     a 
                                                     (cons 
                                                      :|Quotient| 
                                                      (vector a equiv pV318)) 
                                                     pV318)))) 
                                              (progn (TYPECHECKER::elaborateSortForTerm-4 
                                                      env 
                                                      trm 
                                                      ty2 
                                                      term_sort) 
                                                     (TYPECHECKER::elaborateSortForTerm-4 
                                                      env 
                                                      trm 
                                                      pV317 
                                                      ty2) 
                                                     (cons 
                                                      :|Fun| 
                                                      (vector 
                                                       (cons :|PQuotient| equiv) 
                                                       pV317 
                                                       pV318))))))) 
                                       (if (eq (car pV316) :|Equals|) 
                                           (return 
                                            (let ((a 
                                                   (UTILITIES::freshMetaTyVar 
                                                    pV318))) 
                                              (let ((ty 
                                                     (cons 
                                                      :|Arrow| 
                                                      (vector 
                                                       (cons 
                                                        :|Product| 
                                                        (cons 
                                                         (cons 
                                                          (cons "1" a) 
                                                          (cons (cons "2" a) nil)) 
                                                         pV318)) 
                                                       TYPECHECKER::type_bool 
                                                       pV318)))) 
                                                (progn (TYPECHECKER::elaborateSortForTerm-4 
                                                        env 
                                                        trm 
                                                        ty 
                                                        term_sort) 
                                                       (TYPECHECKER::elaborateSortForTerm-4 
                                                        env 
                                                        trm 
                                                        pV317 
                                                        ty) 
                                                       (cons 
                                                        :|Fun| 
                                                        (vector 
                                                         '(:|Equals|) 
                                                         pV317 
                                                         pV318)))))) 
                                           (if (eq (car pV316) :|Bool|) 
                                               (return 
                                                (progn (TYPECHECKER::elaborateSortForTerm-4 
                                                        env 
                                                        trm 
                                                        TYPECHECKER::type_bool 
                                                        term_sort) 
                                                       (TYPECHECKER::elaborateCheckSortForTerm-4 
                                                        env 
                                                        trm 
                                                        pV317 
                                                        TYPECHECKER::type_bool) 
                                                       (cons 
                                                        :|Fun| 
                                                        (vector 
                                                         (cons 
                                                          :|Bool| 
                                                          (cdr pV316)) 
                                                         pV317 
                                                         pV318)))) 
                                               (if (eq (car pV316) :|Nat|) 
                                                   (return 
                                                    (progn (TYPECHECKER::elaborateSortForTerm-4 
                                                            env 
                                                            trm 
                                                            TYPECHECKER::type_nat 
                                                            term_sort) 
                                                           (TYPECHECKER::elaborateCheckSortForTerm-4 
                                                            env 
                                                            trm 
                                                            pV317 
                                                            TYPECHECKER::type_nat) 
                                                           (cons 
                                                            :|Fun| 
                                                            (vector 
                                                             (cons 
                                                              :|Nat| 
                                                              (cdr pV316)) 
                                                             pV317 
                                                             pV318)))) 
                                                   (if (eq (car pV316) :|String|) 
                                                       (return 
                                                        (progn (TYPECHECKER::elaborateSortForTerm-4 
                                                                env 
                                                                trm 
                                                                TYPECHECKER::type_string 
                                                                term_sort) 
                                                               (TYPECHECKER::elaborateCheckSortForTerm-4 
                                                                env 
                                                                trm 
                                                                pV317 
                                                                TYPECHECKER::type_string) 
                                                               (cons 
                                                                :|Fun| 
                                                                (vector 
                                                                 (cons 
                                                                  :|String| 
                                                                  (cdr pV316)) 
                                                                 pV317 
                                                                 pV318)))) 
                                                       (if (eq 
                                                            (car pV316) 
                                                            :|Char|) 
                                                           (return 
                                                            (progn (TYPECHECKER::elaborateSortForTerm-4 
                                                                    env 
                                                                    trm 
                                                                    TYPECHECKER::type_char 
                                                                    term_sort) 
                                                                   (TYPECHECKER::elaborateCheckSortForTerm-4 
                                                                    env 
                                                                    trm 
                                                                    pV317 
                                                                    TYPECHECKER::type_char) 
                                                                   (cons 
                                                                    :|Fun| 
                                                                    (vector 
                                                                     (cons 
                                                                      :|Char| 
                                                                      (cdr pV316)) 
                                                                     pV317 
                                                                     pV318)))) 
                                                           (if (eq 
                                                                (car pV316) 
                                                                :|PRelax|) 
                                                               (return 
                                                                (let ((a 
                                                                       (UTILITIES::freshMetaTyVar 
                                                                        pV318))) 
                                                                  (let ((pred 
                                                                         (TYPECHECKER::elaborateTerm-3 
                                                                          env 
                                                                          (cdr 
                                                                           pV316) 
                                                                          (cons 
                                                                           :|Arrow| 
                                                                           (vector 
                                                                            a 
                                                                            TYPECHECKER::type_bool 
                                                                            pV318))))) 
                                                                    (let ((ty2 
                                                                           (cons 
                                                                            :|Arrow| 
                                                                            (vector 
                                                                             (cons 
                                                                              :|Subsort| 
                                                                              (vector 
                                                                               a 
                                                                               pred 
                                                                               pV318)) 
                                                                             a 
                                                                             pV318)))) 
                                                                      (progn (TYPECHECKER::elaborateSortForTerm-4 
                                                                              env 
                                                                              trm 
                                                                              ty2 
                                                                              term_sort) 
                                                                             (TYPECHECKER::elaborateSortForTerm-4 
                                                                              env 
                                                                              trm 
                                                                              pV317 
                                                                              ty2) 
                                                                             (cons 
                                                                              :|Fun| 
                                                                              (vector 
                                                                               (cons 
                                                                                :|PRelax| 
                                                                                pred) 
                                                                               pV317 
                                                                               pV318))))))) 
                                                               (if (eq 
                                                                    (car pV316) 
                                                                    :|PRestrict|) 
                                                                   (return 
                                                                    (let ((a 
                                                                           (UTILITIES::freshMetaTyVar 
                                                                            pV318))) 
                                                                      (let ((pred 
                                                                             (TYPECHECKER::elaborateTerm-3 
                                                                              env 
                                                                              (cdr 
                                                                               pV316) 
                                                                              (cons 
                                                                               :|Arrow| 
                                                                               (vector 
                                                                                a 
                                                                                TYPECHECKER::type_bool 
                                                                                pV318))))) 
                                                                        (let ((ty2 
                                                                               (cons 
                                                                                :|Arrow| 
                                                                                (vector 
                                                                                 a 
                                                                                 (cons 
                                                                                  :|Subsort| 
                                                                                  (vector 
                                                                                   a 
                                                                                   pred 
                                                                                   pV318)) 
                                                                                 pV318)))) 
                                                                          (progn (TYPECHECKER::elaborateSortForTerm-4 
                                                                                  env 
                                                                                  trm 
                                                                                  ty2 
                                                                                  term_sort) 
                                                                                 (TYPECHECKER::elaborateSortForTerm-4 
                                                                                  env 
                                                                                  trm 
                                                                                  pV317 
                                                                                  ty2) 
                                                                                 (cons 
                                                                                  :|Fun| 
                                                                                  (vector 
                                                                                   (cons 
                                                                                    :|PRestrict| 
                                                                                    pred) 
                                                                                   pV317 
                                                                                   pV318))))))))))))))))))))))) 
       (if (eq (car trm) :|Var|) 
           (let ((pV256 (cdr trm))) 
             (let ((pV312 (car pV256))) 
               (return 
                (cons 
                 :|Var| 
                 (cons 
                  (cons 
                   (car pV312) 
                   (TYPECHECKER::elaborateCheckSortForTerm-4 
                    env 
                    trm 
                    (cdr pV312) 
                    term_sort)) 
                  (cdr pV256)))))) 
           (if (eq (car trm) :|LetRec|) 
               (let ((pV255 (cdr trm))) 
                 (let ((pV311 (svref pV255 2))
                       (pV310 (svref pV255 1))
                       (pV309 (svref pV255 0))) 
                   (return 
                    (labels 
                      ((declareFun (pV100 pV101) 
                        (block 
                         nil 
                         (let ((pV102 (car pV100))) 
                           (return 
                            (UTILITIES::addVariable-3 
                             pV101 
                             (car pV102) 
                             (cdr pV102)))) 
                         (error "Nonexhaustive match failure in elaborateTerm")))) 
                      (labels 
                        ((elaborateDecl (env) 
                          #'(lambda (pV) 
                             (block 
                              nil 
                              (let ((pV108 (car (car pV)))) 
                                (return 
                                 (let ((srt 
                                        (METASLANG::termSort 
                                         (LIST-SPEC::hd 
                                          (UTILITIES::findVarOrOps-3 
                                           env 
                                           pV108 
                                           pV311))))) 
                                   (cons 
                                    (cons pV108 srt) 
                                    (TYPECHECKER::elaborateTerm-3 
                                     env 
                                     (cdr pV) 
                                     srt))))) 
                              (error 
                               "Nonexhaustive match failure in elaborateTerm"))))) 
                        (let ((env 
                               (LIST-SPEC::foldr-1-1-1 
                                #'(lambda (pV) (declareFun (car pV) (cdr pV))) 
                                env 
                                pV309))) 
                          (cons 
                           :|LetRec| 
                           (vector 
                            (LIST-SPEC::map-1-1 (elaborateDecl env) pV309) 
                            (TYPECHECKER::elaborateTerm-3 env pV310 term_sort) 
                            pV311)))))))) 
               (if (eq (car trm) :|Let|) 
                   (let ((pV254 (cdr trm))) 
                     (let ((pV308 (svref pV254 2))
                           (pV307 (svref pV254 1))
                           (pV306 (svref pV254 0))) 
                       (return 
                        (labels 
                          ((doDeclaration (pV122 pV123) 
                            (block 
                             nil 
                             (let ((pV125 (cdr pV122))
                                   (pV124 (car pV122))) 
                               (return 
                                (let ((alpha (UTILITIES::freshMetaTyVar pV308))) 
                                  (let ((pV119 
                                         (block 
                                          nil 
                                          (if (eq (car pV124) :|SortedPat|) 
                                              (let ((pV112 (cdr pV124))) 
                                                (return 
                                                 (cons 
                                                  (svref pV112 0) 
                                                  (cons 
                                                   :|SortedTerm| 
                                                   (vector 
                                                    pV125 
                                                    (svref pV112 1) 
                                                    (svref pV112 2))))))) 
                                          (return (cons pV124 pV125))))) 
                                    (block 
                                     nil 
                                     (return 
                                      (let ((bdy 
                                             (TYPECHECKER::elaborateTerm-3 
                                              env 
                                              (cdr pV119) 
                                              alpha))) 
                                        (let ((pV116 
                                               (TYPECHECKER::elaboratePattern-3 
                                                (cdr pV123) 
                                                (car pV119) 
                                                alpha))) 
                                          (block 
                                           nil 
                                           (return 
                                            (cons 
                                             (LIST-SPEC::cons-2 
                                              (cons (car pV116) bdy) 
                                              (car pV123)) 
                                             (cdr pV116))) 
                                           (error 
                                            "Nonexhaustive match failure in elaborateTerm"))))) 
                                     (error 
                                      "Nonexhaustive match failure in elaborateTerm")))))) 
                             (error 
                              "Nonexhaustive match failure in elaborateTerm")))) 
                          (let ((pV128 
                                 (LIST-SPEC::foldr-1-1-1 
                                  #'(lambda (pV) 
                                     (doDeclaration (car pV) (cdr pV))) 
                                  (cons nil env) 
                                  pV306))) 
                            (block 
                             nil 
                             (return 
                              (cons 
                               :|Let| 
                               (vector 
                                (car pV128) 
                                (TYPECHECKER::elaborateTerm-3 
                                 (cdr pV128) 
                                 pV307 
                                 term_sort) 
                                pV308))) 
                             (error 
                              "Nonexhaustive match failure in elaborateTerm"))))))) 
                   (if (eq (car trm) :|IfThenElse|) 
                       (let ((pV253 (cdr trm))) 
                         (return 
                          (cons 
                           :|IfThenElse| 
                           (vector 
                            (TYPECHECKER::elaborateTerm-3 
                             env 
                             (svref pV253 0) 
                             TYPECHECKER::type_bool) 
                            (TYPECHECKER::elaborateTerm-3 
                             env 
                             (svref pV253 1) 
                             term_sort) 
                            (TYPECHECKER::elaborateTerm-3 
                             env 
                             (svref pV253 2) 
                             term_sort) 
                            (svref pV253 3))))) 
                       (if (eq (car trm) :|Record|) 
                           (let ((pV252 (cdr trm))) 
                             (let ((pV301 (cdr pV252))
                                   (pV300 (car pV252))) 
                               (return 
                                (labels 
                                  ((unfoldConstraint (srt) 
                                    (let ((pV144 
                                           (UTILITIES::unfoldSort-2 env srt))) 
                                      (block 
                                       nil 
                                       (if (eq (car pV144) :|Product|) 
                                           (let ((pV153 (car (cdr pV144)))) 
                                             (return 
                                              (progn (if (BOOLEAN-SPEC::~ 
                                                          ( =  
                                                           (LIST-SPEC::|!length| 
                                                            pV300) 
                                                           (LIST-SPEC::|!length| 
                                                            pV153))) 
                                                         (UTILITIES::error-3 
                                                          env 
                                                          (TYPECHECKER::newLines 
                                                           (cons 
                                                            (ANNSPECPRINTER::printTerm 
                                                             trm) 
                                                            (cons 
                                                             "is incompatible with constraint" 
                                                             (cons 
                                                              (ANNSPECPRINTER::printSort 
                                                               term_sort) 
                                                              nil)))) 
                                                          pV301) 
                                                         nil) 
                                                     pV153))) 
                                           (if (eq (car pV144) :|MetaTyVar|) 
                                               (return 
                                                (let ((row 
                                                       (labels 
                                                         ((map--local-0 (l) 
                                                           (block 
                                                            nil 
                                                            (if (null l) 
                                                                (return nil) 
                                                                (if (consp l) 
                                                                    (return 
                                                                     (cons 
                                                                      (cons 
                                                                       (car 
                                                                        (car l)) 
                                                                       (UTILITIES::freshMetaTyVar 
                                                                        pV301)) 
                                                                      (map--local-0 
                                                                       (cdr l)))))) 
                                                            (error 
                                                             "Nonexhaustive match failure in elaborateTerm")))) 
                                                         (map--local-0 pV300)))) 
                                                  (progn (UTILITIES::linkMetaTyVar-1-1 
                                                          (car (cdr pV144)) 
                                                          (cons 
                                                           :|Product| 
                                                           (cons row pV301))) 
                                                         row))) 
                                               (if (eq (car pV144) :|Subsort|) 
                                                   (return 
                                                    (unfoldConstraint 
                                                     (svref (cdr pV144) 0)))))) 
                                       (return 
                                        (progn (TYPECHECKER::pass2Error-4 
                                                env 
                                                pV144 
                                                (STRING-SPEC::^-2 
                                                 (STRING-SPEC::^-2 
                                                  (STRING-SPEC::^-2 
                                                   (ANNSPECPRINTER::printTerm 
                                                    trm) 
                                                   " is constrained to be of an incompatible sort ") 
                                                  STRING-SPEC::newline) 
                                                 (ANNSPECPRINTER::printSort 
                                                  term_sort)) 
                                                pV301) 
                                               (labels 
                                                 ((map--local-0 (l) 
                                                   (block 
                                                    nil 
                                                    (if (null l) 
                                                        (return nil) 
                                                        (if (consp l) 
                                                            (return 
                                                             (cons 
                                                              (cons 
                                                               (car (car l)) 
                                                               (UTILITIES::freshMetaTyVar 
                                                                pV301)) 
                                                              (map--local-0 
                                                               (cdr l)))))) 
                                                    (error 
                                                     "Nonexhaustive match failure in elaborateTerm")))) 
                                                 (map--local-0 pV300)))))))) 
                                  (let ((trow 
                                         (LISTPAIR::zip-2 
                                          pV300 
                                          (unfoldConstraint term_sort)))) 
                                    (cons 
                                     :|Record| 
                                     (cons 
                                      (labels 
                                        ((map--local-0 (l) 
                                          (block 
                                           nil 
                                           (if (null l) 
                                               (return nil) 
                                               (if (consp l) 
                                                   (let ((pV163 (car l))) 
                                                     (return 
                                                      (cons 
                                                       (let ((pV156 (cdr pV163))
                                                             (pV155 (car pV163))) 
                                                         (block 
                                                          nil 
                                                          (let ((pV158 
                                                                 (cdr pV155))
                                                                (pV157 
                                                                 (car pV155))) 
                                                            (let ((pV159 
                                                                   (car pV156))) 
                                                              (return 
                                                               (if (string=  
                                                                    pV157 
                                                                    pV159) 
                                                                   (cons 
                                                                    pV157 
                                                                    (TYPECHECKER::elaborateTerm-3 
                                                                     env 
                                                                     pV158 
                                                                     (cdr pV156))) 
                                                                   (progn (UTILITIES::error-3 
                                                                           env 
                                                                           (STRING-SPEC::^-2 
                                                                            (STRING-SPEC::^-2 
                                                                             (STRING-SPEC::^-2 
                                                                              "Field-name " 
                                                                              pV157) 
                                                                             " is not the one imposed by sort constraint.  Expected field-name is: ") 
                                                                            pV159) 
                                                                           pV301) 
                                                                          (cons 
                                                                           pV157 
                                                                           pV158)))))) 
                                                          (error 
                                                           "Nonexhaustive match failure in elaborateTerm"))) 
                                                       (map--local-0 (cdr l))))))) 
                                           (error 
                                            "Nonexhaustive match failure in elaborateTerm")))) 
                                        (map--local-0 trow)) 
                                      pV301))))))) 
                           (if (eq (car trm) :|Lambda|) 
                               (let ((pV251 (cdr trm))) 
                                 (let ((pV299 (cdr pV251))
                                       (pV298 (car pV251))) 
                                   (return 
                                    (let ((alpha 
                                           (UTILITIES::freshMetaTyVar pV299))) 
                                      (let ((beta 
                                             (UTILITIES::freshMetaTyVar pV299))) 
                                        (progn (TYPECHECKER::elaborateSort-3 
                                                env 
                                                (cons 
                                                 :|Arrow| 
                                                 (vector alpha beta pV299)) 
                                                term_sort) 
                                               (cons 
                                                :|Lambda| 
                                                (cons 
                                                 (labels 
                                                   ((map--local-0 (l) 
                                                     (block 
                                                      nil 
                                                      (if (null l) 
                                                          (return nil) 
                                                          (if (consp l) 
                                                              (let ((pV171 
                                                                     (car l))) 
                                                                (return 
                                                                 (cons 
                                                                  (let ((term 
                                                                         (svref 
                                                                          pV171 
                                                                          2))) 
                                                                    (let ((pV166 
                                                                           (TYPECHECKER::elaboratePattern-3 
                                                                            env 
                                                                            (svref 
                                                                             pV171 
                                                                             0) 
                                                                            alpha))) 
                                                                      (block 
                                                                       nil 
                                                                       (let ((pV168 
                                                                              (cdr 
                                                                               pV166))) 
                                                                         (return 
                                                                          (let ((term 
                                                                                 (TYPECHECKER::elaborateTerm-3 
                                                                                  pV168 
                                                                                  term 
                                                                                  beta))) 
                                                                            (vector 
                                                                             (car 
                                                                              pV166) 
                                                                             (TYPECHECKER::elaborateTerm-3 
                                                                              pV168 
                                                                              (svref 
                                                                               pV171 
                                                                               1) 
                                                                              TYPECHECKER::type_bool) 
                                                                             term)))) 
                                                                       (error 
                                                                        "Nonexhaustive match failure in elaborateTerm")))) 
                                                                  (map--local-0 
                                                                   (cdr l))))))) 
                                                      (error 
                                                       "Nonexhaustive match failure in elaborateTerm")))) 
                                                   (map--local-0 pV298)) 
                                                 pV299)))))))) 
                               (if (eq (car trm) :|Bind|) 
                                   (let ((pV250 (cdr trm))) 
                                     (let ((pV295 (svref pV250 1))) 
                                       (return 
                                        (progn (TYPECHECKER::elaborateSort-3 
                                                env 
                                                term_sort 
                                                TYPECHECKER::type_bool) 
                                               (let ((pV184 
                                                      (labels 
                                                        ((foldl--local-0 
                                                          (base l) 
                                                          (block 
                                                           nil 
                                                           (if (null l) 
                                                               (return base) 
                                                               (if (consp l) 
                                                                   (let ((pV182 
                                                                          (car l))) 
                                                                     (return 
                                                                      (foldl--local-0 
                                                                       (block 
                                                                        nil 
                                                                        (let ((pV176 
                                                                               (car 
                                                                                pV182))) 
                                                                          (let ((pV179 
                                                                                 (cdr 
                                                                                  base))) 
                                                                            (return 
                                                                             (let ((srt 
                                                                                    (TYPECHECKER::checkSort-2 
                                                                                     pV179 
                                                                                     (cdr 
                                                                                      pV182)))) 
                                                                               (cons 
                                                                                (LIST-SPEC::cons-2 
                                                                                 (cons 
                                                                                  pV176 
                                                                                  srt) 
                                                                                 (car 
                                                                                  base)) 
                                                                                (UTILITIES::addVariable-3 
                                                                                 pV179 
                                                                                 pV176 
                                                                                 srt)))))) 
                                                                        (error 
                                                                         "Nonexhaustive match failure in elaborateTerm")) 
                                                                       (cdr l)))))) 
                                                           (error 
                                                            "Nonexhaustive match failure in elaborateTerm")))) 
                                                        (foldl--local-0 
                                                         (cons nil env) 
                                                         pV295)))) 
                                                 (block 
                                                  nil 
                                                  (return 
                                                   (cons 
                                                    :|Bind| 
                                                    (vector 
                                                     (svref pV250 0) 
                                                     (LIST-SPEC::rev (car pV184)) 
                                                     (TYPECHECKER::elaborateTerm-3 
                                                      (cdr pV184) 
                                                      (svref pV250 2) 
                                                      term_sort) 
                                                     (svref pV250 3)))) 
                                                  (error 
                                                   "Nonexhaustive match failure in elaborateTerm"))))))) 
                                   (if (eq (car trm) :|SortedTerm|) 
                                       (let ((pV249 (cdr trm))) 
                                         (return 
                                          (TYPECHECKER::elaborateTerm-3 
                                           env 
                                           (svref pV249 0) 
                                           (TYPECHECKER::elaborateSort-3 
                                            env 
                                            (svref pV249 1) 
                                            term_sort)))) 
                                       (if (eq (car trm) :|Seq|) 
                                           (let ((pV248 (cdr trm))) 
                                             (let ((pV290 (cdr pV248))
                                                   (pV289 (car pV248))) 
                                               (return 
                                                (labels 
                                                  ((elab (ts) 
                                                    (block 
                                                     nil 
                                                     (if (null ts) 
                                                         (return nil) 
                                                         (if (consp ts) 
                                                             (let ((pV191 
                                                                    (cdr ts))
                                                                   (pV190 
                                                                    (car ts))) 
                                                               (progn (if (null 
                                                                           pV191) 
                                                                          (return 
                                                                           (cons 
                                                                            (TYPECHECKER::elaborateTerm-3 
                                                                             env 
                                                                             pV190 
                                                                             term_sort) 
                                                                            nil))) 
                                                                      (return 
                                                                       (LIST-SPEC::cons-2 
                                                                        (TYPECHECKER::elaborateTerm-3 
                                                                         env 
                                                                         pV190 
                                                                         (UTILITIES::freshMetaTyVar 
                                                                          pV290)) 
                                                                        (elab 
                                                                         pV191))))))) 
                                                     (error 
                                                      "Nonexhaustive match failure in elaborateTerm")))) 
                                                  (cons 
                                                   :|Seq| 
                                                   (cons (elab pV289) pV290)))))) 
                                           (if (eq (car trm) :|ApplyN|) 
                                               (let ((pV247 (cdr trm))) 
                                                 (let ((pV259 (cdr pV247))
                                                       (pV258 (car pV247))) 
                                                   (progn (if (consp pV258) 
                                                              (let ((pV262 
                                                                     (cdr pV258))
                                                                    (pV261 
                                                                     (car pV258))) 
                                                                (progn (if (eq 
                                                                            (car 
                                                                             pV261) 
                                                                            :|Fun|) 
                                                                           (if (eq 
                                                                                (car 
                                                                                 (svref 
                                                                                  (cdr 
                                                                                   pV261) 
                                                                                  0)) 
                                                                                :|Embedded|) 
                                                                               (if (consp 
                                                                                    pV262) 
                                                                                   (if (null 
                                                                                        (cdr 
                                                                                         pV262)) 
                                                                                       (return 
                                                                                        (let ((alpha 
                                                                                               (UTILITIES::freshMetaTyVar 
                                                                                                pV259))) 
                                                                                          (let ((t2 
                                                                                                 (TYPECHECKER::elaborateTerm-3 
                                                                                                  env 
                                                                                                  (car 
                                                                                                   pV262) 
                                                                                                  alpha))) 
                                                                                            (cons 
                                                                                             :|ApplyN| 
                                                                                             (cons 
                                                                                              (cons 
                                                                                               (TYPECHECKER::elaborateTerm-3 
                                                                                                env 
                                                                                                pV261 
                                                                                                (cons 
                                                                                                 :|Arrow| 
                                                                                                 (vector 
                                                                                                  alpha 
                                                                                                  term_sort 
                                                                                                  pV259))) 
                                                                                               (cons 
                                                                                                t2 
                                                                                                nil)) 
                                                                                              pV259))))))))) 
                                                                       (if (eq 
                                                                            (car 
                                                                             pV261) 
                                                                            :|Fun|) 
                                                                           (if (eq 
                                                                                (car 
                                                                                 (svref 
                                                                                  (cdr 
                                                                                   pV261) 
                                                                                  0)) 
                                                                                :|Project|) 
                                                                               (if (consp 
                                                                                    pV262) 
                                                                                   (if (null 
                                                                                        (cdr 
                                                                                         pV262)) 
                                                                                       (return 
                                                                                        (let ((alpha 
                                                                                               (UTILITIES::freshMetaTyVar 
                                                                                                pV259))) 
                                                                                          (let ((t2 
                                                                                                 (TYPECHECKER::elaborateTerm-3 
                                                                                                  env 
                                                                                                  (car 
                                                                                                   pV262) 
                                                                                                  alpha))) 
                                                                                            (cons 
                                                                                             :|ApplyN| 
                                                                                             (cons 
                                                                                              (cons 
                                                                                               (TYPECHECKER::elaborateTerm-3 
                                                                                                env 
                                                                                                pV261 
                                                                                                (cons 
                                                                                                 :|Arrow| 
                                                                                                 (vector 
                                                                                                  alpha 
                                                                                                  term_sort 
                                                                                                  pV259))) 
                                                                                               (cons 
                                                                                                t2 
                                                                                                nil)) 
                                                                                              pV259))))))))) 
                                                                       (if (eq 
                                                                            (car 
                                                                             pV261) 
                                                                            :|Fun|) 
                                                                           (let ((pV266 
                                                                                  (cdr 
                                                                                   pV261))) 
                                                                             (let ((pV267 
                                                                                    (svref 
                                                                                     pV266 
                                                                                     0))) 
                                                                               (if (consp 
                                                                                    pV262) 
                                                                                   (if (null 
                                                                                        (cdr 
                                                                                         pV262)) 
                                                                                       (return 
                                                                                        (let ((alpha 
                                                                                               (UTILITIES::freshMetaTyVar 
                                                                                                pV259))) 
                                                                                          (let ((t1 
                                                                                                 (TYPECHECKER::elaborateTerm-3 
                                                                                                  env 
                                                                                                  pV261 
                                                                                                  (cons 
                                                                                                   :|Arrow| 
                                                                                                   (vector 
                                                                                                    alpha 
                                                                                                    term_sort 
                                                                                                    pV259))))) 
                                                                                            (let ((t2 
                                                                                                   (TYPECHECKER::elaborateTerm-3 
                                                                                                    env 
                                                                                                    (car 
                                                                                                     pV262) 
                                                                                                    alpha))) 
                                                                                              (if (svref 
                                                                                                   env 
                                                                                                   3) 
                                                                                                  (cons 
                                                                                                   :|ApplyN| 
                                                                                                   (cons 
                                                                                                    (cons 
                                                                                                     t1 
                                                                                                     (cons 
                                                                                                      t2 
                                                                                                      nil)) 
                                                                                                    pV259)) 
                                                                                                  (if (slang-built-in::slang-term-equals-2 
                                                                                                       pV267 
                                                                                                       '(:|Equals|)) 
                                                                                                      (cons 
                                                                                                       :|ApplyN| 
                                                                                                       (cons 
                                                                                                        (cons 
                                                                                                         (TYPECHECKER::adjustEqualitySort-4 
                                                                                                          env 
                                                                                                          (svref 
                                                                                                           pV266 
                                                                                                           1) 
                                                                                                          t1 
                                                                                                          t2) 
                                                                                                         (cons 
                                                                                                          t2 
                                                                                                          nil)) 
                                                                                                        pV259)) 
                                                                                                      (if (TYPECHECKER::sortCognizantOperator? 
                                                                                                           pV267) 
                                                                                                          (XML::addSortAsLastTerm-4 
                                                                                                           env 
                                                                                                           trm 
                                                                                                           (cons 
                                                                                                            :|ApplyN| 
                                                                                                            (cons 
                                                                                                             (cons 
                                                                                                              t1 
                                                                                                              (cons 
                                                                                                               t2 
                                                                                                               nil)) 
                                                                                                             pV259)) 
                                                                                                           term_sort) 
                                                                                                          (cons 
                                                                                                           :|ApplyN| 
                                                                                                           (cons 
                                                                                                            (cons 
                                                                                                             t1 
                                                                                                             (cons 
                                                                                                              t2 
                                                                                                              nil)) 
                                                                                                            pV259)))))))))))))) 
                                                                       (if (consp 
                                                                            pV262) 
                                                                           (if (null 
                                                                                (cdr 
                                                                                 pV262)) 
                                                                               (return 
                                                                                (let ((alpha 
                                                                                       (UTILITIES::freshMetaTyVar 
                                                                                        pV259))) 
                                                                                  (let ((t2 
                                                                                         (TYPECHECKER::elaborateTerm-3 
                                                                                          env 
                                                                                          (car 
                                                                                           pV262) 
                                                                                          alpha))) 
                                                                                    (cons 
                                                                                     :|ApplyN| 
                                                                                     (cons 
                                                                                      (cons 
                                                                                       (TYPECHECKER::elaborateTerm-3 
                                                                                        env 
                                                                                        pV261 
                                                                                        (cons 
                                                                                         :|Arrow| 
                                                                                         (vector 
                                                                                          alpha 
                                                                                          term_sort 
                                                                                          pV259))) 
                                                                                       (cons 
                                                                                        t2 
                                                                                        nil)) 
                                                                                      pV259)))))))))) 
                                                          (return 
                                                           (labels 
                                                             ((tagTermWithInfixInfo 
                                                               (term) 
                                                               (block 
                                                                nil 
                                                                (if (eq 
                                                                     (car term) 
                                                                     :|Fun|) 
                                                                    (let ((pV233 
                                                                           (cdr 
                                                                            term))) 
                                                                      (let ((pV236 
                                                                             (svref 
                                                                              pV233 
                                                                              2))
                                                                            (pV234 
                                                                             (svref 
                                                                              pV233 
                                                                              0))) 
                                                                        (if (eq 
                                                                             (car 
                                                                              pV234) 
                                                                             :|OneName|) 
                                                                            (let ((pV238 
                                                                                   (cdr 
                                                                                    pV234))) 
                                                                              (let ((pV244 
                                                                                     (cdr 
                                                                                      pV238))
                                                                                    (pV243 
                                                                                     (car 
                                                                                      pV238))) 
                                                                                (progn (if (eq 
                                                                                            (car 
                                                                                             pV244) 
                                                                                            :|Nonfix|) 
                                                                                           (return 
                                                                                            (cons 
                                                                                             :|Nonfix| 
                                                                                             term)) 
                                                                                           (if (eq 
                                                                                                (car 
                                                                                                 pV244) 
                                                                                                :|Infix|) 
                                                                                               (return 
                                                                                                (cons 
                                                                                                 :|Infix| 
                                                                                                 (cons 
                                                                                                  term 
                                                                                                  (cdr 
                                                                                                   pV244)))))) 
                                                                                       (return 
                                                                                        (let ((x0 
                                                                                               (TYPECHECKER::consistentTag 
                                                                                                (UTILITIES::findVarOrOps-3 
                                                                                                 env 
                                                                                                 pV243 
                                                                                                 pV236)))) 
                                                                                          (let ((pV208 
                                                                                                 (cdr 
                                                                                                  x0))) 
                                                                                            (block 
                                                                                             nil 
                                                                                             (if (eq 
                                                                                                  t 
                                                                                                  (car 
                                                                                                   x0)) 
                                                                                                 (progn (if (eq 
                                                                                                             (car 
                                                                                                              pV208) 
                                                                                                             :|Some|) 
                                                                                                            (return 
                                                                                                             (cons 
                                                                                                              :|Infix| 
                                                                                                              (cons 
                                                                                                               term 
                                                                                                               (cdr 
                                                                                                                pV208))))) 
                                                                                                        (return 
                                                                                                         (cons 
                                                                                                          :|Nonfix| 
                                                                                                          term)))) 
                                                                                             (return 
                                                                                              (progn (UTILITIES::error-3 
                                                                                                      env 
                                                                                                      (STRING-SPEC::^-2 
                                                                                                       "Inconsistent infix information for overloaded op: " 
                                                                                                       pV243) 
                                                                                                      pV236) 
                                                                                                     (cons 
                                                                                                      :|Nonfix| 
                                                                                                      term)))))))))) 
                                                                            (if (eq 
                                                                                 (car 
                                                                                  pV234) 
                                                                                 :|TwoNames|) 
                                                                                (let ((pV237 
                                                                                       (cdr 
                                                                                        pV234))) 
                                                                                  (let ((pV241 
                                                                                         (svref 
                                                                                          pV237 
                                                                                          2))) 
                                                                                    (progn (if (eq 
                                                                                                (car 
                                                                                                 pV241) 
                                                                                                :|Nonfix|) 
                                                                                               (return 
                                                                                                (cons 
                                                                                                 :|Nonfix| 
                                                                                                 term)) 
                                                                                               (if (eq 
                                                                                                    (car 
                                                                                                     pV241) 
                                                                                                    :|Infix|) 
                                                                                                   (return 
                                                                                                    (cons 
                                                                                                     :|Infix| 
                                                                                                     (cons 
                                                                                                      term 
                                                                                                      (cdr 
                                                                                                       pV241)))))) 
                                                                                           (return 
                                                                                            (let ((pV222 
                                                                                                   (UTILITIES::findTheOp2-3 
                                                                                                    env 
                                                                                                    (svref 
                                                                                                     pV237 
                                                                                                     0) 
                                                                                                    (svref 
                                                                                                     pV237 
                                                                                                     1)))) 
                                                                                              (block 
                                                                                               nil 
                                                                                               (if (eq 
                                                                                                    (car 
                                                                                                     pV222) 
                                                                                                    :|Some|) 
                                                                                                   (let ((pV225 
                                                                                                          (svref 
                                                                                                           (cdr 
                                                                                                            pV222) 
                                                                                                           1))) 
                                                                                                     (if (eq 
                                                                                                          (car 
                                                                                                           pV225) 
                                                                                                          :|Infix|) 
                                                                                                         (return 
                                                                                                          (cons 
                                                                                                           :|Infix| 
                                                                                                           (cons 
                                                                                                            term 
                                                                                                            (cdr 
                                                                                                             pV225))))))) 
                                                                                               (return 
                                                                                                (cons 
                                                                                                 :|Nonfix| 
                                                                                                 term)))))))) 
                                                                                (if (eq 
                                                                                     (car 
                                                                                      pV234) 
                                                                                     :|Equals|) 
                                                                                    (return 
                                                                                     (cons 
                                                                                      :|Infix| 
                                                                                      (cons 
                                                                                       term 
                                                                                       (cons 
                                                                                        '(:|Left|) 
                                                                                        20)))))))))) 
                                                                (return 
                                                                 (cons 
                                                                  :|Nonfix| 
                                                                  term))))) 
                                                             (TYPECHECKER::elaborateTerm-3 
                                                              env 
                                                              (INFIX::resolveInfixes-3 
                                                               #'tagTermWithInfixInfo 
                                                               pV259 
                                                               pV258) 
                                                              term_sort))))))))))))))))) 
   (return trm)))

(defun TYPECHECKER::elaboratePosSpec-2 (given_spec |!filename|) 
  (progn (UTILITIES::initializeMetaTyVar-0) 
         (let ((env_1 (UTILITIES::initialEnv-2 given_spec |!filename|))) 
           (block 
            nil 
            (let ((pV117 (svref given_spec 3))
                  (pV116 (svref given_spec 2))
                  (pV115 (svref given_spec 1))
                  (pV114 (svref given_spec 0))) 
              (let ((pV121 (svref pV114 3))
                    (pV120 (svref pV114 2))) 
                (return 
                 (labels 
                   ((elaborate_sort_0 (pV8 pV9 pV10) 
                     (block 
                      nil 
                      (let ((pV13 (svref pV10 2))) 
                        (return 
                         (if (BOOLEAN-SPEC::~ 
                              (ANNSPEC::memberQualifiedId-3 pV8 pV9 pV121)) 
                             pV10 
                             (vector 
                              (svref pV10 0) 
                              (svref pV10 1) 
                              (labels 
                                ((map--local-0 (l) 
                                  (block 
                                   nil 
                                   (if (null l) 
                                       (return nil) 
                                       (if (consp l) 
                                           (return 
                                            (cons 
                                             (TYPECHECKER::checkSortScheme-2 
                                              env_1 
                                              (car l)) 
                                             (map--local-0 (cdr l)))))) 
                                   (error 
                                    "Nonexhaustive match failure in elaboratePosSpec")))) 
                                (map--local-0 pV13)))))) 
                      (error "Nonexhaustive match failure in elaboratePosSpec")))) 
                   (let ((sorts_1 
                          (ANNSPEC::mapiAQualifierMap-1-1 
                           #'(lambda (pV) 
                              (elaborate_sort_0 
                               (svref pV 0) 
                               (svref pV 1) 
                               (svref pV 2))) 
                           pV117))) 
                     (let ((env_2 
                            (UTILITIES::addConstrsEnv-2 
                             env_1 
                             (vector pV114 pV115 pV116 sorts_1)))) 
                       (labels 
                         ((elaborate_op_1 (poly?) 
                           #'(lambda (pV) 
                              (let ((pV21 (svref pV 2))) 
                                (block 
                                 nil 
                                 (let ((pV25 (svref pV21 3))
                                       (pV24 (svref pV21 2))) 
                                   (return 
                                    (if (BOOLEAN-SPEC::~ 
                                         (ANNSPEC::memberQualifiedId-3 
                                          (svref pV 0) 
                                          (svref pV 1) 
                                          pV120)) 
                                        pV21 
                                        (let ((sort_scheme_2 
                                               (TYPECHECKER::checkSortScheme-2 
                                                env_2 
                                                pV24))) 
                                          (vector 
                                           (svref pV21 0) 
                                           (svref pV21 1) 
                                           sort_scheme_2 
                                           (labels 
                                             ((map--local-0 (l) 
                                               (block 
                                                nil 
                                                (if (null l) 
                                                    (return nil) 
                                                    (if (consp l) 
                                                        (return 
                                                         (cons 
                                                          (let ((term_1 
                                                                 (cdr (car l)))) 
                                                            (let ((type_vars_1 
                                                                   (car pV24))) 
                                                              (cons 
                                                               type_vars_1 
                                                               (if (eq 
                                                                    poly? 
                                                                    (BOOLEAN-SPEC::~ 
                                                                     (slang-built-in::slang-term-equals-2 
                                                                      type_vars_1 
                                                                      nil))) 
                                                                   (TYPECHECKER::elaborateTermTop-3 
                                                                    env_2 
                                                                    term_1 
                                                                    (cdr 
                                                                     sort_scheme_2)) 
                                                                   term_1)))) 
                                                          (map--local-0 (cdr l)))))) 
                                                (error 
                                                 "Nonexhaustive match failure in elaboratePosSpec")))) 
                                             (map--local-0 pV25))))))) 
                                 (error 
                                  "Nonexhaustive match failure in elaboratePosSpec")))))) 
                         (let ((ops_2_a 
                                (ANNSPEC::mapiAQualifierMap-1-1 
                                 (elaborate_op_1 t) 
                                 pV115))) 
                           (let ((ops_2_b 
                                  (ANNSPEC::mapiAQualifierMap-1-1 
                                   (elaborate_op_1 nil) 
                                   ops_2_a))) 
                             (let ((ops_2_c 
                                    (ANNSPEC::mapiAQualifierMap-1-1 
                                     (elaborate_op_1 t) 
                                     ops_2_b))) 
                               (let ((ops_2 
                                      (ANNSPEC::mapiAQualifierMap-1-1 
                                       (elaborate_op_1 nil) 
                                       ops_2_c))) 
                                 (labels 
                                   ((elaborate_fm_1 
                                     (prop_type name type_vars_1 fm_1) 
                                     (vector 
                                      prop_type 
                                      name 
                                      type_vars_1 
                                      (TYPECHECKER::elaborateTermTop-3 
                                       env_2 
                                       fm_1 
                                       TYPECHECKER::type_bool)))) 
                                   (let ((props_2 
                                          (LIST-SPEC::map-1-1 
                                           #'(lambda (pV) 
                                              (elaborate_fm_1 
                                               (svref pV 0) 
                                               (svref pV 1) 
                                               (svref pV 2) 
                                               (svref pV 3))) 
                                           pV116))) 
                                     (let ((env_3 (UTILITIES::secondPass env_2))) 
                                       (labels 
                                         ((elaborate_sort_2 (pV30 pV31 pV32) 
                                           (declare (ignore pV30 pV31)) 
                                           (block 
                                            nil 
                                            (let ((pV35 (svref pV32 2))) 
                                              (return 
                                               (vector 
                                                (svref pV32 0) 
                                                (svref pV32 1) 
                                                (labels 
                                                  ((map--local-0 (l) 
                                                    (block 
                                                     nil 
                                                     (if (null l) 
                                                         (return nil) 
                                                         (if (consp l) 
                                                             (return 
                                                              (cons 
                                                               (TYPECHECKER::checkSortScheme-2 
                                                                env_3 
                                                                (car l)) 
                                                               (map--local-0 
                                                                (cdr l)))))) 
                                                     (error 
                                                      "Nonexhaustive match failure in elaboratePosSpec")))) 
                                                  (map--local-0 pV35))))) 
                                            (error 
                                             "Nonexhaustive match failure in elaboratePosSpec")))) 
                                         (let ((sorts_3 
                                                (ANNSPEC::mapiAQualifierMap-1-1 
                                                 #'(lambda (pV) 
                                                    (elaborate_sort_2 
                                                     (svref pV 0) 
                                                     (svref pV 1) 
                                                     (svref pV 2))) 
                                                 sorts_1))) 
                                           (labels 
                                             ((elaborate_op_2 
                                               (pV105 pV106 pV107) 
                                               (block 
                                                nil 
                                                (let ((pV111 (svref pV107 3))) 
                                                  (return 
                                                   (if (BOOLEAN-SPEC::~ 
                                                        (ANNSPEC::memberQualifiedId-3 
                                                         pV105 
                                                         pV106 
                                                         pV120)) 
                                                       pV107 
                                                       (let ((pV102 
                                                              (TYPECHECKER::checkSortScheme-2 
                                                               env_3 
                                                               (svref pV107 2)))) 
                                                         (block 
                                                          nil 
                                                          (let ((pV104 
                                                                 (cdr pV102))
                                                                (pV103 
                                                                 (car pV102))) 
                                                            (return 
                                                             (let ((all_different? 
                                                                    (TYPECHECKER::checkDifferent-2 
                                                                     pV103 
                                                                     STRINGSET::empty))) 
                                                               (vector 
                                                                (svref pV107 0) 
                                                                (svref pV107 1) 
                                                                pV102 
                                                                (labels 
                                                                  ((map--local-0 
                                                                    (l) 
                                                                    (block 
                                                                     nil 
                                                                     (if (null l) 
                                                                         (return 
                                                                          nil) 
                                                                         (if (consp 
                                                                              l) 
                                                                             (return 
                                                                              (cons 
                                                                               (let ((term_2 
                                                                                      (cdr 
                                                                                       (car 
                                                                                        l)))) 
                                                                                 (let ((pos 
                                                                                        (METASLANG::termAnn 
                                                                                         term_2))) 
                                                                                   (let ((term_3 
                                                                                          (TYPECHECKER::elaborateTermTop-3 
                                                                                           env_3 
                                                                                           term_2 
                                                                                           pV104))) 
                                                                                     (let ((type_vars_used 
                                                                                            (let ((tv_cell 
                                                                                                   (cons 
                                                                                                    :|Ref| 
                                                                                                    nil))) 
                                                                                              (labels 
                                                                                                ((insert 
                                                                                                  (tv) 
                                                                                                  (STATE::|:=-2| 
                                                                                                   tv_cell 
                                                                                                   (LISTUTILITIES::insert-2 
                                                                                                    tv 
                                                                                                    (STATE::|!!| 
                                                                                                     tv_cell))))) 
                                                                                                (labels 
                                                                                                  ((record_type_vars_used 
                                                                                                    (|!aSrt|) 
                                                                                                    (block 
                                                                                                     nil 
                                                                                                     (if (eq 
                                                                                                          (car 
                                                                                                           |!aSrt|) 
                                                                                                          :|MetaTyVar|) 
                                                                                                         (return 
                                                                                                          (let ((pV40 
                                                                                                                 (STATE::|!!| 
                                                                                                                  (car 
                                                                                                                   (cdr 
                                                                                                                    |!aSrt|))))) 
                                                                                                            (block 
                                                                                                             nil 
                                                                                                             (let ((pV41 
                                                                                                                    (svref 
                                                                                                                     pV40 
                                                                                                                     0))) 
                                                                                                               (return 
                                                                                                                (block 
                                                                                                                 nil 
                                                                                                                 (if (eq 
                                                                                                                      (car 
                                                                                                                       pV41) 
                                                                                                                      :|Some|) 
                                                                                                                     (return 
                                                                                                                      (record_type_vars_used 
                                                                                                                       (cdr 
                                                                                                                        pV41))) 
                                                                                                                     (if (eq 
                                                                                                                          (car 
                                                                                                                           pV41) 
                                                                                                                          :|None|) 
                                                                                                                         (return 
                                                                                                                          (UTILITIES::error-3 
                                                                                                                           env_3 
                                                                                                                           (STRING-SPEC::^-2 
                                                                                                                            (STRING-SPEC::^-2 
                                                                                                                             (STRING-SPEC::^-2 
                                                                                                                              (STRING-SPEC::^-2 
                                                                                                                               "Incomplete sort for op " 
                                                                                                                               pV106) 
                                                                                                                              ":") 
                                                                                                                             STRING-SPEC::newline) 
                                                                                                                            (ANNSPECPRINTER::printSort 
                                                                                                                             |!aSrt|)) 
                                                                                                                           pos)))) 
                                                                                                                 (error 
                                                                                                                  "Nonexhaustive match failure in elaboratePosSpec")))) 
                                                                                                             (error 
                                                                                                              "Nonexhaustive match failure in elaboratePosSpec")))) 
                                                                                                         (if (eq 
                                                                                                              (car 
                                                                                                               |!aSrt|) 
                                                                                                              :|TyVar|) 
                                                                                                             (return 
                                                                                                              (insert 
                                                                                                               (car 
                                                                                                                (cdr 
                                                                                                                 |!aSrt|)))) 
                                                                                                             (if (eq 
                                                                                                                  (car 
                                                                                                                   |!aSrt|) 
                                                                                                                  :|Product|) 
                                                                                                                 (let ((pV91 
                                                                                                                        (car 
                                                                                                                         (cdr 
                                                                                                                          |!aSrt|)))) 
                                                                                                                   (return 
                                                                                                                    (labels 
                                                                                                                      ((app--local-0 
                                                                                                                        (l1) 
                                                                                                                        (block 
                                                                                                                         nil 
                                                                                                                         (if (null 
                                                                                                                              l1) 
                                                                                                                             (return 
                                                                                                                              nil) 
                                                                                                                             (if (consp 
                                                                                                                                  l1) 
                                                                                                                                 (return 
                                                                                                                                  (progn (record_type_vars_used 
                                                                                                                                          (cdr 
                                                                                                                                           (car 
                                                                                                                                            l1))) 
                                                                                                                                         (app--local-0 
                                                                                                                                          (cdr 
                                                                                                                                           l1)))))) 
                                                                                                                         (error 
                                                                                                                          "Nonexhaustive match failure in elaboratePosSpec")))) 
                                                                                                                      (app--local-0 
                                                                                                                       pV91)))) 
                                                                                                                 (if (eq 
                                                                                                                      (car 
                                                                                                                       |!aSrt|) 
                                                                                                                      :|CoProduct|) 
                                                                                                                     (let ((pV89 
                                                                                                                            (car 
                                                                                                                             (cdr 
                                                                                                                              |!aSrt|)))) 
                                                                                                                       (return 
                                                                                                                        (labels 
                                                                                                                          ((app--local-0 
                                                                                                                            (l1) 
                                                                                                                            (block 
                                                                                                                             nil 
                                                                                                                             (if (null 
                                                                                                                                  l1) 
                                                                                                                                 (return 
                                                                                                                                  nil) 
                                                                                                                                 (if (consp 
                                                                                                                                      l1) 
                                                                                                                                     (return 
                                                                                                                                      (progn (let ((pV55 
                                                                                                                                                    (cdr 
                                                                                                                                                     (car 
                                                                                                                                                      l1)))) 
                                                                                                                                               (block 
                                                                                                                                                nil 
                                                                                                                                                (if (eq 
                                                                                                                                                     (car 
                                                                                                                                                      pV55) 
                                                                                                                                                     :|Some|) 
                                                                                                                                                    (return 
                                                                                                                                                     (record_type_vars_used 
                                                                                                                                                      (cdr 
                                                                                                                                                       pV55)))) 
                                                                                                                                                (return 
                                                                                                                                                 nil))) 
                                                                                                                                             (app--local-0 
                                                                                                                                              (cdr 
                                                                                                                                               l1)))))) 
                                                                                                                             (error 
                                                                                                                              "Nonexhaustive match failure in elaboratePosSpec")))) 
                                                                                                                          (app--local-0 
                                                                                                                           pV89)))) 
                                                                                                                     (if (eq 
                                                                                                                          (car 
                                                                                                                           |!aSrt|) 
                                                                                                                          :|Subsort|) 
                                                                                                                         (return 
                                                                                                                          (record_type_vars_used 
                                                                                                                           (svref 
                                                                                                                            (cdr 
                                                                                                                             |!aSrt|) 
                                                                                                                            0))) 
                                                                                                                         (if (eq 
                                                                                                                              (car 
                                                                                                                               |!aSrt|) 
                                                                                                                              :|Quotient|) 
                                                                                                                             (return 
                                                                                                                              (record_type_vars_used 
                                                                                                                               (svref 
                                                                                                                                (cdr 
                                                                                                                                 |!aSrt|) 
                                                                                                                                0))) 
                                                                                                                             (if (eq 
                                                                                                                                  (car 
                                                                                                                                   |!aSrt|) 
                                                                                                                                  :|Arrow|) 
                                                                                                                                 (let ((pV70 
                                                                                                                                        (cdr 
                                                                                                                                         |!aSrt|))) 
                                                                                                                                   (return 
                                                                                                                                    (progn (record_type_vars_used 
                                                                                                                                            (svref 
                                                                                                                                             pV70 
                                                                                                                                             0)) 
                                                                                                                                           (record_type_vars_used 
                                                                                                                                            (svref 
                                                                                                                                             pV70 
                                                                                                                                             1))))) 
                                                                                                                                 (if (eq 
                                                                                                                                      (car 
                                                                                                                                       |!aSrt|) 
                                                                                                                                      :|Base|) 
                                                                                                                                     (return 
                                                                                                                                      (LIST-SPEC::app-1-1 
                                                                                                                                       #'record_type_vars_used 
                                                                                                                                       (svref 
                                                                                                                                        (cdr 
                                                                                                                                         |!aSrt|) 
                                                                                                                                        1))))))))))) 
                                                                                                     (error 
                                                                                                      "Nonexhaustive match failure in elaboratePosSpec")))) 
                                                                                                  (progn (record_type_vars_used 
                                                                                                          pV104) 
                                                                                                         (STATE::|!!| 
                                                                                                          tv_cell))))))) 
                                                                                       (let ((type_vars_3_b 
                                                                                              (if (LIST-SPEC::|!null| 
                                                                                                   pV103) 
                                                                                                  type_vars_used 
                                                                                                  (if ( =  
                                                                                                       (LIST-SPEC::|!length| 
                                                                                                        type_vars_used) 
                                                                                                       (LIST-SPEC::|!length| 
                                                                                                        pV103)) 
                                                                                                      pV103 
                                                                                                      (let ((scheme 
                                                                                                             (ANNSPECPRINTER::printSortScheme-2 
                                                                                                              pV103 
                                                                                                              pV104))) 
                                                                                                        (progn (UTILITIES::error-3 
                                                                                                                env_3 
                                                                                                                (STRING-SPEC::^-2 
                                                                                                                 "mismatch between bound and free variables " 
                                                                                                                 scheme) 
                                                                                                                pos) 
                                                                                                               pV103)))))) 
                                                                                         (progn (if all_different? 
                                                                                                    nil 
                                                                                                    (UTILITIES::error-3 
                                                                                                     env_3 
                                                                                                     (STRING-SPEC::^-2 
                                                                                                      "Repeated sort variables contained in " 
                                                                                                      (ANNSPECPRINTER::printSortScheme-2 
                                                                                                       type_vars_3_b 
                                                                                                       pV104)) 
                                                                                                     pos)) 
                                                                                                (cons 
                                                                                                 type_vars_3_b 
                                                                                                 term_3))))))) 
                                                                               (map--local-0 
                                                                                (cdr 
                                                                                 l)))))) 
                                                                     (error 
                                                                      "Nonexhaustive match failure in elaboratePosSpec")))) 
                                                                  (map--local-0 
                                                                   pV111)))))) 
                                                          (error 
                                                           "Nonexhaustive match failure in elaboratePosSpec")))))) 
                                                (error 
                                                 "Nonexhaustive match failure in elaboratePosSpec")))) 
                                             (let ((ops_3 
                                                    (ANNSPEC::mapiAQualifierMap-1-1 
                                                     #'(lambda (pV) 
                                                        (elaborate_op_2 
                                                         (svref pV 0) 
                                                         (svref pV 1) 
                                                         (svref pV 2))) 
                                                     ops_2))) 
                                               (labels 
                                                 ((elaborate_fm_2 
                                                   (prop_type 
                                                    name 
                                                    type_vars_2 
                                                    fm_2) 
                                                   (vector 
                                                    prop_type 
                                                    name 
                                                    type_vars_2 
                                                    (TYPECHECKER::elaborateTermTop-3 
                                                     env_3 
                                                     fm_2 
                                                     TYPECHECKER::type_bool)))) 
                                                 (let ((props_3 
                                                        (LIST-SPEC::map-1-1 
                                                         #'(lambda (pV) 
                                                            (elaborate_fm_2 
                                                             (svref pV 0) 
                                                             (svref pV 1) 
                                                             (svref pV 2) 
                                                             (svref pV 3))) 
                                                         props_2))) 
                                                   (let ((pV112 
                                                          (UTILITIES::checkErrors 
                                                           env_3))) 
                                                     (block 
                                                      nil 
                                                      (if (null pV112) 
                                                          (return 
                                                           (let ((x0 
                                                                  (POSSPECTOSPEC::convertPosSpecToSpec-4 
                                                                   pV114 
                                                                   ops_3 
                                                                   props_3 
                                                                   sorts_3))) 
                                                             (cons 
                                                              :|Spec| 
                                                              (vector 
                                                               (svref x0 0) 
                                                               (svref x0 1) 
                                                               (svref x0 2) 
                                                               (svref x0 3)))))) 
                                                      (return 
                                                       (cons :|Errors| pV112)))))))))))))))))))))))) 
            (error "Nonexhaustive match failure in elaboratePosSpec")))))

(defun SPECCALC::elaborateSpecM-1-1 (spc x-1) 
  (let ((x0 (SPECCALC::getCurrentUID x-1))) 
    (let ((pV8 (car x0))
          (pV9 (cdr x0))) 
      (block 
       nil 
       (if (eq (car pV8) :|Ok|) 
           (return 
            (let ((x0 
                   (SPECCALC::return-1-1 
                    (STRING-SPEC::^-2 (SPECCALC::uidToFullPath (cdr pV8)) ".sw") 
                    pV9))) 
              (let ((pV4 (car x0))
                    (pV5 (cdr x0))) 
                (block 
                 nil 
                 (if (eq (car pV4) :|Ok|) 
                     (return 
                      (let ((pV1 (TYPECHECKER::elaboratePosSpec-2 spc (cdr pV4)))) 
                        (block 
                         nil 
                         (if (eq (car pV1) :|Spec|) 
                             (return (SPECCALC::return-1-1 (cdr pV1) pV5)) 
                             (if (eq (car pV1) :|Errors|) 
                                 (return 
                                  (SPECCALC::raise-1-1 
                                   (cons :|TypeCheckErrors| (cdr pV1)) 
                                   pV5)))) 
                         (error "Nonexhaustive match failure in elaborateSpecM")))) 
                     (if (eq (car pV4) :|Exception|) 
                         (return (cons (cons :|Exception| (cdr pV4)) pV5)))) 
                 (error "Nonexhaustive match failure in elaborateSpecM"))))) 
           (if (eq (car pV8) :|Exception|) 
               (return (cons (cons :|Exception| (cdr pV8)) pV9)))) 
       (error "Nonexhaustive match failure in elaborateSpecM")))))

(defun SPECCALC::elaborateSpecM (x1) 
  #'(lambda (x2) (SPECCALC::elaborateSpecM-1-1 x1 x2)))

(defun SPECCALC::elaborateSpecM-4 (x0 x1 x2 x3) 
  (SPECCALC::elaborateSpecM (vector x0 x1 x2 x3)))

(defun SPECCALC::emptyGlobalContext-0 () 
  (SPECCALC::setGlobalContext-1-1 POLYMAP::emptyMap nil))

(defun SPECCALC::emptyGlobalContext (ignore) 
  (declare (ignore ignore)) 
  (SPECCALC::emptyGlobalContext-0))

(defun SPECCALC::equivFun? (x1) 
  #'(lambda (x2) (SPECCALC::equivFun?-1-1 x1 x2)))

(defun SPECCALC::equivFun?-4 (x0 x1 x2 x3) 
  (SPECCALC::equivFun? (vector x0 x1 x2 x3)))

(defun SPECCALC::equivList? (x1) 
  #'(lambda (x2) (SPECCALC::equivList?-1-1 x1 x2)))

(defun SPECCALC::equivList?-4 (x0 x1 x2 x3) 
  (SPECCALC::equivList? (vector x0 x1 x2 x3)))

(defun SPECCALC::equivOpt?-1-1 (spc pV) 
  (let ((x (svref pV 0))
        (y (svref pV 1))) 
    (block 
     nil 
     (if (eq (car x) :|None|) 
         (if (eq (car y) :|None|) (return t)) 
         (if (eq (car x) :|Some|) 
             (if (eq (car y) :|Some|) 
                 (return 
                  (funcall (funcall (svref pV 2) spc) (cons (cdr x) (cdr y))))))) 
     (return nil))))

(defun SPECCALC::equivOpt? (x1) 
  #'(lambda (x2) (SPECCALC::equivOpt?-1-1 x1 x2)))

(defun SPECCALC::equivOpt?-4 (x0 x1 x2 x3) 
  (SPECCALC::equivOpt? (vector x0 x1 x2 x3)))

(defun SPECCALC::equivPattern? (x1) 
  #'(lambda (x2) (SPECCALC::equivPattern?-1-1 x1 x2)))

(defun SPECCALC::equivPattern?-4 (x0 x1 x2 x3) 
  (SPECCALC::equivPattern? (vector x0 x1 x2 x3)))

(defun SPECCALC::equivSort?-4 (x0 x1 x2 x3) 
  (SPECCALC::equivSort? (vector x0 x1 x2 x3)))

(defun SPECCALC::equivSortScheme? (x1) 
  #'(lambda (x2) (SPECCALC::equivSortScheme?-1-1 x1 x2)))

(defun SPECCALC::equivSortScheme?-4 (x0 x1 x2 x3) 
  (SPECCALC::equivSortScheme? (vector x0 x1 x2 x3)))

(defun SPECCALC::equivTerm?-4 (x0 x1 x2 x3) 
  (SPECCALC::equivTerm? (vector x0 x1 x2 x3)))

(defun SPECCALC::equivTermScheme? (x1) 
  #'(lambda (x2) (SPECCALC::equivTermScheme?-1-1 x1 x2)))

(defun SPECCALC::equivTermScheme?-4 (x0 x1 x2 x3) 
  (SPECCALC::equivTermScheme? (vector x0 x1 x2 x3)))

(defun SPECCALC::equivVar?-4 (x0 x1 x2 x3) 
  (SPECCALC::equivVar? (vector x0 x1 x2 x3)))

(defun SPECCALC::generateFileList-1-1 (unitId x-1) 
  (SPECCALC::return-1-1 
   (cons 
    (cons unitId (STRING-SPEC::^-2 (SPECCALC::uidToFullPath unitId) ".sw")) 
    nil) 
   x-1))

(defun SPECCALC::generateFileList (x1) 
  #'(lambda (x2) (SPECCALC::generateFileList-1-1 x1 x2)))

(defun SPECCALC::lookupInLocalContext-1-1 (relativeUnitId x-1) 
  (let ((x0 (SPECCALC::readGlobalVar-1-1 "LocalContext" x-1))) 
    (let ((pV1 (car x0))
          (pV2 (cdr x0))) 
      (block 
       nil 
       (if (eq (car pV1) :|Ok|) 
           (return 
            (SPECCALC::return-1-1 
             (POLYMAP::evalPartial-1-1 (cdr pV1) relativeUnitId) 
             pV2)) 
           (if (eq (car pV1) :|Exception|) 
               (return (cons (cons :|Exception| (cdr pV1)) pV2)))) 
       (error "Nonexhaustive match failure in lookupInLocalContext")))))

(defun SPECCALC::fileExistsAndReadable?-1-1 (fileName x-1) 
  (SPECCALC::return-1-1 (IO-SPEC::fileExistsAndReadable fileName) x-1))

(defun SPECCALC::evaluateColimit-1-1 (term x-1) 
  (let ((x0 (SPECCALC::getCurrentUID x-1))) 
    (let ((pV4 (car x0))
          (pV5 (cdr x0))) 
      (block 
       nil 
       (if (eq (car pV4) :|Ok|) 
           (return 
            (SPECCALC::monadSeq-1-1 
             (cons 
              (SPECCALC::|!print| 
               (STRING-SPEC::^-2 
                (STRING-SPEC::^-2 
                 ";;; Elaborating diagram-colimit at " 
                 (SPECCALC::uidToString (cdr pV4))) 
                "
")) 
              (SPECCALC::monadBind-2 
               (SPECCALC::evaluateTermInfo term) 
               #'(lambda (pV) 
                  (let ((value (svref pV 0))) 
                    (block 
                     nil 
                     (if (eq (car value) :|Diag|) 
                         (let ((pV3 (cdr value))) 
                           (return 
                            (SPECCALC::|!return| 
                             (vector 
                              (let ((x01 
                                     (CAT::colimit-1-1 
                                      (FUNCTOR::cod (CAT::functor pV3)) 
                                      pV3))) 
                                (cons :|Colimit| (cons (car x01) (cdr x01)))) 
                              (svref pV 1) 
                              (svref pV 2)))))) 
                     (return 
                      (SPECCALC::raise 
                       (cons 
                        :|TypeCheck| 
                        (cons 
                         (SPECCALC::positionOf term) 
                         "argument of colimit is not a diagram"))))))))) 
             pV5)) 
           (if (eq (car pV4) :|Exception|) 
               (return (cons (cons :|Exception| (cdr pV4)) pV5)))) 
       (error "Nonexhaustive match failure in evaluateColimit")))))

(defun SPECCALC::ppMorphism-4 (pV1 pV2 opMap sortMap) 
  (declare (ignore pV1 pV2)) 
  (WADLERLINDIG::ppGroup 
   (WADLERLINDIG::ppConcat 
    (cons 
     (WADLERLINDIG::ppString "sort map = ") 
     (cons 
      (SPECCALC::ppMorphMap sortMap) 
      (cons 
       WADLERLINDIG::ppNewline 
       (cons 
        (WADLERLINDIG::ppString "op map = ") 
        (cons (SPECCALC::ppMorphMap opMap) nil))))))))

(defun SPECCALC::ppMorphism (x) 
  (SPECCALC::ppMorphism-4 (svref x 0) (svref x 1) (svref x 2) (svref x 3)))

(defun SPECCALC::getBase-0 () (SPECCALC::readGlobalVar-1-1 "BaseInfo" nil))

(defun SPECCALC::getBase (ignore) 
  (declare (ignore ignore)) 
  (SPECCALC::getBase-0))

(defun SPECCALC::getBaseSpec-0 () 
  (labels 
    ((myHandler (pV1) 
      (declare (ignore pV1)) 
      (SYSTEM-SPEC::fail "!! Can't find base spec !!"))) 
    (SPECCALC::run 
     (funcall (SPECCALC::|!catch| 
               (SPECCALC::monadBind-2 
                #'SPECCALC::getBase 
                #'(lambda (pV) 
                   (let ((optBaseUnitId (car pV))) 
                     (block 
                      nil 
                      (if (eq (car optBaseUnitId) :|None|) 
                          (return 
                           (SPECCALC::raise (cons :|Fail| "No Base Spec"))) 
                          (if (eq (car optBaseUnitId) :|Some|) 
                              (return (SPECCALC::|!return| (cdr pV))))) 
                      (error "Nonexhaustive match failure in getBaseSpec")))))) 
              #'myHandler))))

(defun SPECCALC::evaluateDiag-1-1 (elems x-1) 
  (let ((x0 (SPECCALC::getCurrentUID x-1))) 
    (let ((pV1 (car x0))
          (pV2 (cdr x0))) 
      (block 
       nil 
       (if (eq (car pV1) :|Ok|) 
           (return 
            (SPECCALC::monadSeq-1-1 
             (cons 
              (SPECCALC::|!print| 
               (STRING-SPEC::^-2 
                (STRING-SPEC::^-2 
                 ";;; Elaborating diagram-term at " 
                 (SPECCALC::uidToString (cdr pV1))) 
                "
")) 
              (SPECCALC::monadBind-2 
               (funcall (funcall (SPECCALC::foldM #'SPECCALC::evaluateDiagElem) 
                                 (vector 
                                  (CAT::emptyDiagram (SPECCALC::specCat-0)) 
                                  0 
                                  nil)) 
                        elems) 
               #'(lambda (pV) 
                  (let ((dgm (svref pV 0))) 
                    (SPECCALC::|!return| 
                     (vector 
                      (cons :|Diag| (cons (car dgm) (cdr dgm))) 
                      (svref pV 1) 
                      (svref pV 2))))))) 
             pV2)) 
           (if (eq (car pV1) :|Exception|) 
               (return (cons (cons :|Exception| (cdr pV1)) pV2)))) 
       (error "Nonexhaustive match failure in evaluateDiag")))))

(defun SPECCALC::evaluateUID (x1) 
  #'(lambda (x2) #'(lambda (x3) (SPECCALC::evaluateUID-1-1-1 x1 x2 x3))))

(defun SPECCALC::monadSeq (x1) 
  #'(lambda (x2) (SPECCALC::monadSeq-1-1 x1 x2)))

(defun SPECCALC::monadSeq-2 (x0 x1) (SPECCALC::monadSeq (cons x0 x1)))

(defun SPECCALC::mapM (x1) 
  #'(lambda (x2) #'(lambda (x3) (SPECCALC::mapM-1-1-1 x1 x2 x3))))

(defun SPECCALC::removeLast (x1) 
  #'(lambda (x2) (SPECCALC::removeLast-1-1 x1 x2)))

(defun SPECCALC::splitAtChar-1-1 (|!char| charList) 
  (labels 
    ((parseCharList (chars) 
      (block 
       nil 
       (if (null chars) 
           (return nil) 
           (if (consp chars) 
               (return 
                (if (eq (car chars) |!char|) 
                    (parseCharList (cdr chars)) 
                    (let ((pV8 
                           (labels 
                             ((takeWhile--local-0 (l) 
                               (block 
                                nil 
                                (if (null l) 
                                    (return (cons nil nil)) 
                                    (if (consp l) 
                                        (let ((pV6 (car l))) 
                                          (return 
                                           (if (BOOLEAN-SPEC::~ (eq pV6 |!char|)) 
                                               (let ((pV1 
                                                      (takeWhile--local-0 
                                                       (cdr l)))) 
                                                 (block 
                                                  nil 
                                                  (return 
                                                   (cons 
                                                    (cons pV6 (car pV1)) 
                                                    (cdr pV1))) 
                                                  (error 
                                                   "Nonexhaustive match failure in splitAtChar"))) 
                                               (cons nil l)))))) 
                                (error 
                                 "Nonexhaustive match failure in splitAtChar")))) 
                             (takeWhile--local-0 chars)))) 
                      (block 
                       nil 
                       (return (cons (car pV8) (parseCharList (cdr pV8)))) 
                       (error "Nonexhaustive match failure in splitAtChar"))))))) 
       (error "Nonexhaustive match failure in splitAtChar")))) 
    (parseCharList charList)))

(defun SPECCALC::|!error| (x1) #'(lambda (x2) (SPECCALC::error-1-1 x1 x2)))

(defun SPECCALC::first-1-1 (elems x-1) 
  (block 
   nil 
   (if (null elems) 
       (return (SPECCALC::error-1-1 "first: encountered empty list" x-1)) 
       (if (consp elems) (return (SPECCALC::return-1-1 (car elems) x-1)))) 
   (error "Nonexhaustive match failure in first")))

(defun SPECCALC::|!first| (x1) #'(lambda (x2) (SPECCALC::first-1-1 x1 x2)))

(defun SPECCALC::last-1-1 (elems x-1) 
  (block 
   nil 
   (if (null elems) 
       (return (SPECCALC::error-1-1 "last: encountered empty list" x-1)) 
       (if (consp elems) 
           (let ((pV5 (cdr elems))) 
             (progn (if (null pV5) 
                        (return (SPECCALC::return-1-1 (car elems) x-1))) 
                    (return (SPECCALC::last-1-1 pV5 x-1)))))) 
   (error "Nonexhaustive match failure in last")))

(defun SPECCALC::|!last| (x1) #'(lambda (x2) (SPECCALC::last-1-1 x1 x2)))

(defun SPECCALC::pathToRelativeUID-1-1 (str x-1) 
  (let ((charList (STRING-SPEC::explode str))) 
    (let ((pathElems (SPECCALC::splitAtChar-1-1 #\/ charList))) 
      (labels 
        ((validElem (charList) 
          (funcall (SPECCALC::|!when| (LIST-SPEC::member-2 #\# charList)) 
                   (SPECCALC::raise 
                    (cons 
                     :|SyntaxError| 
                     "Unit identifier path element contains # symbol"))))) 
        (SPECCALC::monadSeq-1-1 
         (cons 
          (funcall (SPECCALC::|!when| 
                    (slang-built-in::slang-term-equals-2 pathElems nil)) 
                   (SPECCALC::raise 
                    (cons :|SyntaxError| "Empty unit identifier"))) 
          (SPECCALC::monadBind-2 
           (SPECCALC::|!last| pathElems) 
           #'(lambda (suffix) 
              (SPECCALC::monadBind-2 
               (SPECCALC::removeLast pathElems) 
               #'(lambda (pathPrefix) 
                  (SPECCALC::monadSeq-2 
                   (funcall (SPECCALC::mapM #'validElem) pathPrefix) 
                   (SPECCALC::monadBind-2 
                    (SPECCALC::|!first| suffix) 
                    #'(lambda (firstSuffixChar) 
                       (SPECCALC::monadBind-2 
                        (SPECCALC::|!last| suffix) 
                        #'(lambda (lastSuffixChar) 
                           (SPECCALC::monadSeq-2 
                            (funcall (SPECCALC::|!when| (eq firstSuffixChar #\#)) 
                                     (SPECCALC::raise 
                                      (cons :|SyntaxError| "Misplaced #"))) 
                            (SPECCALC::monadSeq-2 
                             (funcall (SPECCALC::|!when| (eq lastSuffixChar #\#)) 
                                      (SPECCALC::raise 
                                       (cons :|SyntaxError| "Misplaced #"))) 
                             (let ((pV30 (SPECCALC::splitAtChar-1-1 #\# suffix))) 
                               (block 
                                nil 
                                (if (null pV30) 
                                    (return 
                                     (SPECCALC::|!error| 
                                      "pathToRelativeUID: Internal error")) 
                                    (if (consp pV30) 
                                        (let ((pV32 (car pV30))
                                              (pV33 (cdr pV30))) 
                                          (if (null pV33) 
                                              (return 
                                               (block 
                                                nil 
                                                (if (consp charList) 
                                                    (if (eq #\/ (car charList)) 
                                                        (return 
                                                         (SPECCALC::|!return| 
                                                          (cons 
                                                           :|SpecPath_Relative| 
                                                           (cons 
                                                            '(:|None|) 
                                                            (labels 
                                                              ((map--local-0 
                                                                (l) 
                                                                (block 
                                                                 nil 
                                                                 (if (null l) 
                                                                     (return nil) 
                                                                     (if (consp 
                                                                          l) 
                                                                         (return 
                                                                          (cons 
                                                                           (STRING-SPEC::implode 
                                                                            (car 
                                                                             l)) 
                                                                           (map--local-0 
                                                                            (cdr 
                                                                             l)))))) 
                                                                 (error 
                                                                  "Nonexhaustive match failure in pathToRelativeUID")))) 
                                                              (map--local-0 
                                                               (LIST-SPEC::++-2 
                                                                pathPrefix 
                                                                (cons pV32 nil)))))))))) 
                                                (return 
                                                 (SPECCALC::|!return| 
                                                  (cons 
                                                   :|UnitId_Relative| 
                                                   (cons 
                                                    '(:|None|) 
                                                    (labels 
                                                      ((map--local-0 (l) 
                                                        (block 
                                                         nil 
                                                         (if (null l) 
                                                             (return nil) 
                                                             (if (consp l) 
                                                                 (return 
                                                                  (cons 
                                                                   (STRING-SPEC::implode 
                                                                    (car l)) 
                                                                   (map--local-0 
                                                                    (cdr l)))))) 
                                                         (error 
                                                          "Nonexhaustive match failure in pathToRelativeUID")))) 
                                                      (map--local-0 
                                                       (LIST-SPEC::++-2 
                                                        pathPrefix 
                                                        (cons pV32 nil)))))))))) 
                                              (if (consp pV33) 
                                                  (let ((pV35 (car pV33))) 
                                                    (if (null (cdr pV33)) 
                                                        (return 
                                                         (block 
                                                          nil 
                                                          (if (consp charList) 
                                                              (if (eq 
                                                                   #\/ 
                                                                   (car charList)) 
                                                                  (return 
                                                                   (SPECCALC::|!return| 
                                                                    (cons 
                                                                     :|SpecPath_Relative| 
                                                                     (cons 
                                                                      (cons 
                                                                       :|Some| 
                                                                       (STRING-SPEC::implode 
                                                                        pV35)) 
                                                                      (labels 
                                                                        ((map--local-0 
                                                                          (l) 
                                                                          (block 
                                                                           nil 
                                                                           (if (null 
                                                                                l) 
                                                                               (return 
                                                                                nil) 
                                                                               (if (consp 
                                                                                    l) 
                                                                                   (return 
                                                                                    (cons 
                                                                                     (STRING-SPEC::implode 
                                                                                      (car 
                                                                                       l)) 
                                                                                     (map--local-0 
                                                                                      (cdr 
                                                                                       l)))))) 
                                                                           (error 
                                                                            "Nonexhaustive match failure in pathToRelativeUID")))) 
                                                                        (map--local-0 
                                                                         (LIST-SPEC::++-2 
                                                                          pathPrefix 
                                                                          (cons 
                                                                           pV32 
                                                                           nil)))))))))) 
                                                          (return 
                                                           (SPECCALC::|!return| 
                                                            (cons 
                                                             :|UnitId_Relative| 
                                                             (cons 
                                                              (cons 
                                                               :|Some| 
                                                               (STRING-SPEC::implode 
                                                                pV35)) 
                                                              (labels 
                                                                ((map--local-0 
                                                                  (l) 
                                                                  (block 
                                                                   nil 
                                                                   (if (null l) 
                                                                       (return 
                                                                        nil) 
                                                                       (if (consp 
                                                                            l) 
                                                                           (return 
                                                                            (cons 
                                                                             (STRING-SPEC::implode 
                                                                              (car 
                                                                               l)) 
                                                                             (map--local-0 
                                                                              (cdr 
                                                                               l)))))) 
                                                                   (error 
                                                                    "Nonexhaustive match failure in pathToRelativeUID")))) 
                                                                (map--local-0 
                                                                 (LIST-SPEC::++-2 
                                                                  pathPrefix 
                                                                  (cons pV32 nil))))))))))))))))) 
                                (return 
                                 (SPECCALC::raise 
                                  (cons 
                                   :|SyntaxError| 
                                   "Unit identifier contains two or more # symbols"))))))))))))))))) 
         x-1)))))

(defun SPECCALC::pathToRelativeUID (x1) 
  #'(lambda (x2) (SPECCALC::pathToRelativeUID-1-1 x1 x2)))

(defparameter SPECTOLISP::lambdaLift? nil)

(defun SPECTOLISP::toLispEnv (spc) 
  (let ((spc (ANNSPEC::setProperties-2 spc nil))) 
    (let ((spc 
           (if SPECTOLISP::instantiateHOFns? 
               (INSTANTIATEHO::instantiateHOFns spc) 
               spc))) 
      (SPECTOLISP::|!lisp| 
       (ARITYNORMALIZE::arityNormalize 
        (PATTERNMATCH::translateMatch 
         (if SPECTOLISP::lambdaLift? (LAMBDALIFT::lambdaLift spc) spc)))))))

(defun TYPEOBLIGATIONS::makeVerificationCondition-2 (pV14 pV15) 
  (block 
   nil 
   (let ((pV19 (svref pV14 3))
         (pV18 (svref pV14 2))
         (pV17 (svref pV14 1))
         (pV16 (svref pV14 0))) 
     (return 
      (labels 
        ((insert (decl formula) 
          (block 
           nil 
           (if (eq (car decl) :|Var|) 
               (let ((pV8 (cdr decl))) 
                 (return 
                  (if (UTILITIES::isFree-2 pV8 formula) 
                      (MS::mkBind-3 '(:|Forall|) (cons pV8 nil) formula) 
                      formula))) 
               (if (eq (car decl) :|Cond|) 
                   (let ((pV7 (cdr decl))) 
                     (progn (if (eq (car pV7) :|Fun|) 
                                (let ((pV10 (svref (cdr pV7) 0))) 
                                  (if (eq (car pV10) :|Bool|) 
                                      (if (eq t (cdr pV10)) (return formula))))) 
                            (return (MS::mkImplies-2 pV7 formula)))) 
                   (if (eq (car decl) :|Let|) 
                       (return 
                        (cons 
                         :|Let| 
                         (vector (cdr decl) formula POSITION-SPEC::noPos))) 
                       (if (eq (car decl) :|LetRec|) 
                           (return 
                            (cons 
                             :|LetRec| 
                             (vector (cdr decl) formula POSITION-SPEC::noPos))))))) 
           (error "Nonexhaustive match failure in makeVerificationCondition")))) 
        (let ((term 
               (LIST-SPEC::foldl-1-1-1 
                #'(lambda (pV) (insert (car pV) (cdr pV))) 
                pV15 
                pV16))) (vector pV19 pV17 (SIMPLIFY::simplify-1-1 pV18 term)))))) 
   (error "Nonexhaustive match failure in makeVerificationCondition")))

(defun TYPEOBLIGATIONS::mkLetOrApply-2 (fntm arg) 
  (block 
   nil 
   (if (eq (car fntm) :|Lambda|) 
       (let ((pV19 (car (cdr fntm)))) 
         (if (consp pV19) 
             (let ((pV22 (car pV19))) 
               (let ((pV26 (svref pV22 2))
                     (pV25 (svref pV22 1))
                     (pV24 (svref pV22 0))) 
                 (if (eq (car pV24) :|VarPat|) 
                     (let ((pV28 (car (cdr pV24)))) 
                       (if (eq (car pV25) :|Fun|) 
                           (let ((pV33 (svref (cdr pV25) 0))) 
                             (if (eq (car pV33) :|Bool|) 
                                 (if (eq t (cdr pV33)) 
                                     (if (null (cdr pV19)) 
                                         (return 
                                          (block 
                                           nil 
                                           (if (eq (car pV26) :|Var|) 
                                               (return 
                                                (METASLANG::mapTerm-1-1 
                                                 (vector 
                                                  #'(lambda (tm) 
                                                     (block 
                                                      nil 
                                                      (if (eq (car tm) :|Var|) 
                                                          (return 
                                                           (if (slang-built-in::slang-term-equals-2 
                                                                (car (cdr tm)) 
                                                                pV28) 
                                                               arg 
                                                               tm))) 
                                                      (return tm))) 
                                                  #'FUNCTIONS::id 
                                                  #'FUNCTIONS::id) 
                                                 pV26))) 
                                           (return 
                                            (MS::mkBind-3 
                                             '(:|Forall|) 
                                             (cons pV28 nil) 
                                             (MS::mkImplies-2 
                                              (MS::mkEquality-3 
                                               (cdr pV28) 
                                               (MS::mkVar pV28) 
                                               arg) 
                                              pV26))))))))))))))))) 
   (return (cons :|Apply| (vector fntm arg POSITION-SPEC::noPos)))))

(defun TYPEOBLIGATIONS::bindPattern-3 (gamma pat tau) 
  (block 
   nil 
   (if (eq (car pat) :|AliasPat|) 
       (let ((pV68 (cdr pat))) 
         (return 
          (let ((pV5 (TYPEOBLIGATIONS::bindPattern-3 gamma (svref pV68 0) tau))) 
            (block 
             nil 
             (let ((pV7 (cdr pV5))) 
               (return 
                (let ((pV2 
                       (TYPEOBLIGATIONS::bindPattern-3 
                        (car pV5) 
                        (svref pV68 1) 
                        tau))) 
                  (block 
                   nil 
                   (return 
                    (cons 
                     (TYPEOBLIGATIONS::assertCond-2 
                      (MS::mkEquality-3 tau pV7 (cdr pV2)) 
                      (car pV2)) 
                     pV7)) 
                   (error "Nonexhaustive match failure in bindPattern"))))) 
             (error "Nonexhaustive match failure in bindPattern"))))) 
       (if (eq (car pat) :|VarPat|) 
           (let ((pV92 (car (cdr pat)))) 
             (return 
              (TYPEOBLIGATIONS::returnPattern-4 
               (TYPEOBLIGATIONS::insert-2 pV92 gamma) 
               (cons :|Var| (cons pV92 POSITION-SPEC::noPos)) 
               (cdr pV92) 
               tau))) 
           (if (eq (car pat) :|EmbedPat|) 
               (let ((pV66 (cdr pat))) 
                 (let ((pV89 (svref pV66 2))
                       (pV88 (svref pV66 1))
                       (pV87 (svref pV66 0))) 
                   (if (eq (car pV88) :|Some|) 
                       (let ((pV91 (cdr pV88))) 
                         (return 
                          (let ((tau1 (METASLANG::patternSort pV91))) 
                            (let ((pV11 
                                   (TYPEOBLIGATIONS::bindPattern-3 
                                    gamma 
                                    pV91 
                                    tau1))) 
                              (block 
                               nil 
                               (return 
                                (TYPEOBLIGATIONS::returnPattern-4 
                                 (car pV11) 
                                 (cons 
                                  :|Apply| 
                                  (vector 
                                   (cons 
                                    :|Fun| 
                                    (vector 
                                     (cons :|Embed| (cons pV87 t)) 
                                     (cons 
                                      :|Arrow| 
                                      (vector tau1 pV89 POSITION-SPEC::noPos)) 
                                     POSITION-SPEC::noPos)) 
                                   (cdr pV11) 
                                   POSITION-SPEC::noPos)) 
                                 pV89 
                                 tau)) 
                               (error 
                                "Nonexhaustive match failure in bindPattern")))))) 
                       (if (eq (car pV88) :|None|) 
                           (return 
                            (TYPEOBLIGATIONS::returnPattern-4 
                             gamma 
                             (cons 
                              :|Fun| 
                              (vector 
                               (cons :|Embed| (cons pV87 nil)) 
                               pV89 
                               POSITION-SPEC::noPos)) 
                             pV89 
                             tau)))))) 
               (if (eq (car pat) :|RecordPat|) 
                   (return 
                    (let ((fields 
                           (LISTPAIR::zip-2 
                            (SPECENVIRONMENT::product-2 
                             (TYPEOBLIGATIONS::getSpec gamma) 
                             tau) 
                            (car (cdr pat))))) 
                      (let ((pV34 
                             (labels 
                               ((foldr--local-0 (base l) 
                                 (block 
                                  nil 
                                  (if (null l) 
                                      (return base) 
                                      (if (consp l) 
                                          (let ((pV32 (car l))) 
                                            (return 
                                             (let ((pV21 
                                                    (foldr--local-0 base (cdr l)))) 
                                               (block 
                                                nil 
                                                (let ((pV23 (cdr pV32))) 
                                                  (return 
                                                   (let ((pV17 
                                                          (TYPEOBLIGATIONS::bindPattern-3 
                                                           (car pV21) 
                                                           (cdr pV23) 
                                                           (cdr (car pV32))))) 
                                                     (block 
                                                      nil 
                                                      (return 
                                                       (cons 
                                                        (car pV17) 
                                                        (LIST-SPEC::cons-2 
                                                         (cons 
                                                          (car pV23) 
                                                          (cdr pV17)) 
                                                         (cdr pV21)))) 
                                                      (error 
                                                       "Nonexhaustive match failure in bindPattern"))))) 
                                                (error 
                                                 "Nonexhaustive match failure in bindPattern"))))))) 
                                  (error 
                                   "Nonexhaustive match failure in bindPattern")))) 
                               (foldr--local-0 (cons gamma nil) fields)))) 
                        (block 
                         nil 
                         (return 
                          (TYPEOBLIGATIONS::returnPattern-4 
                           (car pV34) 
                           (cons 
                            :|Record| 
                            (cons (cdr pV34) POSITION-SPEC::noPos)) 
                           (METASLANG::patternSort pat) 
                           tau)) 
                         (error "Nonexhaustive match failure in bindPattern"))))) 
                   (if (eq (car pat) :|WildPat|) 
                       (return 
                        (let ((v0 
                               (cons 
                                (TYPEOBLIGATIONS::freshName-2 gamma "v") 
                                (car (cdr pat))))) 
                          (cons 
                           (TYPEOBLIGATIONS::insert-2 v0 gamma) 
                           (cons :|Var| (cons v0 POSITION-SPEC::noPos))))) 
                       (if (eq (car pat) :|StringPat|) 
                           (return 
                            (TYPEOBLIGATIONS::returnPattern-4 
                             gamma 
                             (cons 
                              :|Fun| 
                              (vector 
                               (cons :|String| (car (cdr pat))) 
                               MS::stringSort 
                               POSITION-SPEC::noPos)) 
                             MS::stringSort 
                             tau)) 
                           (if (eq (car pat) :|BoolPat|) 
                               (return 
                                (TYPEOBLIGATIONS::returnPattern-4 
                                 gamma 
                                 (cons 
                                  :|Fun| 
                                  (vector 
                                   (cons :|Bool| (car (cdr pat))) 
                                   MS::boolSort 
                                   POSITION-SPEC::noPos)) 
                                 MS::boolSort 
                                 tau)) 
                               (if (eq (car pat) :|CharPat|) 
                                   (return 
                                    (TYPEOBLIGATIONS::returnPattern-4 
                                     gamma 
                                     (cons 
                                      :|Fun| 
                                      (vector 
                                       (cons :|Char| (car (cdr pat))) 
                                       MS::charSort 
                                       POSITION-SPEC::noPos)) 
                                     MS::charSort 
                                     tau)) 
                                   (if (eq (car pat) :|NatPat|) 
                                       (return 
                                        (TYPEOBLIGATIONS::returnPattern-4 
                                         gamma 
                                         (cons 
                                          :|Fun| 
                                          (vector 
                                           (cons :|Nat| (car (cdr pat))) 
                                           MS::natSort 
                                           POSITION-SPEC::noPos)) 
                                         MS::natSort 
                                         tau)) 
                                       (if (eq (car pat) :|RelaxPat|) 
                                           (let ((pV59 (cdr pat))) 
                                             (return 
                                              (let ((tau1 
                                                     (cons 
                                                      :|Subsort| 
                                                      (vector 
                                                       tau 
                                                       (svref pV59 1) 
                                                       POSITION-SPEC::noPos)))) 
                                                (let ((pV43 
                                                       (TYPEOBLIGATIONS::bindPattern-3 
                                                        gamma 
                                                        (svref pV59 0) 
                                                        tau1))) 
                                                  (block 
                                                   nil 
                                                   (return 
                                                    (cons 
                                                     (car pV43) 
                                                     (cons 
                                                      :|Apply| 
                                                      (vector 
                                                       (cons 
                                                        :|Fun| 
                                                        (vector 
                                                         '(:|Relax|) 
                                                         (cons 
                                                          :|Arrow| 
                                                          (vector 
                                                           tau1 
                                                           tau 
                                                           POSITION-SPEC::noPos)) 
                                                         POSITION-SPEC::noPos)) 
                                                       (cdr pV43) 
                                                       POSITION-SPEC::noPos)))) 
                                                   (error 
                                                    "Nonexhaustive match failure in bindPattern")))))) 
                                           (if (eq (car pat) :|QuotientPat|) 
                                               (return 
                                                (let ((pV52 
                                                       (TYPEOBLIGATIONS::unfoldBase-2 
                                                        gamma 
                                                        tau))) 
                                                  (block 
                                                   nil 
                                                   (if (eq 
                                                        (car pV52) 
                                                        :|Quotient|) 
                                                       (let ((pV54 
                                                              (svref 
                                                               (cdr pV52) 
                                                               0))) 
                                                         (return 
                                                          (let ((pV49 
                                                                 (TYPEOBLIGATIONS::bindPattern-3 
                                                                  gamma 
                                                                  (svref 
                                                                   (cdr pat) 
                                                                   0) 
                                                                  pV54))) 
                                                            (block 
                                                             nil 
                                                             (return 
                                                              (cons 
                                                               (car pV49) 
                                                               (cons 
                                                                :|Apply| 
                                                                (vector 
                                                                 (cons 
                                                                  :|Fun| 
                                                                  (vector 
                                                                   '(:|Quotient|) 
                                                                   (cons 
                                                                    :|Arrow| 
                                                                    (vector 
                                                                     pV54 
                                                                     tau 
                                                                     POSITION-SPEC::noPos)) 
                                                                   POSITION-SPEC::noPos)) 
                                                                 (cdr pV49) 
                                                                 POSITION-SPEC::noPos)))) 
                                                             (error 
                                                              "Nonexhaustive match failure in bindPattern")))))) 
                                                   (error 
                                                    "Nonexhaustive match failure in bindPattern"))))))))))))))) 
   (error "Nonexhaustive match failure in bindPattern")))

(defun TYPEOBLIGATIONS::checkSpec (spc) 
  (let ((localOps (svref (svref spc 0) 2))) 
    (let ((names 
           (STRINGSET::fromList 
            (labels 
              ((map--local-0 (l) 
                (block 
                 nil 
                 (if (null l) 
                     (return nil) 
                     (if (consp l) 
                         (let ((pV7 (car l))) 
                           (return 
                            (cons 
                             (block 
                              nil 
                              (if (eq (car pV7) :|Qualified|) 
                                  (return (cdr (cdr pV7)))) 
                              (error "Nonexhaustive match failure in checkSpec")) 
                             (map--local-0 (cdr l))))))) 
                 (error "Nonexhaustive match failure in checkSpec")))) 
              (map--local-0 localOps))))) 
      (let ((gamma0 
             #'(lambda (tvs) #'(lambda (nm) (vector nil tvs spc nm names))))) 
        (let ((tcc 
               (MAPSTHASHTABLE::foldi-3 
                #'(lambda (pV) 
                   (let ((pV29 (svref pV 2))
                         (pV28 (svref pV 1))
                         (pV27 (svref pV 0))) 
                     (block 
                      nil 
                      (let ((pV31 (cdr pV27))) 
                        (return 
                         (block 
                          nil 
                          (let ((pV24 (svref pV28 3))
                                (pV23 (svref pV28 2))) 
                            (let ((pV26 (cdr pV23))
                                  (pV25 (car pV23))) 
                              (return 
                               (if (LIST-SPEC::member-2 
                                    (cons :|Qualified| (cons (car pV27) pV31)) 
                                    localOps) 
                                   (labels 
                                     ((foldl--local-0 (base l) 
                                       (block 
                                        nil 
                                        (if (null l) 
                                            (return base) 
                                            (if (consp l) 
                                                (return 
                                                 (foldl--local-0 
                                                  (block 
                                                   nil 
                                                   (return 
                                                    (TYPEOBLIGATIONS::\|--2 
                                                     (cons 
                                                      base 
                                                      (funcall (funcall gamma0 
                                                                        pV25) 
                                                               pV31)) 
                                                     (TYPEOBLIGATIONS::??-2 
                                                      (cdr (car l)) 
                                                      pV26))) 
                                                   (error 
                                                    "Nonexhaustive match failure in checkSpec")) 
                                                  (cdr l))))) 
                                        (error 
                                         "Nonexhaustive match failure in checkSpec")))) 
                                     (foldl--local-0 pV29 pV24)) 
                                   pV29)))) 
                          (error "Nonexhaustive match failure in checkSpec")))) 
                      (error "Nonexhaustive match failure in checkSpec")))) 
                nil 
                (svref spc 1)))) 
          (let ((baseProperties (svref (SPECCALC::getBaseSpec-0) 2))) 
            (labels 
              ((foldr--local-0 (base l) 
                (block 
                 nil 
                 (if (null l) 
                     (return base) 
                     (if (consp l) 
                         (let ((pV41 (car l))) 
                           (return 
                            (let ((pV34 (foldr--local-0 base (cdr l)))) 
                              (block 
                               nil 
                               (return 
                                (if (LIST-SPEC::member-2 pV41 baseProperties) 
                                    pV34 
                                    (TYPEOBLIGATIONS::\|--2 
                                     (cons 
                                      pV34 
                                      (funcall (funcall gamma0 (svref pV41 2)) 
                                               (STRING-SPEC::^-2 
                                                (svref pV41 1) 
                                                "_Obligation"))) 
                                     (TYPEOBLIGATIONS::??-2 
                                      (svref pV41 3) 
                                      MS::boolSort)))) 
                               (error "Nonexhaustive match failure in checkSpec"))))))) 
                 (error "Nonexhaustive match failure in checkSpec")))) 
              (foldr--local-0 tcc (svref spc 2)))))))))

(defun SPECCALC::evaluateObligations-1-1 (term x-1) 
  (let ((x0 (SPECCALC::getCurrentUID x-1))) 
    (let ((pV5 (car x0))
          (pV6 (cdr x0))) 
      (block 
       nil 
       (if (eq (car pV5) :|Ok|) 
           (return 
            (SPECCALC::monadSeq-1-1 
             (cons 
              (SPECCALC::|!print| 
               (STRING-SPEC::^-2 
                (STRING-SPEC::^-2 
                 ";;; Elaborating obligator at " 
                 (SPECCALC::uidToString (cdr pV5))) 
                "
")) 
              (SPECCALC::monadBind-2 
               (SPECCALC::evaluateTermInfo term) 
               #'(lambda (pV) 
                  (let ((value (svref pV 0))
                        (time_stamp (svref pV 1))
                        (dep_UIDs (svref pV 2))) 
                    (block 
                     nil 
                     (if (eq (car value) :|Spec|) 
                         (return 
                          (SPECCALC::monadBind-2 
                           (SPECCALC::|!return| 
                            (SPECCALC::specObligations-2 (cdr value) term)) 
                           #'(lambda (ob_spec) 
                              (SPECCALC::monadBind-2 
                               (funcall (SPECCALC::complainIfAmbiguous 
                                         (SPECCALC::compressDefs ob_spec)) 
                                        (SPECCALC::positionOf term)) 
                               #'(lambda (compressed_spec) 
                                  (SPECCALC::|!return| 
                                   (vector 
                                    (cons 
                                     :|Spec| 
                                     (vector 
                                      (svref compressed_spec 0) 
                                      (svref compressed_spec 1) 
                                      (svref compressed_spec 2) 
                                      (svref compressed_spec 3))) 
                                    time_stamp 
                                    dep_UIDs))))))) 
                         (if (eq (car value) :|Morph|) 
                             (let ((pV3 (cdr value))) 
                               (return 
                                (SPECCALC::monadBind-2 
                                 #'SPECCALC::getGlobalContext 
                                 #'(lambda (globalContext) 
                                    (SPECCALC::monadBind-2 
                                     (SPECCALC::|!return| 
                                      (SPECCALC::morphismObligations-3 
                                       pV3 
                                       globalContext 
                                       (SPECCALC::positionOf term))) 
                                     #'(lambda (ob_spec) 
                                        (SPECCALC::monadBind-2 
                                         (funcall (SPECCALC::complainIfAmbiguous 
                                                   (SPECCALC::compressDefs 
                                                    ob_spec)) 
                                                  (SPECCALC::positionOf term)) 
                                         #'(lambda (compressed_spec) 
                                            (SPECCALC::|!return| 
                                             (vector 
                                              (cons 
                                               :|Spec| 
                                               (vector 
                                                (svref compressed_spec 0) 
                                                (svref compressed_spec 1) 
                                                (svref compressed_spec 2) 
                                                (svref compressed_spec 3))) 
                                              time_stamp 
                                              dep_UIDs)))))))))))) 
                     (return 
                      (SPECCALC::raise 
                       (cons 
                        :|Unsupported| 
                        (cons 
                         (SPECCALC::positionOf term) 
                         "Can create obligations for Specs and Morphisms only"))))))))) 
             pV6)) 
           (if (eq (car pV5) :|Exception|) 
               (return (cons (cons :|Exception| (cdr pV5)) pV6)))) 
       (error "Nonexhaustive match failure in evaluateObligations")))))

(defun SPECCALC::getBaseProverSpec-0 () 
  (let ((x0 (SPECCALC::getBase-0))) 
    (let ((pV16 (cdr x0))
          (pV15 (car x0))) 
      (block 
       nil 
       (if (eq (car pV15) :|Ok|) 
           (return 
            (let ((x01 
                   (SPECCALC::pathToRelativeUID-1-1 
                    "/Library/Base/ProverBase" 
                    pV16))) 
              (let ((pV12 (cdr x01))
                    (pV11 (car x01))) 
                (block 
                 nil 
                 (if (eq (car pV11) :|Ok|) 
                     (return 
                      (let ((x01 
                             (SPECCALC::evaluateUID-1-1-1 
                              (cons :|Internal| "ProverBase") 
                              (cdr pV11) 
                              pV12))) 
                        (let ((pV8 (cdr x01))
                              (pV7 (car x01))) 
                          (block 
                           nil 
                           (if (eq (car pV7) :|Ok|) 
                               (return 
                                (let ((pV3 (svref (cdr pV7) 0))) 
                                  (block 
                                   nil 
                                   (if (eq (car pV3) :|Spec|) 
                                       (return 
                                        (SPECCALC::return-1-1 
                                         (ANNSPEC::subtractSpec-1-1 
                                          (cdr pV3) 
                                          (cdr (cdr pV15))) 
                                         pV8))) 
                                   (error 
                                    "Nonexhaustive match failure in getBaseProverSpec")))) 
                               (if (eq (car pV7) :|Exception|) 
                                   (return 
                                    (cons (cons :|Exception| (cdr pV7)) pV8)))) 
                           (error 
                            "Nonexhaustive match failure in getBaseProverSpec"))))) 
                     (if (eq (car pV11) :|Exception|) 
                         (return (cons (cons :|Exception| (cdr pV11)) pV12)))) 
                 (error "Nonexhaustive match failure in getBaseProverSpec"))))) 
           (if (eq (car pV15) :|Exception|) 
               (return (cons (cons :|Exception| (cdr pV15)) pV16)))) 
       (error "Nonexhaustive match failure in getBaseProverSpec")))))

(defun SPECCALC::getBaseProverSpec (ignore) 
  (declare (ignore ignore)) 
  (SPECCALC::getBaseProverSpec-0))

(defun SPECCALC::makeSnarkProveEvalForm-7
 (prover_options 
  snarkSortDecl 
  snarkOpDecls 
  snarkBaseHypothesis 
  snarkHypothesis 
  snarkConjecture 
  snarkLogFileName) 
  (progn (if SYSTEM-SPEC::specwareDebug? 
             (STRING-SPEC::toScreen "Proving snark fmla: ") 
             nil) 
         (progn (if SYSTEM-SPEC::specwareDebug? 
                    (LISP-SPEC::|!PPRINT| snarkConjecture) 
                    (LISP-SPEC::|!list| nil)) 
                (progn (if SYSTEM-SPEC::specwareDebug? 
                           (STRING-SPEC::writeLine " using: ") 
                           nil) 
                       (progn (if SYSTEM-SPEC::specwareDebug? 
                                  (LISP-SPEC::|!PPRINT| 
                                   (LISP-SPEC::|!list| snarkHypothesis)) 
                                  (LISP-SPEC::|!list| nil)) 
                              (LISP-SPEC::|!list| 
                               (cons 
                                (LISP-SPEC::symbol-2 "CL-USER" "WITH-OPEN-FILE") 
                                (cons 
                                 (LISP-SPEC::|!list| 
                                  (cons 
                                   (LISP-SPEC::symbol-2 "CL-USER" "LOGFILE") 
                                   (cons 
                                    (LISP-SPEC::|!string| snarkLogFileName) 
                                    (cons 
                                     (LISP-SPEC::symbol-2 "KEYWORD" "DIRECTION") 
                                     (cons 
                                      (LISP-SPEC::symbol-2 "KEYWORD" "OUTPUT") 
                                      (cons 
                                       (LISP-SPEC::symbol-2 
                                        "KEYWORD" 
                                        "IF-EXISTS") 
                                       (cons 
                                        (LISP-SPEC::symbol-2 
                                         "KEYWORD" 
                                         "SUPERSEDE") 
                                        nil))))))) 
                                 (cons 
                                  (LISP-SPEC::++-2 
                                   (LISP-SPEC::++-2 
                                    (LISP-SPEC::++-2 
                                     (LISP-SPEC::++-2 
                                      (LISP-SPEC::++-2 
                                       (LISP-SPEC::++-2 
                                        (LISP-SPEC::++-2 
                                         (LISP-SPEC::|!list| 
                                          (cons 
                                           (LISP-SPEC::symbol-2 "CL" "LET") 
                                           (cons 
                                            (LISP-SPEC::|!list| 
                                             (cons 
                                              (LISP-SPEC::|!list| 
                                               (cons 
                                                (LISP-SPEC::symbol-2 
                                                 "CL-USER" 
                                                 "*ERROR-OUTPUT*") 
                                                (cons 
                                                 (LISP-SPEC::symbol-2 
                                                  "CL-USER" 
                                                  "LOGFILE") 
                                                 nil))) 
                                              (cons 
                                               (LISP-SPEC::|!list| 
                                                (cons 
                                                 (LISP-SPEC::symbol-2 
                                                  "CL-USER" 
                                                  "*STANDARD-OUTPUT*") 
                                                 (cons 
                                                  (LISP-SPEC::symbol-2 
                                                   "CL-USER" 
                                                   "LOGFILE") 
                                                  nil))) 
                                               nil))) 
                                            (cons 
                                             (LISP-SPEC::|!list| 
                                              (cons 
                                               (LISP-SPEC::symbol-2 
                                                "SNARK" 
                                                "INITIALIZE") 
                                               nil)) 
                                             (cons 
                                              (LISP-SPEC::|!list| 
                                               (cons 
                                                (LISP-SPEC::symbol-2 
                                                 "SNARK" 
                                                 "RUN-TIME-LIMIT") 
                                                (cons (LISP-SPEC::|!nat| 60) nil))) 
                                              (cons 
                                               (LISP-SPEC::|!list| 
                                                (cons 
                                                 (LISP-SPEC::symbol-2 
                                                  "SNARK" 
                                                  "USE-LISP-TYPES-AS-SORTS") 
                                                 (cons (LISP-SPEC::bool t) nil))) 
                                               (cons 
                                                (LISP-SPEC::|!list| 
                                                 (cons 
                                                  (LISP-SPEC::symbol-2 
                                                   "SNARK" 
                                                   "USE-CODE-FOR-NUMBERS") 
                                                  (cons (LISP-SPEC::bool t) nil))) 
                                                (cons 
                                                 (LISP-SPEC::|!list| 
                                                  (cons 
                                                   (LISP-SPEC::symbol-2 
                                                    "SNARK" 
                                                    "USE-CODE-FOR-NUMBERS") 
                                                   (cons (LISP-SPEC::bool t) nil))) 
                                                 (cons 
                                                  (LISP-SPEC::|!list| 
                                                   (cons 
                                                    (LISP-SPEC::symbol-2 
                                                     "SNARK" 
                                                     "USE-NUMBERS-AS-CONSTRUCTORS") 
                                                    (cons 
                                                     (LISP-SPEC::bool t) 
                                                     nil))) 
                                                  (cons 
                                                   (LISP-SPEC::|!list| 
                                                    (cons 
                                                     (LISP-SPEC::symbol-2 
                                                      "SNARK" 
                                                      "USE-RESOLUTION") 
                                                     (cons 
                                                      (LISP-SPEC::bool t) 
                                                      nil))) 
                                                   nil)))))))))) 
                                         (LISP-SPEC::|!list| snarkSortDecl)) 
                                        (LISP-SPEC::|!list| snarkOpDecls)) 
                                       (LISP-SPEC::|!list| prover_options)) 
                                      (LISP-SPEC::|!list| snarkBaseHypothesis)) 
                                     (LISP-SPEC::|!list| SNARK::baseAxioms)) 
                                    (LISP-SPEC::|!list| snarkHypothesis)) 
                                   (LISP-SPEC::|!list| 
                                    (cons snarkConjecture nil))) 
                                  nil)))))))))

(defun SPECCALC::proveWithHypothesis-10
 (proof_name 
  claim 
  hypothesis 
  spc 
  spec_name 
  base_hypothesis 
  base_spc 
  prover_name 
  prover_options 
  snarkLogFileName) 
  (progn (if (BOOLEAN-SPEC::~ (string=  prover_name "Snark")) 
             (STRING-SPEC::writeLine 
              (STRING-SPEC::^-2 
               prover_name 
               " is not supported; using Snark instead.")) 
             nil) 
         (block 
          nil 
          (let ((pV18 (svref claim 1))
                (pV17 (svref claim 0))) 
            (return 
             (labels 
               ((claimType (ct) 
                 (block 
                  nil 
                  (if (eq (car ct) :|Conjecture|) 
                      (return "Conjecture") 
                      (if (eq (car ct) :|Theorem|) 
                          (return "Theorem") 
                          (if (eq (car ct) :|Axiom|) (return "Axiom")))) 
                  (error "Nonexhaustive match failure in proveWithHypothesis")))) 
               (let ((claim_type (claimType pV17))) 
                 (let ((snarkEvalForm 
                        (SPECCALC::makeSnarkProveEvalForm-7 
                         prover_options 
                         (SNARK::snarkSorts spc) 
                         (SNARK::snarkOpDecls spc) 
                         (labels 
                           ((map--local-0 (l) 
                             (block 
                              nil 
                              (if (null l) 
                                  (return nil) 
                                  (if (consp l) 
                                      (return 
                                       (cons 
                                        (SNARK::snarkProperty-3 
                                         SNARK::newContext 
                                         base_spc 
                                         (car l)) 
                                        (map--local-0 (cdr l)))))) 
                              (error 
                               "Nonexhaustive match failure in proveWithHypothesis")))) 
                           (map--local-0 base_hypothesis)) 
                         (labels 
                           ((foldr--local-0 (base l) 
                             (block 
                              nil 
                              (if (null l) 
                                  (return base) 
                                  (if (consp l) 
                                      (return 
                                       (let ((|!list| 
                                              (foldr--local-0 base (cdr l)))) 
                                         (LIST-SPEC::++-2 
                                          (SNARK::snarkPropertiesFromProperty-3 
                                           SNARK::newContext 
                                           spc 
                                           (car l)) 
                                          |!list|))))) 
                              (error 
                               "Nonexhaustive match failure in proveWithHypothesis")))) 
                           (foldr--local-0 nil hypothesis)) 
                         (SNARK::snarkConjectureRemovePattern-3 
                          SNARK::newContext 
                          spc 
                          claim) 
                         snarkLogFileName))) 
                   (progn (if SYSTEM-SPEC::specwareDebug? 
                              (STRING-SPEC::writeLine 
                               "Calling Snark by evaluating: ") 
                              nil) 
                          (progn (if SYSTEM-SPEC::specwareDebug? 
                                     (LISP-SPEC::|!PPRINT| snarkEvalForm) 
                                     (LISP-SPEC::|!list| nil)) 
                                 (let ((proved 
                                        (string=  
                                         ":PROOF-FOUND" 
                                         (SYSTEM-SPEC::toString 
                                          (LISP-SPEC::apply-2 
                                           (LISP-SPEC::symbol-2 "CL" "FUNCALL") 
                                           (cons 
                                            (LISP-SPEC::|!list| 
                                             (cons 
                                              (LISP-SPEC::symbol-2 
                                               "SNARK" 
                                               "LAMBDA") 
                                              (cons 
                                               (LISP-SPEC::nil-0) 
                                               (cons snarkEvalForm nil)))) 
                                            nil)))))) 
                                   (progn (SPECCALC::displayProofResult-6 
                                           proof_name 
                                           claim_type 
                                           pV18 
                                           spec_name 
                                           proved 
                                           snarkLogFileName) 
                                          proved))))))))) 
          (error "Nonexhaustive match failure in proveWithHypothesis"))))


(defun SPECCALC::evaluateProve-1-1-1 (!x1 pos x-2) 
  (let ((possible_options (svref !x1 4))
        (assertions (svref !x1 3))
        (prover_name (svref !x1 2))
        (spec_term (svref !x1 1))
        (claim_name (svref !x1 0))) 
    (let ((x0 (SPECCALC::getCurrentUnitId x-2))) 
      (let ((pV12 (car x0))
            (pV13 (cdr x0))) 
        (block 
         nil 
         (if (eq (car pV12) :|Ok|) 
             (let ((pV15 (cdr pV12))) 
               (return 
                (SPECCALC::monadSeq-1-1 
                 (cons 
                  (SPECCALC::|!print| 
                   (STRING-SPEC::^-2 
                    (STRING-SPEC::^-2 
                     ";;; Elaborating proof-term at " 
                     (SPECCALC::uidToString pV15)) 
                    "
")) 
                  (SPECCALC::monadBind-2 
                   (SPECCALC::evaluateTermInfo spec_term) 
                   #'(lambda (pV) 
                      (let ((value (svref pV 0))
                            (timeStamp (svref pV 1))
                            (depUIDs (svref pV 2))) 
                        (SPECCALC::monadBind-2 
                         #'SPECCALC::getBase 
                         #'(lambda (pV1) 
                            (let ((baseSpec (cdr pV1))) 
                              (SPECCALC::monadBind-2 
                               #'SPECCALC::getBaseProverSpec 
                               #'(lambda (baseProverSpec) 
                                  (SPECCALC::monadBind-2 
                                   (SPECCALC::UIDtoSnarkLogFile pV15) 
                                   #'(lambda (snarkLogFileName) 
                                      (SPECCALC::monadBind-2 
                                       (SPECCALC::|!return| 
                                        (IO-SPEC::ensureDirectoriesExist 
                                         snarkLogFileName)) 
                                       #'(lambda (pV11) 
                                          (declare (ignore pV11)) 
                                          (declare (ignore pV1)) 
                                          (SPECCALC::monadBind-2 
                                           (SPECCALC::|!return| 
                                            (SPECCALC::UIDtoProofName pV15)) 
                                           #'(lambda (proof_name) 
                                              (SPECCALC::monadBind-2 
                                               (SPECCALC::|!return| 
                                                (SPECCALC::SpecTermToSpecName 
                                                 spec_term)) 
                                               #'(lambda (spec_name) 
                                                  (SPECCALC::monadBind-2 
                                                   (let ((pV3 
                                                          (SPECCALC::coerceToSpec 
                                                           value))) 
                                                     (block 
                                                      nil 
                                                      (if (eq (car pV3) :|Spec|) 
                                                          (return 
                                                           (SPECCALC::|!return| 
                                                            (cdr pV3)))) 
                                                      (return 
                                                       (SPECCALC::raise 
                                                        (cons 
                                                         :|Proof| 
                                                         (cons 
                                                          pos 
                                                          "Argument to prove command is not coerceable to a spec.")))))) 
                                                   #'(lambda (uspc) 
                                                      (SPECCALC::monadBind-2 
                                                       (SPECCALC::|!return| 
                                                        (PROVER::explicateHiddenAxioms 
                                                         uspc)) 
                                                       #'(lambda (expandedSpec) 
                                                          (SPECCALC::monadBind-2 
                                                           (SPECCALC::|!return| 
                                                            (if SYSTEM-SPEC::specwareDebug? 
                                                                (IO-SPEC::writeString 
                                                                 (ANNSPECPRINTER::printSpec 
                                                                  (ANNSPEC::subtractSpec-1-1 
                                                                   expandedSpec 
                                                                   baseSpec))) 
                                                                nil)) 
                                                           #'(lambda (pV5) 
                                                              (declare (ignore pV5)) 
                                                              (SPECCALC::monadBind-2 
                                                               (block 
                                                                nil 
                                                                (if (eq 
                                                                     (car 
                                                                      possible_options) 
                                                                     :|OptionString|) 
                                                                    (return 
                                                                     (SPECCALC::|!return| 
                                                                      (cdr 
                                                                       possible_options))) 
                                                                    (if (eq 
                                                                         (car 
                                                                          possible_options) 
                                                                         :|OptionName|) 
                                                                        (return 
                                                                         (SPECCALC::proverOptionsFromSpec-3 
                                                                          (cdr 
                                                                           possible_options) 
                                                                          uspc 
                                                                          spec_name)) 
                                                                        (if (eq 
                                                                             (car 
                                                                              possible_options) 
                                                                             :|Error|) 
                                                                            (let ((pV7 
                                                                                   (cdr 
                                                                                    possible_options))) 
                                                                              (return 
                                                                               (SPECCALC::raise 
                                                                                (cons 
                                                                                 :|SyntaxError| 
                                                                                 (STRING-SPEC::^-2 
                                                                                  (car 
                                                                                   pV7) 
                                                                                  (cdr 
                                                                                   pV7))))))))) 
                                                                (error 
                                                                 "Nonexhaustive match failure in evaluateProve")) 
                                                               #'(lambda (prover_options) 
                                                                  (SPECCALC::monadBind-2 
                                                                   (SPECCALC::proveInSpec-10 
                                                                    proof_name 
                                                                    claim_name 
                                                                    (ANNSPEC::subtractSpec-1-1 
                                                                     expandedSpec 
                                                                     baseSpec) 
                                                                    spec_name 
                                                                    baseProverSpec 
                                                                    prover_name 
                                                                    assertions 
                                                                    prover_options 
                                                                    snarkLogFileName 
                                                                    pos) 
                                                                   #'(lambda (proved) 
                                                                      (SPECCALC::monadBind-2 
                                                                       (SPECCALC::|!return| 
                                                                        (cons 
                                                                         :|Proof| 
                                                                         (cons 
                                                                          (if proved 
                                                                              '(:|Proved|) 
                                                                              '(:|Unproved|)) 
                                                                          pV15))) 
                                                                       #'(lambda (result) 
                                                                          (SPECCALC::|!return| 
                                                                           (vector 
                                                                            result 
                                                                            timeStamp 
                                                                            depUIDs))))))))))))))))))))))))))))))) 
                 pV13))) 
             (if (eq (car pV12) :|Exception|) 
                 (return (cons (cons :|Exception| (cdr pV12)) pV13)))) 
         (error "Nonexhaustive match failure in evaluateProve"))))))


(defun SPECCALC::evaluateSpec-1-1-1 (spec_elements |!position| x-2) 
  (let ((x0 (SPECCALC::getCurrentUID x-2))) 
    (let ((pV1 (car x0))
          (pV2 (cdr x0))) 
      (block 
       nil 
       (if (eq (car pV1) :|Ok|) 
           (return 
            (SPECCALC::monadSeq-1-1 
             (cons 
              (SPECCALC::|!print| 
               (STRING-SPEC::^-2 
                (STRING-SPEC::^-2 
                 ";;; Elaborating spec at " 
                 (SPECCALC::uidToString (cdr pV1))) 
                "
")) 
              (SPECCALC::monadBind-2 
               #'SPECCALC::getBase 
               #'(lambda (pV) 
                  (SPECCALC::monadBind-2 
                   (funcall (SPECCALC::evaluateSpecElems 
                             (if (SPECCALC::anyImports? spec_elements) 
                                 ANNSPEC::emptySpec 
                                 (cdr pV))) 
                            spec_elements) 
                   #'(lambda (pV11) 
                      (let ((|!TS| (svref pV11 1))
                            (depUIDs (svref pV11 2))) 
                        (SPECCALC::monadBind-2 
                         (SPECCALC::elaborateSpecM (svref pV11 0)) 
                         #'(lambda (elaborated_spec) 
                            (SPECCALC::monadBind-2 
                             (funcall (SPECCALC::complainIfAmbiguous 
                                       (SPECCALC::compressDefs elaborated_spec)) 
                                      |!position|) 
                             #'(lambda (compressed_spec) 
                                (SPECCALC::|!return| 
                                 (vector 
                                  (cons 
                                   :|Spec| 
                                   (vector 
                                    (svref compressed_spec 0) 
                                    (svref compressed_spec 1) 
                                    (svref compressed_spec 2) 
                                    (svref compressed_spec 3))) 
                                  |!TS| 
                                  depUIDs)))))))))))) 
             pV2)) 
           (if (eq (car pV1) :|Exception|) 
               (return (cons (cons :|Exception| (cdr pV1)) pV2)))) 
       (error "Nonexhaustive match failure in evaluateSpec")))))


(defun SPECCALC::evaluateSpecMorph-1-1 (!x1 x-1) 
  (let ((morphRules (svref !x1 2))
        (codTerm (svref !x1 1))
        (domTerm (svref !x1 0))) 
    (let ((x0 (SPECCALC::getCurrentUID x-1))) 
      (let ((pV19 (car x0))
            (pV20 (cdr x0))) 
        (block 
         nil 
         (if (eq (car pV19) :|Ok|) 
             (return 
              (SPECCALC::monadSeq-1-1 
               (cons 
                (SPECCALC::|!print| 
                 (STRING-SPEC::^-2 
                  (STRING-SPEC::^-2 
                   ";;; Elaborating spec morphism-term at " 
                   (SPECCALC::uidToString (cdr pV19))) 
                  "
")) 
                (SPECCALC::monadBind-2 
                 (SPECCALC::evaluateTermInfo domTerm) 
                 #'(lambda (pV) 
                    (let ((domValue (svref pV 0))
                          (domTimeStamp (svref pV 1))
                          (domDepUIDs (svref pV 2))) 
                      (SPECCALC::monadBind-2 
                       (SPECCALC::evaluateTermInfo codTerm) 
                       #'(lambda (pV1) 
                          (let ((codValue (svref pV1 0))
                                (codTimeStamp (svref pV1 1))
                                (codDepUIDs (svref pV1 2))) 
                            (SPECCALC::monadBind-2 
                             (SPECCALC::|!return| 
                              (SPECCALC::coerceToSpec domValue)) 
                             #'(lambda (coercedDomValue) 
                                (SPECCALC::monadBind-2 
                                 (SPECCALC::|!return| 
                                  (SPECCALC::coerceToSpec codValue)) 
                                 #'(lambda (coercedCodValue) 
                                    (block 
                                     nil 
                                     (if (eq (car coercedDomValue) :|Spec|) 
                                         (if (eq (car coercedCodValue) :|Spec|) 
                                             (return 
                                              (SPECCALC::monadBind-2 
                                               (funcall (funcall (funcall (SPECCALC::makeSpecMorphism 
                                                                           (cdr 
                                                                            coercedDomValue)) 
                                                                          (cdr 
                                                                           coercedCodValue)) 
                                                                 morphRules) 
                                                        (SPECCALC::positionOf 
                                                         domTerm)) 
                                               #'(lambda (morph) 
                                                  (SPECCALC::|!return| 
                                                   (vector 
                                                    (cons 
                                                     :|Morph| 
                                                     (vector 
                                                      (svref morph 0) 
                                                      (svref morph 1) 
                                                      (svref morph 2) 
                                                      (svref morph 3))) 
                                                    (INTEGER-SPEC::max-2 
                                                     domTimeStamp 
                                                     codTimeStamp) 
                                                    (LISTUTILITIES::listUnion-2 
                                                     domDepUIDs 
                                                     codDepUIDs))))))) 
                                         (if (eq (car coercedDomValue) :|Other|) 
                                             (return 
                                              (funcall (funcall (funcall (SPECCALC::evaluateOtherSpecMorph-3 
                                                                          coercedDomValue 
                                                                          domTimeStamp 
                                                                          domDepUIDs) 
                                                                         (vector 
                                                                          coercedCodValue 
                                                                          codTimeStamp 
                                                                          codDepUIDs)) 
                                                                morphRules) 
                                                       (SPECCALC::positionOf 
                                                        domTerm))))) 
                                     (if (eq (car coercedCodValue) :|Other|) 
                                         (return 
                                          (funcall (funcall (funcall (SPECCALC::evaluateOtherSpecMorph-3 
                                                                      coercedDomValue 
                                                                      domTimeStamp 
                                                                      domDepUIDs) 
                                                                     (vector 
                                                                      coercedCodValue 
                                                                      codTimeStamp 
                                                                      codDepUIDs)) 
                                                            morphRules) 
                                                   (SPECCALC::positionOf codTerm)))) 
                                     (if (eq (car coercedDomValue) :|Spec|) 
                                         (return 
                                          (SPECCALC::raise 
                                           (cons 
                                            :|TypeCheck| 
                                            (cons 
                                             (SPECCALC::positionOf domTerm) 
                                             "domain of spec morphism is not a spec"))))) 
                                     (if (eq (car coercedCodValue) :|Spec|) 
                                         (return 
                                          (SPECCALC::raise 
                                           (cons 
                                            :|TypeCheck| 
                                            (cons 
                                             (SPECCALC::positionOf codTerm) 
                                             "codomain of spec morphism is not a spec"))))) 
                                     (return 
                                      (SPECCALC::raise 
                                       (cons 
                                        :|TypeCheck| 
                                        (cons 
                                         (SPECCALC::positionOf domTerm) 
                                         "domain and codomain of spec morphism are not specs")))) 
                                     (error 
                                      "Nonexhaustive match failure in evaluateSpecMorph"))))))))))))) 
               pV20)) 
             (if (eq (car pV19) :|Exception|) 
                 (return (cons (cons :|Exception| (cdr pV19)) pV20)))) 
         (error "Nonexhaustive match failure in evaluateSpecMorph"))))))


(defun SPECCALC::evaluateSubstitute-1-1-1 (!x1 term_pos x-2) 
  (let ((morph_tm (cdr !x1))
        (spec_tm (car !x1))) 
    (let ((x0 (SPECCALC::getCurrentUID x-2))) 
      (let ((pV15 (car x0))
            (pV16 (cdr x0))) 
        (block 
         nil 
         (if (eq (car pV15) :|Ok|) 
             (return 
              (SPECCALC::monadSeq-1-1 
               (cons 
                (SPECCALC::|!print| 
                 (STRING-SPEC::^-2 
                  (STRING-SPEC::^-2 
                   ";;; Elaborating spec-substitution at " 
                   (SPECCALC::uidToString (cdr pV15))) 
                  "
")) 
                (SPECCALC::monadBind-2 
                 (SPECCALC::evaluateTermInfo spec_tm) 
                 #'(lambda (pV) 
                    (let ((spec_value (svref pV 0))
                          (spec_timestamp (svref pV 1))
                          (spec_dep_UIDs (svref pV 2))) 
                      (SPECCALC::monadBind-2 
                       (SPECCALC::evaluateTermInfo morph_tm) 
                       #'(lambda (pV1) 
                          (let ((morph_value (svref pV1 0))
                                (morph_timestamp (svref pV1 1))
                                (morph_dep_UIDs (svref pV1 2))) 
                            (SPECCALC::monadBind-2 
                             (SPECCALC::|!return| 
                              (SPECCALC::coerceToSpec spec_value)) 
                             #'(lambda (coercedSpecValue) 
                                (block 
                                 nil 
                                 (if (eq (car coercedSpecValue) :|Spec|) 
                                     (if (eq (car morph_value) :|Morph|) 
                                         (return 
                                          (let ((timeStamp 
                                                 (INTEGER-SPEC::max-2 
                                                  spec_timestamp 
                                                  morph_timestamp))) 
                                            (let ((dep_UIDs 
                                                   (LISTUTILITIES::listUnion-2 
                                                    spec_dep_UIDs 
                                                    morph_dep_UIDs))) 
                                              (SPECCALC::monadBind-2 
                                               (funcall (funcall (funcall (SPECCALC::attemptSubstitution 
                                                                           (cdr 
                                                                            coercedSpecValue)) 
                                                                          (cdr 
                                                                           morph_value)) 
                                                                 morph_tm) 
                                                        term_pos) 
                                               #'(lambda (new_spec) 
                                                  (SPECCALC::monadBind-2 
                                                   (funcall (SPECCALC::complainIfAmbiguous 
                                                             (SPECCALC::compressDefs 
                                                              new_spec)) 
                                                            term_pos) 
                                                   #'(lambda (compressed_spec) 
                                                      (SPECCALC::|!return| 
                                                       (vector 
                                                        (cons 
                                                         :|Spec| 
                                                         (vector 
                                                          (svref 
                                                           compressed_spec 
                                                           0) 
                                                          (svref 
                                                           compressed_spec 
                                                           1) 
                                                          (svref 
                                                           compressed_spec 
                                                           2) 
                                                          (svref 
                                                           compressed_spec 
                                                           3))) 
                                                        timeStamp 
                                                        dep_UIDs)))))))))) 
                                     (if (eq (car coercedSpecValue) :|Other|) 
                                         (if (eq (car morph_value) :|Morph|) 
                                             (return 
                                              (funcall (funcall (funcall (SPECCALC::evaluateOtherSubstitute-3 
                                                                          coercedSpecValue 
                                                                          spec_timestamp 
                                                                          spec_dep_UIDs) 
                                                                         (vector 
                                                                          morph_value 
                                                                          morph_timestamp 
                                                                          morph_dep_UIDs)) 
                                                                morph_tm) 
                                                       term_pos))))) 
                                 (if (eq (car morph_value) :|Morph|) 
                                     (return 
                                      (SPECCALC::raise 
                                       (cons 
                                        :|TypeCheck| 
                                        (cons 
                                         (SPECCALC::positionOf spec_tm) 
                                         "substitution attempted on a non-spec"))))) 
                                 (if (eq (car coercedSpecValue) :|Spec|) 
                                     (return 
                                      (SPECCALC::raise 
                                       (cons 
                                        :|TypeCheck| 
                                        (cons 
                                         (SPECCALC::positionOf morph_tm) 
                                         "substitution is not a morphism"))))) 
                                 (return 
                                  (SPECCALC::raise 
                                   (cons 
                                    :|TypeCheck| 
                                    (cons 
                                     term_pos 
                                     "substitution is not a morphism, and is attempted on a non-spec")))) 
                                 (error 
                                  "Nonexhaustive match failure in evaluateSubstitute"))))))))))) 
               pV16)) 
             (if (eq (car pV15) :|Exception|) 
                 (return (cons (cons :|Exception| (cdr pV15)) pV16)))) 
         (error "Nonexhaustive match failure in evaluateSubstitute"))))))


(defun SPECCALC::evaluateTranslate-1-1-1 (term translation x-2) 
  (let ((x0 (SPECCALC::getCurrentUID x-2))) 
    (let ((pV4 (car x0))
          (pV5 (cdr x0))) 
      (block 
       nil 
       (if (eq (car pV4) :|Ok|) 
           (return 
            (SPECCALC::monadSeq-1-1 
             (cons 
              (SPECCALC::|!print| 
               (STRING-SPEC::^-2 
                (STRING-SPEC::^-2 
                 ";;; Elaborating spec-translation at " 
                 (SPECCALC::uidToString (cdr pV4))) 
                "
")) 
              (SPECCALC::monadBind-2 
               (SPECCALC::evaluateTermInfo term) 
               #'(lambda (pV) 
                  (let ((timeStamp (svref pV 1))
                        (depUIDs (svref pV 2))) 
                    (let ((pV2 (SPECCALC::coerceToSpec (svref pV 0)))) 
                      (block 
                       nil 
                       (if (eq (car pV2) :|Spec|) 
                           (return 
                            (SPECCALC::monadBind-2 
                             (funcall (SPECCALC::translateSpec (cdr pV2)) 
                                      translation) 
                             #'(lambda (spcTrans) 
                                (SPECCALC::|!return| 
                                 (vector 
                                  (cons 
                                   :|Spec| 
                                   (vector 
                                    (svref spcTrans 0) 
                                    (svref spcTrans 1) 
                                    (svref spcTrans 2) 
                                    (svref spcTrans 3))) 
                                  timeStamp 
                                  depUIDs)))))) 
                       (return 
                        (SPECCALC::raise 
                         (cons 
                          :|TypeCheck| 
                          (cons 
                           (SPECCALC::positionOf term) 
                           "translating a term that is not a specification")))))))))) 
             pV5)) 
           (if (eq (car pV4) :|Exception|) 
               (return (cons (cons :|Exception| (cdr pV4)) pV5)))) 
       (error "Nonexhaustive match failure in evaluateTranslate")))))


(defun SPECCALC::reduce-1-1-1-1 (ms_term sc_term pos x-3) 
  (let ((x0 (SPECCALC::getCurrentUID x-3))) 
    (let ((pV26 (car x0))
          (pV27 (cdr x0))) 
      (block 
       nil 
       (if (eq (car pV26) :|Ok|) 
           (return 
            (SPECCALC::monadSeq-1-1 
             (cons 
              (SPECCALC::|!print| 
               (STRING-SPEC::^-2 
                (STRING-SPEC::^-2 
                 ";;; Elaborating reduction at " 
                 (SPECCALC::uidToString (cdr pV26))) 
                "
")) 
              (SPECCALC::monadBind-2 
               (SPECCALC::evaluateTermInfo sc_term) 
               #'(lambda (result) 
                  (SPECCALC::monadBind-2 
                   (SPECCALC::|!return| 
                    (SPECCALC::coerceToSpec (svref result 0))) 
                   #'(lambda (spc) 
                      (block 
                       nil 
                       (if (eq (car spc) :|Spec|) 
                           (let ((pV25 (cdr spc))) 
                             (return 
                              (SPECCALC::monadBind-2 
                               (SPECCALC::|!return| 
                                (HIGHERORDERMATCHING::makeContext pV25)) 
                               #'(lambda (ctxt) 
                                  (SPECCALC::monadBind-2 
                                   (SPECCALC::|!return| 
                                    (REWRITERULES::specRules-1-1 ctxt pV25)) 
                                   #'(lambda (rules) 
                                      (SPECCALC::monadBind-2 
                                       (SPECCALC::|!return| 
                                        (METASLANG::mkQualifiedId-2 
                                         "Reduce" 
                                         "#reduce#")) 
                                       #'(lambda (tempOpName) 
                                          (SPECCALC::monadBind-2 
                                           (funcall (funcall (funcall (funcall (funcall (SPECCALC::addOp 
                                                                                         (cons 
                                                                                          tempOpName 
                                                                                          nil)) 
                                                                                        '(:|Nonfix|)) 
                                                                               (cons 
                                                                                nil 
                                                                                (UTILITIES::freshMetaTyVar 
                                                                                 pos))) 
                                                                      (cons 
                                                                       (cons 
                                                                        nil 
                                                                        ms_term) 
                                                                       nil)) 
                                                             pV25) 
                                                    pos) 
                                           #'(lambda (newSpc) 
                                              (SPECCALC::monadBind-2 
                                               (SPECCALC::elaborateSpecM newSpc) 
                                               #'(lambda (elabSpc) 
                                                  (SPECCALC::monadBind-2 
                                                   (let ((pV1 
                                                          (ANNSPEC::findTheOp-2 
                                                           elabSpc 
                                                           tempOpName))) 
                                                     (block 
                                                      nil 
                                                      (if (eq (car pV1) :|None|) 
                                                          (return 
                                                           (SPECCALC::raise 
                                                            (cons 
                                                             :|SpecError| 
                                                             (cons 
                                                              pos 
                                                              "Reduce lost its operator!")))) 
                                                          (if (eq 
                                                               (car pV1) 
                                                               :|Some|) 
                                                              (let ((pV6 
                                                                     (svref 
                                                                      (cdr pV1) 
                                                                      3))) 
                                                                (if (consp pV6) 
                                                                    (if (null 
                                                                         (cdr 
                                                                          pV6)) 
                                                                        (return 
                                                                         (SPECCALC::|!return| 
                                                                          (cdr 
                                                                           (car 
                                                                            pV6))))))))) 
                                                      (error 
                                                       "Nonexhaustive match failure in reduce"))) 
                                                   #'(lambda (elabTerm) 
                                                      (SPECCALC::monadBind-2 
                                                       (labels 
                                                         ((reduceTerm 
                                                           (|!count|) 
                                                           #'(lambda (trm) 
                                                              (let ((pV13 
                                                                     (METASLANGREWRITER::rewriteRecursive-4 
                                                                      ctxt 
                                                                      nil 
                                                                      rules 
                                                                      trm))) 
                                                                (block 
                                                                 nil 
                                                                 (if (null pV13) 
                                                                     (return trm) 
                                                                     (if (consp 
                                                                          pV13) 
                                                                         (let ((pV15 
                                                                                (car 
                                                                                 pV13))) 
                                                                           (if (null 
                                                                                pV15) 
                                                                               (return 
                                                                                trm) 
                                                                               (if (consp 
                                                                                    pV15) 
                                                                                   (let ((pV21 
                                                                                          (svref 
                                                                                           (car 
                                                                                            pV15) 
                                                                                           1))) 
                                                                                     (return 
                                                                                      (if (INTEGER-SPEC::>-2 
                                                                                           |!count| 
                                                                                           0) 
                                                                                          (funcall (reduceTerm 
                                                                                                    (INTEGER-SPEC::--2 
                                                                                                     |!count| 
                                                                                                     1)) 
                                                                                                   pV21) 
                                                                                          pV21)))))))) 
                                                                 (error 
                                                                  "Nonexhaustive match failure in reduce")))))) 
                                                         (SPECCALC::|!return| 
                                                          (funcall (reduceTerm 
                                                                    20) 
                                                                   elabTerm))) 
                                                       #'(lambda (reducedTerm) 
                                                          (SPECCALC::monadSeq-2 
                                                           (SPECCALC::|!print| 
                                                            (ANNSPECPRINTER::printTerm 
                                                             reducedTerm)) 
                                                           (SPECCALC::|!return| 
                                                            result))))))))))))))))))) 
                       (return 
                        (SPECCALC::raise 
                         (cons 
                          :|TypeCheck| 
                          (cons pos "reduction context is not a spec")))))))))) 
             pV27)) 
           (if (eq (car pV26) :|Exception|) 
               (return (cons (cons :|Exception| (cdr pV26)) pV27)))) 
       (error "Nonexhaustive match failure in reduce")))))

(defun SPECCALC::|!newVar| (x1) #'(lambda (x2) (SPECCALC::newVar-1-1 x1 x2)))

(defun SPECENVIRONMENT::productSorts (x) 
  (SPECENVIRONMENT::productSorts-2 (car x) (cdr x)))

(defun SPECWARE::unitIDCurrentInCache? (path) 
  (SPECCALC::run 
   (funcall (SPECCALC::|!catch| 
             (SPECCALC::monadSeq-2 
              #'SPECCALC::resetGlobals 
              (SPECCALC::monadBind-2 
               (SPECCALC::pathToCanonicalUID ".") 
               #'(lambda (currentUID) 
                  (SPECCALC::monadSeq-2 
                   (SPECCALC::setCurrentUID currentUID) 
                   (SPECCALC::monadBind-2 
                    (SPECCALC::|!return| (SPECWARE::removeSWsuffix path)) 
                    #'(lambda (path_body) 
                       (SPECCALC::monadBind-2 
                        (SPECCALC::pathToRelativeUID path_body) 
                        #'(lambda (unitId) (SPECCALC::checkInCache? unitId)))))))))) 
            #'SPECWARE::toplevelHandler)))

(defun TYPECHECKER::ambiguousCons (x) 
  (TYPECHECKER::ambiguousCons-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun TYPECHECKER::resolveNameFromSort (x) 
  (TYPECHECKER::resolveNameFromSort-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun TYPECHECKER::undeclaredName (x) 
  (TYPECHECKER::undeclaredName-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defparameter UCHAR::m (UNICODE::uchar #\m))

(defun WADLERLINDIG::ppBest (x1) 
  #'(lambda (x2) #'(lambda (x3) (WADLERLINDIG::ppBest-1-1-1 x1 x2 x3))))

(defun WADLERLINDIG::ppCons (x1) 
  #'(lambda (x2) (WADLERLINDIG::ppCons-1-1 x1 x2)))

(defun WADLERLINDIG::ppFits (x1) 
  #'(lambda (x2) (WADLERLINDIG::ppFits-1-1 x1 x2)))

(defun WADLERLINDIG::ppFormatWidth (x1) 
  #'(lambda (x2) (WADLERLINDIG::ppFormatWidth-1-1 x1 x2)))

(defun WADLERLINDIG::ppNest (x1) 
  #'(lambda (x2) (WADLERLINDIG::ppNest-1-1 x1 x2)))

(defun WADLERLINDIG::ppSep (x1) 
  #'(lambda (x2) (WADLERLINDIG::ppSep-1-1 x1 x2)))

(defun XML::MakeArrowSortDescriptor-2 (x y) (cons :|Arrow| (cons x y)))

(defun XML::MakeArrowSortDescriptor (x) 
  (XML::MakeArrowSortDescriptor-2 (car x) (cdr x)))

(defun XML::MakeBaseSortDescriptor-3 (q id args) 
  (cons :|Base| (cons (cons q id) args)))

(defun XML::MakeBaseSortDescriptor (x) 
  (XML::MakeBaseSortDescriptor-3 (svref x 0) (svref x 1) (svref x 2)))

(defun XML::MakeCoProductSortDescriptor (fields) (cons :|CoProduct| fields))

(defun XML::MakeProductSortDescriptor (fields) (cons :|Product| fields))

(defun XML::MakeQuotientSortDescriptor-2 (base qq) 
  (cons :|Quotient| (cons base qq)))

(defun XML::MakeQuotientSortDescriptor (x) 
  (XML::MakeQuotientSortDescriptor-2 (car x) (cdr x)))

(defun XML::MakeSubsortSortDescriptor-2 (base pp) 
  (cons :|Subsort| (cons base pp)))

(defun XML::MakeSubsortSortDescriptor (x) 
  (XML::MakeSubsortSortDescriptor-2 (car x) (cdr x)))

(defparameter XML::Trace_XML_Parser? nil)

(defparameter XML::Wizard_Fail_Hard? nil)

(defun XML::return-1-1 (x state) (cons (cons :|Ok| x) state))

(defun XML::XML_Handler-1-1 (pV1 x-1) 
  (declare (ignore pV1)) 
  (XML::return-1-1 '(:|None|) x-1))

(defun XML::XML_Handler (x1) #'(lambda (x2) (XML::XML_Handler-1-1 x1 x2)))

(defun XML::XML_Handler-8 (x0 x1 x2 x3 x4 x5 x6 x7) 
  (XML::XML_Handler (vector x0 x1 x2 x3 x4 x5 x6 x7)))

(defun XML::addSortAsLastTerm (x) 
  (XML::addSortAsLastTerm-4 (svref x 0) (svref x 1) (svref x 2) (svref x 3)))

(defun XML::expand_SortDescriptor-2 (sd table) 
  (labels 
    ((aux (sd) 
      (let ((pV14 
             (labels 
               ((find--local-0 (l) 
                 (block 
                  nil 
                  (if (null l) 
                      (return '(:|None|)) 
                      (if (consp l) 
                          (let ((pV21 (car l))) 
                            (return 
                             (if (slang-built-in::slang-term-equals-2 
                                  (car pV21) 
                                  sd) 
                                 (cons :|Some| (cons (car pV21) (cdr pV21))) 
                                 (find--local-0 (cdr l))))))) 
                  (error "Nonexhaustive match failure in expand_SortDescriptor")))) 
               (find--local-0 table)))) 
        (block 
         nil 
         (if (eq (car pV14) :|None|) 
             (return sd) 
             (if (eq (car pV14) :|Some|) 
                 (let ((pV17 (cdr (cdr pV14)))) 
                   (return 
                    (block 
                     nil 
                     (if (eq (car pV17) :|Base|) 
                         (return (aux pV17)) 
                         (if (eq (car pV17) :|Subsort|) 
                             (return (aux (car (cdr pV17)))) 
                             (if (eq (car pV17) :|Quotient|) 
                                 (return (aux (car (cdr pV17))))))) 
                     (return pV17)))))) 
         (error "Nonexhaustive match failure in expand_SortDescriptor"))))) 
    (aux sd)))

(defun XML::print_CDSect (cdsect) 
  (UNICODE::^-2 
   (UNICODE::^-2 (UNICODE::ustring "<![CDATA[") cdsect) 
   (UNICODE::ustring "]]>")))

(defun XML::print_Comment (x) 
  (UNICODE::^-2 
   (UNICODE::^-2 (UNICODE::ustring "<!--") x) 
   (UNICODE::ustring "-->")))

(defun XML::print_CharData (x) x)

(defun XML::print_Content-2 (items trailer) 
  (UNICODE::^-2 
   (labels 
     ((foldl--local-0 (base l) 
       (block 
        nil 
        (if (null l) 
            (return base) 
            (if (consp l) 
                (let ((pV10 (car l))) 
                  (return 
                   (foldl--local-0 
                    (block 
                     nil 
                     (let ((pV6 (car pV10))) 
                       (return 
                        (UNICODE::^-2 
                         (UNICODE::^-2 
                          base 
                          (block 
                           nil 
                           (if (eq (car pV6) :|Some|) 
                               (return (XML::print_CharData (cdr pV6)))) 
                           (return nil))) 
                         (XML::print_Content_Item (cdr pV10))))) 
                     (error "Nonexhaustive match failure in print_Content")) 
                    (cdr l)))))) 
        (error "Nonexhaustive match failure in print_Content")))) 
     (foldl--local-0 nil items)) 
   (block 
    nil 
    (if (eq (car trailer) :|Some|) (return (XML::print_CharData (cdr trailer)))) 
    (return nil))))

(defun XML::print_Content (x) (XML::print_Content-2 (car x) (cdr x)))

(defun XML::toHex (n) 
  (labels 
    ((aux (n digits) 
      (let ((digit (INTEGER-SPEC::rem-2 n 16))) 
        (let ((n (INTEGER-SPEC::div-2 n 16))) 
          (if ( =  n 0) 
              (STRING-SPEC::implode 
               (labels 
                 ((map--local-0 (l) 
                   (block 
                    nil 
                    (if (null l) 
                        (return nil) 
                        (if (consp l) 
                            (let ((pV3 (car l))) 
                              (return 
                               (cons 
                                (CHAR-SPEC::chr 
                                 (if (INTEGER-SPEC::<=-2 pV3 9) 
                                     (INTEGER-SPEC::+-2 48 pV3) 
                                     (INTEGER-SPEC::+-2 55 pV3))) 
                                (map--local-0 (cdr l))))))) 
                    (error "Nonexhaustive match failure in toHex")))) 
                 (map--local-0 digits))) 
              (aux n (LIST-SPEC::cons-2 digit digits))))))) (aux n nil)))

(defun XML::print_CharRef-2 (|!char| style) 
  (block 
   nil 
   (if (eq (car style) :|Decimal|) 
       (return 
        (UNICODE::^-2 
         (UNICODE::^-2 
          (UNICODE::ustring "&#") 
          (UNICODE::ustring (NAT-SPEC::toString |!char|))) 
         (UNICODE::ustring ";"))) 
       (if (eq (car style) :|Hex|) 
           (return 
            (UNICODE::^-2 
             (UNICODE::^-2 
              (UNICODE::ustring "&#x") 
              (UNICODE::ustring (XML::toHex |!char|))) 
             (UNICODE::ustring ";"))))) 
   (error "Nonexhaustive match failure in print_CharRef")))

(defun XML::print_CharRef (x) (XML::print_CharRef-2 (car x) (cdr x)))

(defun XML::print_EntityRef (ref) 
  (UNICODE::^-2 (UNICODE::^-2 (UNICODE::ustring "&") ref) (UNICODE::ustring ";")))


(defun XML::print_Reference (x) 
  (block 
   nil 
   (if (eq (car x) :|Entity|) 
       (return (XML::print_EntityRef (cdr x))) 
       (if (eq (car x) :|Char|) (return (XML::print_CharRef (cdr x))))) 
   (error "Nonexhaustive match failure in print_Reference")))

(defun XML::print_AttValue_Item (x) 
  (block 
   nil 
   (if (eq (car x) :|NonRef|) 
       (return (cdr x)) 
       (if (eq (car x) :|Ref|) (return (XML::print_Reference (cdr x))))) 
   (error "Nonexhaustive match failure in print_AttValue_Item")))

(defun XML::print_AttValue-2 (items qchar) 
  (UNICODE::^-2 
   (UNICODE::^-2 
    (cons qchar nil) 
    (labels 
      ((foldl--local-0 (base l) 
        (block 
         nil 
         (if (null l) 
             (return base) 
             (if (consp l) 
                 (return 
                  (foldl--local-0 
                   (UNICODE::^-2 base (XML::print_AttValue_Item (car l))) 
                   (cdr l))))) 
         (error "Nonexhaustive match failure in print_AttValue")))) 
      (foldl--local-0 nil items))) 
   (cons qchar nil)))

(defun XML::print_AttValue (x) (XML::print_AttValue-2 (car x) (cdr x)))

(defun XML::print_ElementAttribute-5 (name value w1 w2 w3) 
  (UNICODE::^-2 
   (UNICODE::^-2 
    (UNICODE::^-2 
     (UNICODE::^-2 (UNICODE::^-2 w1 name) w2) 
     (UNICODE::ustring "=")) 
    w3) 
   (XML::print_AttValue value)))

(defun XML::print_ElementAttribute (x) 
  (XML::print_ElementAttribute-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun XML::print_ElementAttributes (attributes) 
  (labels 
    ((foldl--local-0 (base l) 
      (block 
       nil 
       (if (null l) 
           (return base) 
           (if (consp l) 
               (return 
                (foldl--local-0 
                 (UNICODE::^-2 base (XML::print_ElementAttribute (car l))) 
                 (cdr l))))) 
       (error "Nonexhaustive match failure in print_ElementAttributes")))) 
    (foldl--local-0 nil attributes)))

(defun XML::print_NmToken (token) token)

(defun XML::print_WhiteSpace (x) x)

(defun XML::print_ElementTag-5 (attributes name postfix prefix whitespace) 
  (UNICODE::^-2 
   (UNICODE::^-2 
    (UNICODE::^-2 
     (UNICODE::^-2 
      (UNICODE::^-2 
       (UNICODE::^-2 (UNICODE::ustring "<") prefix) 
       (XML::print_NmToken name)) 
      (XML::print_ElementAttributes attributes)) 
     (XML::print_WhiteSpace whitespace)) 
    postfix) 
   (UNICODE::ustring ">")))

(defun XML::print_ElementTag (x) 
  (XML::print_ElementTag-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))

(defun XML::print_ETag (tag) (XML::print_ElementTag tag))

(defun XML::print_EmptyElemTag (tag) (XML::print_ElementTag tag))

(defun XML::print_STag (tag) (XML::print_ElementTag tag))

(defun XML::print_Element (element) 
  (block 
   nil 
   (if (eq (car element) :|Empty|) 
       (return (XML::print_EmptyElemTag (cdr element))) 
       (if (eq (car element) :|Full|) 
           (let ((pV2 (cdr element))) 
             (return 
              (UNICODE::^-2 
               (UNICODE::^-2 
                (XML::print_STag (svref pV2 2)) 
                (XML::print_Content (svref pV2 0))) 
               (XML::print_ETag (svref pV2 1))))))) 
   (error "Nonexhaustive match failure in print_Element")))

(defun XML::print_PI-2 (target value) 
  (UNICODE::^-2 
   (UNICODE::^-2 
    (UNICODE::^-2 (UNICODE::ustring "<?") target) 
    (block 
     nil 
     (if (eq (car value) :|Some|) 
         (let ((pV3 (cdr value))) (return (UNICODE::^-2 (car pV3) (cdr pV3))))) 
     (return nil))) 
   (UNICODE::ustring "?>")))

(defun XML::print_PI (x) (XML::print_PI-2 (car x) (cdr x)))

(defun XML::print_Content_Item (item) 
  (block 
   nil 
   (if (eq (car item) :|Element|) 
       (return (XML::print_Element (cdr item))) 
       (if (eq (car item) :|Reference|) 
           (return (XML::print_Reference (cdr item))) 
           (if (eq (car item) :|CDSect|) 
               (return (XML::print_CDSect (cdr item))) 
               (if (eq (car item) :|PI|) 
                   (return (XML::print_PI (cdr item))) 
                   (if (eq (car item) :|Comment|) 
                       (return (XML::print_Comment (cdr item)))))))) 
   (error "Nonexhaustive match failure in print_Content_Item")))

(defun XML::print_SortDescriptor (sd) 
  (block 
   nil 
   (if (eq (car sd) :|Arrow|) 
       (let ((pV35 (cdr sd))) 
         (return 
          (STRING-SPEC::^-2 
           (STRING-SPEC::^-2 (XML::print_SortDescriptor (car pV35)) " -> ") 
           (XML::print_SortDescriptor (cdr pV35))))) 
       (if (eq (car sd) :|Product|) 
           (let ((pV34 (cdr sd))) 
             (return 
              (STRING-SPEC::^-2 
               (STRING-SPEC::^-2 
                "{" 
                (labels 
                  ((foldl--local-0 (base l) 
                    (block 
                     nil 
                     (if (null l) 
                         (return base) 
                         (if (consp l) 
                             (let ((pV9 (car l))) 
                               (return 
                                (foldl--local-0 
                                 (block 
                                  nil 
                                  (return 
                                   (let ((this 
                                          (STRING-SPEC::^-2 
                                           (STRING-SPEC::^-2 (car pV9) ": ") 
                                           (XML::print_SortDescriptor (cdr pV9))))) 
                                     (block 
                                      nil 
                                      (if (string=  "" base) (return this)) 
                                      (return 
                                       (STRING-SPEC::^-2 
                                        (STRING-SPEC::^-2 base ", ") 
                                        this))))) 
                                  (error 
                                   "Nonexhaustive match failure in print_SortDescriptor")) 
                                 (cdr l)))))) 
                     (error 
                      "Nonexhaustive match failure in print_SortDescriptor")))) 
                  (foldl--local-0 "" pV34))) 
               "}"))) 
           (if (eq (car sd) :|CoProduct|) 
               (let ((pV33 (cdr sd))) 
                 (return 
                  (labels 
                    ((foldl--local-0 (base l) 
                      (block 
                       nil 
                       (if (null l) 
                           (return base) 
                           (if (consp l) 
                               (let ((pV19 (car l))) 
                                 (return 
                                  (foldl--local-0 
                                   (block 
                                    nil 
                                    (let ((pV16 (cdr pV19))) 
                                      (return 
                                       (STRING-SPEC::^-2 
                                        (STRING-SPEC::^-2 "| " (car pV19)) 
                                        (block 
                                         nil 
                                         (if (eq (car pV16) :|None|) 
                                             (return " ") 
                                             (if (eq (car pV16) :|Some|) 
                                                 (return 
                                                  (XML::print_SortDescriptor 
                                                   (cdr pV16))))) 
                                         (error 
                                          "Nonexhaustive match failure in print_SortDescriptor"))))) 
                                    (error 
                                     "Nonexhaustive match failure in print_SortDescriptor")) 
                                   (cdr l)))))) 
                       (error 
                        "Nonexhaustive match failure in print_SortDescriptor")))) 
                    (foldl--local-0 "" pV33)))) 
               (if (eq (car sd) :|Quotient|) 
                   (return 
                    (STRING-SPEC::^-2 
                     (STRING-SPEC::^-2 
                      (XML::print_SortDescriptor (car (cdr sd))) 
                      "\\") 
                     "???")) 
                   (if (eq (car sd) :|Subsort|) 
                       (return 
                        (STRING-SPEC::^-2 
                         (STRING-SPEC::^-2 
                          (XML::print_SortDescriptor (car (cdr sd))) 
                          "|") 
                         "???")) 
                       (if (eq (car sd) :|Base|) 
                           (let ((pV30 (cdr sd))) 
                             (let ((pV37 (cdr pV30))
                                   (pV36 (car pV30))) 
                               (let ((pV38 (car pV36))) 
                                 (return 
                                  (STRING-SPEC::^-2 
                                   (STRING-SPEC::^-2 
                                    (if (string=  pV38 "<unqualified>") 
                                        "" 
                                        (STRING-SPEC::^-2 pV38 ".")) 
                                    (cdr pV36)) 
                                   (block 
                                    nil 
                                    (if (null pV37) (return "")) 
                                    (return 
                                     (STRING-SPEC::^-2 
                                      (STRING-SPEC::^-2 
                                       "(" 
                                       (labels 
                                         ((foldl--local-0 (base l) 
                                           (block 
                                            nil 
                                            (if (null l) 
                                                (return base) 
                                                (if (consp l) 
                                                    (return 
                                                     (foldl--local-0 
                                                      (let ((this 
                                                             (XML::print_SortDescriptor 
                                                              (car l)))) 
                                                        (block 
                                                         nil 
                                                         (if (string=  "" base) 
                                                             (return this)) 
                                                         (return 
                                                          (STRING-SPEC::^-2 
                                                           (STRING-SPEC::^-2 
                                                            base 
                                                            ", ") 
                                                           this)))) 
                                                      (cdr l))))) 
                                            (error 
                                             "Nonexhaustive match failure in print_SortDescriptor")))) 
                                         (foldl--local-0 "" pV37))) 
                                      ")")))))))) 
                           (if (eq (car sd) :|TyVar|) 
                               (return "type var") 
                               (if (eq (car sd) :|MetaTyVar|) 
                                   (return "meta type var") 
                                   (if (eq (car sd) :|Bottom|) 
                                       (return "<bottom>")))))))))) 
   (error "Nonexhaustive match failure in print_SortDescriptor")))

(defun XML::trim_whitespace (s) 
  (labels 
    ((trim (chars) 
      (block 
       nil 
       (if (null chars) 
           (return nil) 
           (if (consp chars) 
               (let ((pV5 (cdr chars))
                     (pV4 (car chars))) 
                 (if (eq #\  pV4) 
                     (return (trim pV5)) 
                     (if (eq #\	 pV4) 
                         (return (trim pV5)) 
                         (if (eq #\
 pV4) (return (trim pV5)))))))) 
       (return chars)))) 
    (STRING-SPEC::implode 
     (LIST-SPEC::rev (trim (LIST-SPEC::rev (trim (STRING-SPEC::explode s))))))))

(defun XML::trim_whitespace_and_quotes (s) 
  (labels 
    ((trim (chars) 
      (block 
       nil 
       (if (null chars) 
           (return nil) 
           (if (consp chars) 
               (let ((pV5 (cdr chars))
                     (pV4 (car chars))) 
                 (if (eq #\  pV4) 
                     (return (trim pV5)) 
                     (if (eq #\	 pV4) 
                         (return (trim pV5)) 
                         (if (eq #\
 pV4) 
                             (return (trim pV5)) 
                             (if (eq #\" pV4) (return pV5)))))))) 
       (return chars)))) 
    (STRING-SPEC::implode 
     (LIST-SPEC::rev (trim (LIST-SPEC::rev (trim (STRING-SPEC::explode s))))))))

(defun XML::type_attribute (element) 
  (labels 
    ((foldl--local-0 (base l) 
      (block 
       nil 
       (if (null l) 
           (return base) 
           (if (consp l) 
               (let ((pV15 (car l))) 
                 (return 
                  (foldl--local-0 
                   (block 
                    nil 
                    (if (eq (car base) :|Some|) (return base)) 
                    (return 
                     (if (string=  "type" (UNICODE::|!string| (svref pV15 0))) 
                         (cons 
                          :|Some| 
                          (labels 
                            ((foldl--local-0 (base1 l1) 
                              (block 
                               nil 
                               (if (null l1) 
                                   (return base1) 
                                   (if (consp l1) 
                                       (let ((pV9 (car l1))) 
                                         (return 
                                          (foldl--local-0 
                                           (STRING-SPEC::^-2 
                                            base1 
                                            (block 
                                             nil 
                                             (if (eq (car pV9) :|NonRef|) 
                                                 (return 
                                                  (UNICODE::|!string| (cdr pV9))) 
                                                 (if (eq (car pV9) :|Ref|) 
                                                     (return "<xmlref>"))) 
                                             (error 
                                              "Nonexhaustive match failure in type_attribute"))) 
                                           (cdr l1)))))) 
                               (error 
                                "Nonexhaustive match failure in type_attribute")))) 
                            (foldl--local-0 "" (car (svref pV15 1))))) 
                         base))) 
                   (cdr l)))))) 
       (error "Nonexhaustive match failure in type_attribute")))) 
    (foldl--local-0 '(:|None|) (svref (svref element 2) 0))))

(defun XML::internalize_PossibleElement-3 (element sd_pattern table) 
  (let ((xml_items (car (svref element 0)))) 
    (block 
     nil 
     (if (eq (car sd_pattern) :|Product|) 
         (let ((pV135 (cdr sd_pattern))) 
           (return 
            (cons 
             :|Some| 
             (MAGIC::magicMakeProduct 
              (labels 
                ((map--local-0 (l) 
                  (block 
                   nil 
                   (if (null l) 
                       (return nil) 
                       (if (consp l) 
                           (let ((pV34 (car l))) 
                             (return 
                              (cons 
                               (let ((desired_sd (cdr pV34))
                                     (desired_name (car pV34))) 
                                 (let ((pV14 
                                        (labels 
                                          ((foldl--local-0 (base l1) 
                                            (block 
                                             nil 
                                             (if (null l1) 
                                                 (return base) 
                                                 (if (consp l1) 
                                                     (return 
                                                      (foldl--local-0 
                                                       (block 
                                                        nil 
                                                        (let ((pV27 
                                                               (cdr (car l1)))) 
                                                          (return 
                                                           (block 
                                                            nil 
                                                            (if (eq 
                                                                 (car base) 
                                                                 :|Some|) 
                                                                (return base)) 
                                                            (return 
                                                             (block 
                                                              nil 
                                                              (if (eq 
                                                                   (car pV27) 
                                                                   :|Element|) 
                                                                  (let ((pV20 
                                                                         (cdr 
                                                                          pV27))) 
                                                                    (if (eq 
                                                                         (car 
                                                                          pV20) 
                                                                         :|Full|) 
                                                                        (let ((pV21 
                                                                               (cdr 
                                                                                pV20))) 
                                                                          (return 
                                                                           (if (string=  
                                                                                desired_name 
                                                                                (UNICODE::|!string| 
                                                                                 (svref 
                                                                                  (svref 
                                                                                   pV21 
                                                                                   2) 
                                                                                  1))) 
                                                                               (cons 
                                                                                :|Some| 
                                                                                (vector 
                                                                                 (svref 
                                                                                  pV21 
                                                                                  0) 
                                                                                 (svref 
                                                                                  pV21 
                                                                                  1) 
                                                                                 (svref 
                                                                                  pV21 
                                                                                  2))) 
                                                                               '(:|None|))))))) 
                                                              (error 
                                                               "Nonexhaustive match failure in internalize_PossibleElement")))))) 
                                                        (error 
                                                         "Nonexhaustive match failure in internalize_PossibleElement")) 
                                                       (cdr l1))))) 
                                             (error 
                                              "Nonexhaustive match failure in internalize_PossibleElement")))) 
                                          (foldl--local-0 '(:|None|) xml_items)))) 
                                   (block 
                                    nil 
                                    (if (eq (car pV14) :|Some|) 
                                        (return 
                                         (let ((pV1 
                                                (XML::internalize_PossibleElement-3 
                                                 (cdr pV14) 
                                                 (XML::expand_SortDescriptor-2 
                                                  desired_sd 
                                                  table) 
                                                 table))) 
                                           (block 
                                            nil 
                                            (if (eq (car pV1) :|Some|) 
                                                (return (cdr pV1)) 
                                                (if (eq (car pV1) :|None|) 
                                                    (return 
                                                     (SYSTEM-SPEC::fail 
                                                      "Could not internalize")))) 
                                            (error 
                                             "Nonexhaustive match failure in internalize_PossibleElement")))) 
                                        (if (eq (car pV14) :|None|) 
                                            (return 
                                             (progn (STRING-SPEC::toScreen 
                                                     (STRING-SPEC::^-2 
                                                      "Could not find field " 
                                                      desired_name)) 
                                                    (block 
                                                     nil 
                                                     (if (eq 
                                                          (car desired_sd) 
                                                          :|Base|) 
                                                         (let ((pV9 
                                                                (cdr desired_sd))) 
                                                           (let ((pV11 (cdr pV9))
                                                                 (pV10 (car pV9))) 
                                                             (let ((pV13 
                                                                    (cdr pV10))
                                                                   (pV12 
                                                                    (car pV10))) 
                                                               (if (string=  
                                                                    "Boolean" 
                                                                    pV12) 
                                                                   (if (string=  
                                                                        "Boolean" 
                                                                        pV13) 
                                                                       (if (null 
                                                                            pV11) 
                                                                           (return 
                                                                            (progn (STRING-SPEC::toScreen 
                                                                                    (STRING-SPEC::^-2 
                                                                                     (STRING-SPEC::^-2 
                                                                                      "
Using default value of false for " 
                                                                                      (XML::print_SortDescriptor 
                                                                                       desired_sd)) 
                                                                                     "
")) 
                                                                                   (MAGIC::magicCastFromBoolean 
                                                                                    nil))))) 
                                                                   (if (string=  
                                                                        "Nat" 
                                                                        pV12) 
                                                                       (if (string=  
                                                                            "Nat" 
                                                                            pV13) 
                                                                           (if (null 
                                                                                pV11) 
                                                                               (return 
                                                                                (progn (STRING-SPEC::toScreen 
                                                                                        (STRING-SPEC::^-2 
                                                                                         (STRING-SPEC::^-2 
                                                                                          "
Using default value of 0 for " 
                                                                                          (XML::print_SortDescriptor 
                                                                                           desired_sd)) 
                                                                                         "
")) 
                                                                                       (MAGIC::magicCastFromInteger 
                                                                                        0))))) 
                                                                       (if (string=  
                                                                            "String" 
                                                                            pV12) 
                                                                           (if (string=  
                                                                                "String" 
                                                                                pV13) 
                                                                               (if (null 
                                                                                    pV11) 
                                                                                   (return 
                                                                                    (progn (STRING-SPEC::toScreen 
                                                                                            (STRING-SPEC::^-2 
                                                                                             (STRING-SPEC::^-2 
                                                                                              "
Using default value of \"\" for " 
                                                                                              (XML::print_SortDescriptor 
                                                                                               desired_sd)) 
                                                                                             "
")) 
                                                                                           (MAGIC::magicCastFromString 
                                                                                            "")))))))))))) 
                                                     (return 
                                                      (SYSTEM-SPEC::fail 
                                                       "Have defaults for just Boolean, Nat, and String"))))))) 
                                    (error 
                                     "Nonexhaustive match failure in internalize_PossibleElement")))) 
                               (map--local-0 (cdr l))))))) 
                   (error 
                    "Nonexhaustive match failure in internalize_PossibleElement")))) 
                (map--local-0 pV135)))))) 
         (if (eq (car sd_pattern) :|Base|) 
             (let ((pV134 (cdr sd_pattern))) 
               (let ((pV136 (car pV134))) 
                 (return 
                  (let ((pV92 (cdr pV136))
                        (pV91 (car pV136))) 
                    (block 
                     nil 
                     (if (string=  "Boolean" pV91) 
                         (if (string=  "Boolean" pV92) 
                             (return 
                              (cons 
                               :|Some| 
                               (MAGIC::magicCastFromBoolean 
                                (let ((pV38 (cdr (svref element 0)))) 
                                  (block 
                                   nil 
                                   (if (eq (car pV38) :|Some|) 
                                       (return 
                                        (let ((pV36 
                                               (UNICODE::|!string| (cdr pV38)))) 
                                          (block 
                                           nil 
                                           (if (string=  "true" pV36) 
                                               (return t) 
                                               (if (string=  "false" pV36) 
                                                   (return nil))) 
                                           (error 
                                            "Nonexhaustive match failure in internalize_PossibleElement")))) 
                                       (if (eq (car pV38) :|None|) 
                                           (return 
                                            (progn (STRING-SPEC::toScreen 
                                                    (STRING-SPEC::^-2 
                                                     (STRING-SPEC::^-2 
                                                      "
Using default value of false for " 
                                                      (XML::print_SortDescriptor 
                                                       sd_pattern)) 
                                                     "
")) 
                                                   nil)))) 
                                   (error 
                                    "Nonexhaustive match failure in internalize_PossibleElement"))))))) 
                         (if (string=  "Integer" pV91) 
                             (if (string=  "Integer" pV92) 
                                 (return 
                                  (cons 
                                   :|Some| 
                                   (MAGIC::magicCastFromInteger 
                                    (let ((pV41 (cdr (svref element 0)))) 
                                      (block 
                                       nil 
                                       (if (eq (car pV41) :|Some|) 
                                           (return 
                                            (INTEGER-SPEC::stringToInt 
                                             (XML::trim_whitespace 
                                              (UNICODE::|!string| (cdr pV41))))) 
                                           (if (eq (car pV41) :|None|) 
                                               (return 
                                                (progn (STRING-SPEC::toScreen 
                                                        (STRING-SPEC::^-2 
                                                         (STRING-SPEC::^-2 
                                                          "
Using default value of 0 for " 
                                                          (XML::print_SortDescriptor 
                                                           sd_pattern)) 
                                                         "
")) 
                                                       0)))) 
                                       (error 
                                        "Nonexhaustive match failure in internalize_PossibleElement"))))))) 
                             (if (string=  "String" pV91) 
                                 (if (string=  "String" pV92) 
                                     (return 
                                      (cons 
                                       :|Some| 
                                       (MAGIC::magicCastFromString 
                                        (let ((pV44 (cdr (svref element 0)))) 
                                          (block 
                                           nil 
                                           (if (eq (car pV44) :|Some|) 
                                               (return 
                                                (XML::trim_whitespace_and_quotes 
                                                 (UNICODE::|!string| (cdr pV44)))) 
                                               (if (eq (car pV44) :|None|) 
                                                   (return 
                                                    (progn (STRING-SPEC::toScreen 
                                                            (STRING-SPEC::^-2 
                                                             (STRING-SPEC::^-2 
                                                              "
Using default value of \"\" for " 
                                                              (XML::print_SortDescriptor 
                                                               sd_pattern)) 
                                                             "
")) 
                                                           "")))) 
                                           (error 
                                            "Nonexhaustive match failure in internalize_PossibleElement"))))))) 
                                 (if (string=  "List" pV91) 
                                     (if (string=  "List" pV92) 
                                         (return 
                                          (let ((element_sd 
                                                 (XML::expand_SortDescriptor-2 
                                                  (LIST-SPEC::hd (cdr pV134)) 
                                                  table))) 
                                            (cons 
                                             :|Some| 
                                             (MAGIC::magicCastFromList 
                                              (LIST-SPEC::rev 
                                               (labels 
                                                 ((foldl--local-0 (base l) 
                                                   (block 
                                                    nil 
                                                    (if (null l) 
                                                        (return base) 
                                                        (if (consp l) 
                                                            (let ((pV64 (car l))) 
                                                              (return 
                                                               (foldl--local-0 
                                                                (block 
                                                                 nil 
                                                                 (let ((pV61 
                                                                        (cdr 
                                                                         pV64))
                                                                       (pV60 
                                                                        (car 
                                                                         pV64))) 
                                                                   (return 
                                                                    (block 
                                                                     nil 
                                                                     (if (eq 
                                                                          (car 
                                                                           pV61) 
                                                                          :|Element|) 
                                                                         (let ((pV56 
                                                                                (cdr 
                                                                                 pV61))) 
                                                                           (if (eq 
                                                                                (car 
                                                                                 pV56) 
                                                                                :|Full|) 
                                                                               (return 
                                                                                (let ((pV48 
                                                                                       (XML::internalize_PossibleElement-3 
                                                                                        (cdr 
                                                                                         pV56) 
                                                                                        element_sd 
                                                                                        table))) 
                                                                                  (block 
                                                                                   nil 
                                                                                   (if (eq 
                                                                                        (car 
                                                                                         pV48) 
                                                                                        :|Some|) 
                                                                                       (return 
                                                                                        (LIST-SPEC::cons-2 
                                                                                         (cdr 
                                                                                          pV48) 
                                                                                         base))) 
                                                                                   (return 
                                                                                    (progn (STRING-SPEC::toScreen 
                                                                                            (STRING-SPEC::^-2 
                                                                                             (STRING-SPEC::^-2 
                                                                                              "Warning: failure looking for list element: " 
                                                                                              (XML::print_SortDescriptor 
                                                                                               element_sd)) 
                                                                                             "
")) 
                                                                                           (LIST-SPEC::cons-2 
                                                                                            (STRING-SPEC::^-2 
                                                                                             (STRING-SPEC::^-2 
                                                                                              "[failure looking for " 
                                                                                              (XML::print_SortDescriptor 
                                                                                               element_sd)) 
                                                                                             "]") 
                                                                                            base))))))))) 
                                                                     (return 
                                                                      (block 
                                                                       nil 
                                                                       (if (eq 
                                                                            (car 
                                                                             pV60) 
                                                                            :|Some|) 
                                                                           (return 
                                                                            (LIST-SPEC::cons-2 
                                                                             (XML::trim_whitespace 
                                                                              (UNICODE::|!string| 
                                                                               (cdr 
                                                                                pV60))) 
                                                                             base))) 
                                                                       (return 
                                                                        (progn (STRING-SPEC::toScreen 
                                                                                (STRING-SPEC::^-2 
                                                                                 (STRING-SPEC::^-2 
                                                                                  (STRING-SPEC::^-2 
                                                                                   (STRING-SPEC::^-2 
                                                                                    (STRING-SPEC::^-2 
                                                                                     "While looking for list element: " 
                                                                                     (XML::print_SortDescriptor 
                                                                                      element_sd)) 
                                                                                    "
") 
                                                                                   "Ignoring: ") 
                                                                                  (UNICODE::|!string| 
                                                                                   (XML::print_Content_Item 
                                                                                    pV61))) 
                                                                                 "
")) 
                                                                               base))))))) 
                                                                 (error 
                                                                  "Nonexhaustive match failure in internalize_PossibleElement")) 
                                                                (cdr l)))))) 
                                                    (error 
                                                     "Nonexhaustive match failure in internalize_PossibleElement")))) 
                                                 (foldl--local-0 
                                                  nil 
                                                  (car (svref element 0)))))))))) 
                                     (if (string=  "Char" pV91) 
                                         (if (string=  "Char" pV92) 
                                             (return 
                                              (cons 
                                               :|Some| 
                                               (MAGIC::magicCastFromChar 
                                                (let ((pV88 
                                                       (cdr (svref element 0)))) 
                                                  (block 
                                                   nil 
                                                   (if (eq (car pV88) :|Some|) 
                                                       (return 
                                                        (let ((pV68 
                                                               (UNICODE::ustring 
                                                                (XML::trim_whitespace_and_quotes 
                                                                 (UNICODE::|!string| 
                                                                  (cdr pV88)))))) 
                                                          (block 
                                                           nil 
                                                           (if (consp pV68) 
                                                               (let ((pV71 
                                                                      (cdr pV68))) 
                                                                 (if ( =  
                                                                      38 
                                                                      (car pV68)) 
                                                                     (if (consp 
                                                                          pV71) 
                                                                         (let ((pV74 
                                                                                (cdr 
                                                                                 pV71))) 
                                                                           (if ( =  
                                                                                35 
                                                                                (car 
                                                                                 pV71)) 
                                                                               (if (consp 
                                                                                    pV74) 
                                                                                   (let ((pV77 
                                                                                          (cdr 
                                                                                           pV74))
                                                                                         (pV76 
                                                                                          (car 
                                                                                           pV74))) 
                                                                                     (if (consp 
                                                                                          pV77) 
                                                                                         (let ((pV80 
                                                                                                (cdr 
                                                                                                 pV77))
                                                                                               (pV79 
                                                                                                (car 
                                                                                                 pV77))) 
                                                                                           (progn (if ( =  
                                                                                                       59 
                                                                                                       pV79) 
                                                                                                      (if (null 
                                                                                                           pV80) 
                                                                                                          (return 
                                                                                                           (CHAR-SPEC::chr 
                                                                                                            pV76)))) 
                                                                                                  (if (consp 
                                                                                                       pV80) 
                                                                                                      (let ((pV83 
                                                                                                             (cdr 
                                                                                                              pV80))
                                                                                                            (pV82 
                                                                                                             (car 
                                                                                                              pV80))) 
                                                                                                        (progn (if ( =  
                                                                                                                    59 
                                                                                                                    pV82) 
                                                                                                                   (if (null 
                                                                                                                        pV83) 
                                                                                                                       (return 
                                                                                                                        (CHAR-SPEC::chr 
                                                                                                                         (INTEGER-SPEC::+-2 
                                                                                                                          (INTEGER-SPEC::*-2 
                                                                                                                           10 
                                                                                                                           pV76) 
                                                                                                                          pV79))))) 
                                                                                                               (if (consp 
                                                                                                                    pV83) 
                                                                                                                   (if ( =  
                                                                                                                        59 
                                                                                                                        (car 
                                                                                                                         pV83)) 
                                                                                                                       (if (null 
                                                                                                                            (cdr 
                                                                                                                             pV83)) 
                                                                                                                           (return 
                                                                                                                            (CHAR-SPEC::chr 
                                                                                                                             (INTEGER-SPEC::+-2 
                                                                                                                              (INTEGER-SPEC::+-2 
                                                                                                                               (INTEGER-SPEC::*-2 
                                                                                                                                100 
                                                                                                                                pV76) 
                                                                                                                               (INTEGER-SPEC::*-2 
                                                                                                                                10 
                                                                                                                                pV79)) 
                                                                                                                              pV82)))))))))))))))))))) 
                                                           (return 
                                                            (progn (STRING-SPEC::toScreen 
                                                                    "
Using default value of \\Z for Char 
") 
                                                                   #\Z))))) 
                                                       (if (eq 
                                                            (car pV88) 
                                                            :|None|) 
                                                           (return 
                                                            (progn (STRING-SPEC::toScreen 
                                                                    "
Using default value of \\Z for Char 
") 
                                                                   #\Z)))) 
                                                   (error 
                                                    "Nonexhaustive match failure in internalize_PossibleElement"))))))) 
                                         (if (string=  "Option" pV91) 
                                             (if (string=  "Option" pV92) 
                                                 (return 
                                                  (SYSTEM-SPEC::fail 
                                                   "decoding option"))))))))) 
                     (return 
                      (cons 
                       :|Some| 
                       (XML::read_ad_hoc_string-2 sd_pattern (svref element 0))))))))) 
             (if (eq (car sd_pattern) :|CoProduct|) 
                 (let ((pV133 (cdr sd_pattern))) 
                   (return 
                    (let ((element_name 
                           (UNICODE::|!string| (svref (svref element 2) 1)))) 
                      (let ((pV119 
                             (labels 
                               ((find--local-0 (l) 
                                 (block 
                                  nil 
                                  (if (null l) 
                                      (return '(:|None|)) 
                                      (if (consp l) 
                                          (let ((pV129 (car l))) 
                                            (return 
                                             (if (cl:or 
                                                  (let ((pV125 
                                                         (XML::type_attribute 
                                                          element))) 
                                                    (block 
                                                     nil 
                                                     (if (eq (car pV125) :|Some|) 
                                                         (return 
                                                          (string=  
                                                           (car pV129) 
                                                           (cdr pV125)))) 
                                                     (return nil))) 
                                                  (string=  
                                                   (car pV129) 
                                                   element_name)) 
                                                 (cons 
                                                  :|Some| 
                                                  (cons (car pV129) (cdr pV129))) 
                                                 (find--local-0 (cdr l))))))) 
                                  (error 
                                   "Nonexhaustive match failure in internalize_PossibleElement")))) 
                               (find--local-0 pV133)))) 
                        (block 
                         nil 
                         (if (eq (car pV119) :|Some|) 
                             (let ((pV122 (cdr (cdr pV119)))) 
                               (if (eq (car pV122) :|Some|) 
                                   (return 
                                    (let ((pV95 
                                           (XML::internalize_PossibleElement-3 
                                            element 
                                            (XML::expand_SortDescriptor-2 
                                             (cdr pV122) 
                                             table) 
                                            table))) 
                                      (block 
                                       nil 
                                       (if (eq (car pV95) :|Some|) 
                                           (return 
                                            (cons 
                                             :|Some| 
                                             (MAGIC::magicMakeConstructor-2 
                                              element_name 
                                              (cdr pV95))))) 
                                       (return 
                                        (SYSTEM-SPEC::fail 
                                         (STRING-SPEC::^-2 
                                          (STRING-SPEC::^-2 
                                           "looking for coproduct element: " 
                                           (XML::print_SortDescriptor sd_pattern)) 
                                          "
"))))))))) 
                         (return 
                          (block 
                           nil 
                           (if (consp xml_items) 
                               (let ((pV116 (cdr (car xml_items)))) 
                                 (if (eq (car pV116) :|Element|) 
                                     (let ((pV117 (cdr pV116))) 
                                       (if (eq (car pV117) :|Full|) 
                                           (if (null (cdr xml_items)) 
                                               (return 
                                                (XML::internalize_PossibleElement-3 
                                                 (cdr pV117) 
                                                 sd_pattern 
                                                 table)))))))) 
                           (return 
                            (SYSTEM-SPEC::fail 
                             (STRING-SPEC::^-2 
                              (STRING-SPEC::^-2 
                               (STRING-SPEC::^-2 
                                (STRING-SPEC::^-2 
                                 "decoding CoProduct: XML datum named " 
                                 element_name) 
                                " doesn't match any of ") 
                               (labels 
                                 ((foldl--local-0 (base l) 
                                   (block 
                                    nil 
                                    (if (null l) 
                                        (return base) 
                                        (if (consp l) 
                                            (return 
                                             (foldl--local-0 
                                              (block 
                                               nil 
                                               (let ((pV105 (car (car l)))) 
                                                 (return 
                                                  (block 
                                                   nil 
                                                   (if (string=  "" base) 
                                                       (return pV105)) 
                                                   (return 
                                                    (STRING-SPEC::^-2 
                                                     (STRING-SPEC::^-2 base ", ") 
                                                     pV105))))) 
                                               (error 
                                                "Nonexhaustive match failure in internalize_PossibleElement")) 
                                              (cdr l))))) 
                                    (error 
                                     "Nonexhaustive match failure in internalize_PossibleElement")))) 
                                 (foldl--local-0 "" pV133))) 
                              " coproduct options"))))))))))))) 
     (return (SYSTEM-SPEC::fail "unrecognized type")))))

(defun XML::internalize_Element-3 (element sd table) 
  (let ((pattern (XML::expand_SortDescriptor-2 sd table))) 
    (block 
     nil 
     (if (eq (car element) :|Full|) 
         (let ((pV7 (cdr element))) 
           (return 
            (progn (XML::print_SortDescriptor sd) 
                   (progn (let ((pV2 (XML::type_attribute pV7))) 
                            (block 
                             nil 
                             (if (eq (car pV2) :|Some|) (return (cdr pV2))) 
                             (return "unspecified type"))) 
                          (XML::internalize_PossibleElement-3 pV7 pattern table))))) 
         (if (eq (car element) :|Empty|) 
             (return (SYSTEM-SPEC::fail "empty element")))) 
     (error "Nonexhaustive match failure in internalize_Element"))))

(defun XML::aux_internalize_Document-3 (document sd table) 
  (XML::internalize_Element-3 (svref document 1) sd table))

(defun XML::aux_internalize_Document (x) 
  (XML::aux_internalize_Document-3 (svref x 0) (svref x 1) (svref x 2)))

(defun XML::entity_value-1-1 (name x-1) 
  (XML::return-1-1 
   (block 
    nil 
    (if (consp name) 
        (let ((pV4 (car name))
              (pV5 (cdr name))) 
          (if ( =  97 pV4) 
              (if (consp pV5) 
                  (let ((pV11 (cdr pV5))) 
                    (if ( =  112 (car pV5)) 
                        (if (consp pV11) 
                            (let ((pV14 (cdr pV11))) 
                              (if ( =  111 (car pV11)) 
                                  (if (consp pV14) 
                                      (if ( =  115 (car pV14)) 
                                          (if (null (cdr pV14)) 
                                              (return (cons 38 nil))))))))))) 
              (if ( =  108 pV4) 
                  (if (consp pV5) 
                      (if ( =  116 (car pV5)) 
                          (if (null (cdr pV5)) (return (cons 60 nil))))))))) 
    (return name)) 
   x-1))

(defun XML::entity_value (x1) #'(lambda (x2) (XML::entity_value-1-1 x1 x2)))

(defun XML::quote_special_chars (uchars) 
  (block 
   nil 
   (if (null uchars) 
       (return nil) 
       (if (consp uchars) 
           (let ((pV4 (cdr uchars))
                 (pV3 (car uchars))) 
             (progn (if ( =  38 pV3) 
                        (return 
                         (LIST-SPEC::cons-2 
                          38 
                          (LIST-SPEC::cons-2 
                           97 
                           (LIST-SPEC::cons-2 
                            112 
                            (LIST-SPEC::cons-2 
                             111 
                             (LIST-SPEC::cons-2 
                              115 
                              (LIST-SPEC::cons-2 
                               59 
                               (XML::quote_special_chars pV4)))))))) 
                        (if ( =  60 pV3) 
                            (return 
                             (LIST-SPEC::cons-2 
                              38 
                              (LIST-SPEC::cons-2 
                               108 
                               (LIST-SPEC::cons-2 
                                116 
                                (LIST-SPEC::cons-2 
                                 59 
                                 (XML::quote_special_chars pV4)))))))) 
                    (return 
                     (LIST-SPEC::cons-2 pV3 (XML::quote_special_chars pV4))))))) 
   (error "Nonexhaustive match failure in quote_special_chars")))

(defun XML::generate_content-5 (datum sd_pattern table vspacing indent) 
  (block 
   nil 
   (if (eq (car sd_pattern) :|Product|) 
       (let ((pV70 (cdr sd_pattern))) 
         (return 
          (labels 
            ((aux (datum_elements sd_fields new_items) 
              (block 
               nil 
               (if (null datum_elements) 
                   (if (null sd_fields) 
                       (return 
                        (cons 
                         :|Some| 
                         (cons 
                          (LIST-SPEC::rev new_items) 
                          (cons 
                           :|Some| 
                           (XML::indentation_chardata-2 
                            vspacing 
                            (INTEGER-SPEC::--2 indent 2))))))) 
                   (if (consp datum_elements) 
                       (if (consp sd_fields) 
                           (let ((pV7 (car sd_fields))) 
                             (return 
                              (aux 
                               (cdr datum_elements) 
                               (cdr sd_fields) 
                               (LIST-SPEC::cons-2 
                                (cons 
                                 (cons 
                                  :|Some| 
                                  (XML::indentation_chardata-2 vspacing indent)) 
                                 (cons 
                                  :|Element| 
                                  (XML::generate_Element-7 
                                   (car pV7) 
                                   (car datum_elements) 
                                   (cdr pV7) 
                                   table 
                                   vspacing 
                                   indent 
                                   nil))) 
                                new_items))))))) 
               (error "Nonexhaustive match failure in generate_content")))) 
            (aux (MAGIC::magicElements datum) pV70 nil)))) 
       (if (eq (car sd_pattern) :|CoProduct|) 
           (let ((pV69 (cdr sd_pattern))) 
             (return 
              (let ((pV43 (MAGIC::magicConstructorNameAndValue datum))) 
                (block 
                 nil 
                 (let ((pV45 (cdr pV43))
                       (pV44 (car pV43))) 
                   (return 
                    (let ((pV34 
                           (labels 
                             ((find--local-0 (l) 
                               (block 
                                nil 
                                (if (null l) 
                                    (return '(:|None|)) 
                                    (if (consp l) 
                                        (let ((pV41 (car l))) 
                                          (return 
                                           (if (string=  pV44 (car pV41)) 
                                               (cons 
                                                :|Some| 
                                                (cons (car pV41) (cdr pV41))) 
                                               (find--local-0 (cdr l))))))) 
                                (error 
                                 "Nonexhaustive match failure in generate_content")))) 
                             (find--local-0 pV69)))) 
                      (block 
                       nil 
                       (if (eq (car pV34) :|None|) 
                           (return 
                            (progn (STRING-SPEC::toScreen "Should never happen!") 
                                   '(:|None|))) 
                           (if (eq (car pV34) :|Some|) 
                               (let ((pV37 (cdr (cdr pV34)))) 
                                 (return 
                                  (block 
                                   nil 
                                   (if (eq (car pV37) :|None|) 
                                       (return 
                                        (cons 
                                         :|Some| 
                                         (cons 
                                          (cons 
                                           (cons 
                                            (cons 
                                             :|Some| 
                                             (XML::indentation_chardata-2 
                                              1 
                                              indent)) 
                                            (cons 
                                             :|Element| 
                                             (let ((x0 
                                                    (XML::make_EmptyElemTag-3 
                                                     (UNICODE::ustring pV44) 
                                                     nil 
                                                     nil))) 
                                               (cons 
                                                :|Empty| 
                                                (vector 
                                                 (svref x0 0) 
                                                 (svref x0 1) 
                                                 (svref x0 2) 
                                                 (svref x0 3) 
                                                 (svref x0 4)))))) 
                                           nil) 
                                          (cons 
                                           :|Some| 
                                           (XML::indentation_chardata-2 
                                            1 
                                            (INTEGER-SPEC::--2 indent 2)))))) 
                                       (if (eq (car pV37) :|Some|) 
                                           (let ((pV33 (cdr pV37))) 
                                             (return 
                                              (block 
                                               nil 
                                               (if (consp pV69) 
                                                   (let ((pV19 (cdr pV69))) 
                                                     (let ((pV20 
                                                            (car (car pV69)))) 
                                                       (if (string=  "None" pV20) 
                                                           (if (consp pV19) 
                                                               (if (string=  
                                                                    "Some" 
                                                                    (car 
                                                                     (car pV19))) 
                                                                   (if (null 
                                                                        (cdr 
                                                                         pV19)) 
                                                                       (return 
                                                                        (XML::generate_content-5 
                                                                         pV45 
                                                                         (XML::expand_SortDescriptor-2 
                                                                          pV33 
                                                                          table) 
                                                                         table 
                                                                         1 
                                                                         indent))))) 
                                                           (if (string=  
                                                                "Some" 
                                                                pV20) 
                                                               (if (consp pV19) 
                                                                   (if (string=  
                                                                        "None" 
                                                                        (car 
                                                                         (car 
                                                                          pV19))) 
                                                                       (if (null 
                                                                            (cdr 
                                                                             pV19)) 
                                                                           (return 
                                                                            (XML::generate_content-5 
                                                                             pV45 
                                                                             (XML::expand_SortDescriptor-2 
                                                                              pV33 
                                                                              table) 
                                                                             table 
                                                                             1 
                                                                             indent)))))))))) 
                                               (return 
                                                (cons 
                                                 :|Some| 
                                                 (cons 
                                                  (cons 
                                                   (cons 
                                                    (cons 
                                                     :|Some| 
                                                     (XML::indentation_chardata-2 
                                                      1 
                                                      indent)) 
                                                    (cons 
                                                     :|Element| 
                                                     (XML::generate_Element-7 
                                                      pV44 
                                                      pV45 
                                                      pV33 
                                                      table 
                                                      1 
                                                      indent 
                                                      nil))) 
                                                   nil) 
                                                  (cons 
                                                   :|Some| 
                                                   (XML::indentation_chardata-2 
                                                    1 
                                                    (INTEGER-SPEC::--2 indent 2))))))))))) 
                                   (error 
                                    "Nonexhaustive match failure in generate_content")))))) 
                       (error "Nonexhaustive match failure in generate_content"))))) 
                 (error "Nonexhaustive match failure in generate_content"))))) 
           (if (eq (car sd_pattern) :|Base|) 
               (let ((pV68 (cdr sd_pattern))) 
                 (let ((pV72 (cdr pV68))
                       (pV71 (car pV68))) 
                   (return 
                    (block 
                     nil 
                     (let ((pV65 (cdr pV71))
                           (pV64 (car pV71))) 
                       (if (string=  "String" pV64) 
                           (if (string=  "String" pV65) 
                               (return 
                                (XML::indent_ustring 
                                 (UNICODE::^-2 
                                  (UNICODE::^-2 
                                   USTRING::double_quote 
                                   (XML::quote_special_chars 
                                    (UNICODE::ustring 
                                     (MAGIC::magicCastToString datum)))) 
                                  USTRING::double_quote)))) 
                           (if (string=  "Integer" pV64) 
                               (if (string=  "Integer" pV65) 
                                   (return 
                                    (XML::indent_ustring 
                                     (UNICODE::ustring 
                                      (INTEGER-SPEC::toString 
                                       (MAGIC::magicCastToInteger datum)))))) 
                               (if (string=  "List" pV64) 
                                   (if (string=  "List" pV65) 
                                       (return 
                                        (block 
                                         nil 
                                         (if (consp pV72) 
                                             (let ((pV52 (car pV72))) 
                                               (if (null (cdr pV72)) 
                                                   (return 
                                                    (let ((expanded_element_sd 
                                                           (XML::expand_SortDescriptor-2 
                                                            pV52 
                                                            table))) 
                                                      (let ((items 
                                                             (MAGIC::magicCastToList 
                                                              datum))) 
                                                        (cons 
                                                         :|Some| 
                                                         (cons 
                                                          (LIST-SPEC::rev 
                                                           (labels 
                                                             ((foldl--local-0 
                                                               (base l) 
                                                               (block 
                                                                nil 
                                                                (if (null l) 
                                                                    (return base) 
                                                                    (if (consp l) 
                                                                        (return 
                                                                         (foldl--local-0 
                                                                          (LIST-SPEC::cons-2 
                                                                           (XML::generate_Content_Item-6 
                                                                            (car 
                                                                             l) 
                                                                            pV52 
                                                                            expanded_element_sd 
                                                                            table 
                                                                            1 
                                                                            indent) 
                                                                           base) 
                                                                          (cdr l))))) 
                                                                (error 
                                                                 "Nonexhaustive match failure in generate_content")))) 
                                                             (foldl--local-0 
                                                              nil 
                                                              items))) 
                                                          (cons 
                                                           :|Some| 
                                                           (XML::indentation_chardata-2 
                                                            2 
                                                            (INTEGER-SPEC::--2 
                                                             indent 
                                                             2))))))))))) 
                                         (error 
                                          "Nonexhaustive match failure in generate_content")))) 
                                   (if (string=  "Boolean" pV64) 
                                       (if (string=  "Boolean" pV65) 
                                           (return 
                                            (XML::indent_ustring 
                                             (UNICODE::ustring 
                                              (if (MAGIC::magicCastToBoolean 
                                                   datum) 
                                                  "true" 
                                                  "false"))))) 
                                       (if (string=  "Char" pV64) 
                                           (if (string=  "Char" pV65) 
                                               (return 
                                                (XML::indent_ustring 
                                                 (UNICODE::ustring 
                                                  (STRING-SPEC::^-2 
                                                   (STRING-SPEC::^-2 
                                                    "&#" 
                                                    (NAT-SPEC::toString 
                                                     (CHAR-SPEC::ord 
                                                      (MAGIC::magicCastToChar 
                                                       datum)))) 
                                                   ";"))))) 
                                           (if (string=  "Option" pV64) 
                                               (if (string=  "Option" pV65) 
                                                   (return 
                                                    (block 
                                                     nil 
                                                     (if (consp pV72) 
                                                         (if (null (cdr pV72)) 
                                                             (return 
                                                              (let ((pV56 
                                                                     (MAGIC::magicConstructorNameAndValue 
                                                                      datum))) 
                                                                (block 
                                                                 nil 
                                                                 (return 
                                                                  (block 
                                                                   nil 
                                                                   (if (string=  
                                                                        "None" 
                                                                        (car 
                                                                         pV56)) 
                                                                       (return 
                                                                        '(:|None|))) 
                                                                   (return 
                                                                    (XML::generate_content-5 
                                                                     (cdr pV56) 
                                                                     (XML::expand_SortDescriptor-2 
                                                                      (car pV72) 
                                                                      table) 
                                                                     table 
                                                                     vspacing 
                                                                     indent)))) 
                                                                 (error 
                                                                  "Nonexhaustive match failure in generate_content")))))) 
                                                     (error 
                                                      "Nonexhaustive match failure in generate_content"))))))))))) 
                     (return 
                      (XML::indent_ustring 
                       (XML::quote_special_chars 
                        (UNICODE::ustring 
                         (XML::write_ad_hoc_string-2 sd_pattern datum)))))))))))) 
   (return (XML::indent_ustring (UNICODE::ustring "?? unrecognized type  ?? ")))))

(defun XML::print_qid-2 (qualifier id) 
  (if (string=  qualifier id) 
      id 
      (if (string=  qualifier "<unqualified>") 
          id 
          (STRING-SPEC::^-2 (STRING-SPEC::^-2 qualifier ".") id))))

(defun XML::print_qid (x) (XML::print_qid-2 (car x) (cdr x)))


(defun XML::generate_Element-7 (name datum sd table vspacing indent show_type?) 
  (let ((pattern (XML::expand_SortDescriptor-2 sd table))) 
    (let ((|!uname| (UNICODE::ustring name))) 
      (let ((attributes 
             (if show_type? 
                 (let ((value_fielditems 
                        (cons 
                         (cons 
                          :|NonRef| 
                          (XML::pp_sort_descriptor_for_xml_attribute sd)) 
                         nil))) 
                   (cons 
                    (vector 
                     (UNICODE::ustring "type") 
                     (cons value_fielditems UCHAR::apostrophe) 
                     (cons UCHAR::|!space| nil) 
                     XML::null_whitespace 
                     XML::null_whitespace) 
                    nil)) 
                 nil))) 
        (let ((pV1 
               (XML::generate_content-5 
                datum 
                pattern 
                table 
                vspacing 
                (INTEGER-SPEC::+-2 indent 2)))) 
          (block 
           nil 
           (if (eq (car pV1) :|None|) 
               (return 
                (let ((x0 (XML::make_EmptyElemTag-3 |!uname| attributes nil))) 
                  (cons 
                   :|Empty| 
                   (vector 
                    (svref x0 0) 
                    (svref x0 1) 
                    (svref x0 2) 
                    (svref x0 3) 
                    (svref x0 4))))) 
               (if (eq (car pV1) :|Some|) 
                   (return 
                    (let ((stag 
                           (XML::make_STag-3 
                            |!uname| 
                            attributes 
                            XML::null_whitespace))) 
                      (cons 
                       :|Full| 
                       (vector 
                        (cdr pV1) 
                        (XML::make_ETag-2 |!uname| XML::null_whitespace) 
                        stag)))))) 
           (error "Nonexhaustive match failure in generate_Element")))))))


(defun XML::generate_Content_Item-6 (datum sd sd_pattern table vspacing indent) 
  (block 
   nil 
   (if (eq (car sd_pattern) :|Product|) 
       (return 
        (let ((item_name 
               (block 
                nil 
                (if (eq (car sd) :|Base|) 
                    (let ((pV3 (cdr sd))) 
                      (let ((pV4 (car pV3))) 
                        (let ((pV6 (car pV4))) 
                          (if (null (cdr pV3)) 
                              (return 
                               (STRING-SPEC::^-2 
                                (if (string=  pV6 "<unqualified>") 
                                    "" 
                                    (STRING-SPEC::^-2 pV6 ".")) 
                                (cdr pV4)))))))) 
                (return "item")))) 
          (cons 
           (cons :|Some| (XML::indentation_chardata-2 vspacing indent)) 
           (cons 
            :|Element| 
            (XML::generate_Element-7 
             item_name 
             datum 
             sd_pattern 
             table 
             vspacing 
             indent 
             nil))))) 
       (if (eq (car sd_pattern) :|CoProduct|) 
           (let ((pV58 (cdr sd_pattern))) 
             (return 
              (let ((pV40 (MAGIC::magicConstructorNameAndValue datum))) 
                (block 
                 nil 
                 (let ((pV42 (cdr pV40))
                       (pV41 (car pV40))) 
                   (return 
                    (let ((pV31 
                           (labels 
                             ((find--local-0 (l) 
                               (block 
                                nil 
                                (if (null l) 
                                    (return '(:|None|)) 
                                    (if (consp l) 
                                        (let ((pV38 (car l))) 
                                          (return 
                                           (if (string=  pV41 (car pV38)) 
                                               (cons 
                                                :|Some| 
                                                (cons (car pV38) (cdr pV38))) 
                                               (find--local-0 (cdr l))))))) 
                                (error 
                                 "Nonexhaustive match failure in generate_Content_Item")))) 
                             (find--local-0 pV58)))) 
                      (block 
                       nil 
                       (if (eq (car pV31) :|None|) 
                           (return 
                            (progn (STRING-SPEC::toScreen "Should never happen!") 
                                   (cons 
                                    (cons 
                                     :|Some| 
                                     (XML::indentation_chardata-2 
                                      vspacing 
                                      indent)) 
                                    (cons 
                                     :|Element| 
                                     (let ((x0 
                                            (XML::make_EmptyElemTag-3 
                                             (UNICODE::ustring pV41) 
                                             nil 
                                             nil))) 
                                       (cons 
                                        :|Empty| 
                                        (vector 
                                         (svref x0 0) 
                                         (svref x0 1) 
                                         (svref x0 2) 
                                         (svref x0 3) 
                                         (svref x0 4)))))))) 
                           (if (eq (car pV31) :|Some|) 
                               (let ((pV34 (cdr (cdr pV31)))) 
                                 (return 
                                  (block 
                                   nil 
                                   (if (eq (car pV34) :|None|) 
                                       (return 
                                        (cons 
                                         (cons 
                                          :|Some| 
                                          (XML::indentation_chardata-2 
                                           vspacing 
                                           indent)) 
                                         (cons 
                                          :|Element| 
                                          (let ((x0 
                                                 (XML::make_EmptyElemTag-3 
                                                  (UNICODE::ustring pV41) 
                                                  nil 
                                                  nil))) 
                                            (cons 
                                             :|Empty| 
                                             (vector 
                                              (svref x0 0) 
                                              (svref x0 1) 
                                              (svref x0 2) 
                                              (svref x0 3) 
                                              (svref x0 4))))))) 
                                       (if (eq (car pV34) :|Some|) 
                                           (let ((pV30 (cdr pV34))) 
                                             (return 
                                              (block 
                                               nil 
                                               (if (consp pV58) 
                                                   (let ((pV16 (cdr pV58))) 
                                                     (let ((pV17 
                                                            (car (car pV58)))) 
                                                       (if (string=  "None" pV17) 
                                                           (if (consp pV16) 
                                                               (if (string=  
                                                                    "Some" 
                                                                    (car 
                                                                     (car pV16))) 
                                                                   (if (null 
                                                                        (cdr 
                                                                         pV16)) 
                                                                       (return 
                                                                        (XML::generate_Content_Item-6 
                                                                         pV42 
                                                                         pV30 
                                                                         (XML::expand_SortDescriptor-2 
                                                                          pV30 
                                                                          table) 
                                                                         table 
                                                                         1 
                                                                         indent))))) 
                                                           (if (string=  
                                                                "Some" 
                                                                pV17) 
                                                               (if (consp pV16) 
                                                                   (if (string=  
                                                                        "None" 
                                                                        (car 
                                                                         (car 
                                                                          pV16))) 
                                                                       (if (null 
                                                                            (cdr 
                                                                             pV16)) 
                                                                           (return 
                                                                            (XML::generate_Content_Item-6 
                                                                             pV42 
                                                                             pV30 
                                                                             (XML::expand_SortDescriptor-2 
                                                                              pV30 
                                                                              table) 
                                                                             table 
                                                                             1 
                                                                             indent)))))))))) 
                                               (return 
                                                (cons 
                                                 (cons 
                                                  :|Some| 
                                                  (XML::indentation_chardata-2 
                                                   vspacing 
                                                   indent)) 
                                                 (cons 
                                                  :|Element| 
                                                  (XML::generate_Element-7 
                                                   pV41 
                                                   pV42 
                                                   pV30 
                                                   table 
                                                   1 
                                                   indent 
                                                   nil))))))))) 
                                   (error 
                                    "Nonexhaustive match failure in generate_Content_Item")))))) 
                       (error 
                        "Nonexhaustive match failure in generate_Content_Item"))))) 
                 (error "Nonexhaustive match failure in generate_Content_Item"))))) 
           (if (eq (car sd_pattern) :|Base|) 
               (let ((pV57 (cdr sd_pattern))) 
                 (let ((pV61 (cdr pV57))
                       (pV60 (car pV57))) 
                   (return 
                    (block 
                     nil 
                     (let ((pV54 (cdr pV60))
                           (pV53 (car pV60))) 
                       (if (string=  "String" pV53) 
                           (if (string=  "String" pV54) 
                               (return 
                                (XML::indent_text_item-3 
                                 vspacing 
                                 indent 
                                 (XML::quote_special_chars 
                                  (UNICODE::ustring 
                                   (MAGIC::magicCastToString datum)))))) 
                           (if (string=  "Integer" pV53) 
                               (if (string=  "Integer" pV54) 
                                   (return 
                                    (XML::indent_text_item-3 
                                     vspacing 
                                     indent 
                                     (UNICODE::ustring 
                                      (INTEGER-SPEC::toString 
                                       (MAGIC::magicCastToInteger datum)))))) 
                               (if (string=  "Boolean" pV53) 
                                   (if (string=  "Boolean" pV54) 
                                       (return 
                                        (XML::indent_text_item-3 
                                         vspacing 
                                         indent 
                                         (UNICODE::ustring 
                                          (if (MAGIC::magicCastToBoolean datum) 
                                              "true" 
                                              "false"))))) 
                                   (if (string=  "Char" pV53) 
                                       (if (string=  "Char" pV54) 
                                           (return 
                                            (XML::indent_text_item-3 
                                             vspacing 
                                             indent 
                                             (UNICODE::ustring 
                                              (STRING-SPEC::^-2 
                                               (STRING-SPEC::^-2 
                                                "&#" 
                                                (NAT-SPEC::toString 
                                                 (CHAR-SPEC::ord 
                                                  (MAGIC::magicCastToChar datum)))) 
                                               ";"))))) 
                                       (if (string=  "List" pV53) 
                                           (if (string=  "List" pV54) 
                                               (return 
                                                (cons 
                                                 (cons 
                                                  :|Some| 
                                                  (XML::indentation_chardata-2 
                                                   vspacing 
                                                   indent)) 
                                                 (cons 
                                                  :|Element| 
                                                  (XML::generate_Element-7 
                                                   "list" 
                                                   datum 
                                                   sd_pattern 
                                                   table 
                                                   vspacing 
                                                   indent 
                                                   t))))) 
                                           (if (string=  "Option" pV53) 
                                               (if (string=  "Option" pV54) 
                                                   (return 
                                                    (block 
                                                     nil 
                                                     (if (consp pV61) 
                                                         (let ((pV50 (car pV61))) 
                                                           (if (null (cdr pV61)) 
                                                               (return 
                                                                (let ((pV45 
                                                                       (MAGIC::magicConstructorNameAndValue 
                                                                        datum))) 
                                                                  (block 
                                                                   nil 
                                                                   (let ((pV46 
                                                                          (car 
                                                                           pV45))) 
                                                                     (return 
                                                                      (block 
                                                                       nil 
                                                                       (if (string=  
                                                                            "None" 
                                                                            pV46) 
                                                                           (return 
                                                                            (cons 
                                                                             (cons 
                                                                              :|Some| 
                                                                              (XML::indentation_chardata-2 
                                                                               vspacing 
                                                                               indent)) 
                                                                             (cons 
                                                                              :|Element| 
                                                                              (let ((x0 
                                                                                     (XML::make_EmptyElemTag-3 
                                                                                      (UNICODE::ustring 
                                                                                       pV46) 
                                                                                      nil 
                                                                                      nil))) 
                                                                                (cons 
                                                                                 :|Empty| 
                                                                                 (vector 
                                                                                  (svref 
                                                                                   x0 
                                                                                   0) 
                                                                                  (svref 
                                                                                   x0 
                                                                                   1) 
                                                                                  (svref 
                                                                                   x0 
                                                                                   2) 
                                                                                  (svref 
                                                                                   x0 
                                                                                   3) 
                                                                                  (svref 
                                                                                   x0 
                                                                                   4)))))))) 
                                                                       (return 
                                                                        (XML::generate_Content_Item-6 
                                                                         (cdr 
                                                                          pV45) 
                                                                         pV50 
                                                                         (XML::expand_SortDescriptor-2 
                                                                          pV50 
                                                                          table) 
                                                                         table 
                                                                         vspacing 
                                                                         indent))))) 
                                                                   (error 
                                                                    "Nonexhaustive match failure in generate_Content_Item"))))))) 
                                                     (error 
                                                      "Nonexhaustive match failure in generate_Content_Item"))))))))))) 
                     (return 
                      (XML::indent_text_item-3 
                       vspacing 
                       indent 
                       (XML::quote_special_chars 
                        (UNICODE::ustring 
                         (XML::write_ad_hoc_string-2 sd_pattern datum)))))))))))) 
   (return 
    (XML::indent_text_item-3 
     vspacing 
     indent 
     (UNICODE::ustring "?? unrecognized type  ?? ")))))

(defun XML::generate_content (x) 
  (XML::generate_content-5 
   (svref x 0) 
   (svref x 1) 
   (svref x 2) 
   (svref x 3) 
   (svref x 4)))


(defun XML::get_uchars_from_uri-1-1 (uri x-1) 
  (let ((pV11 (svref uri 1))) 
    (block 
     nil 
     (if (eq (car pV11) :|Some|) 
         (return 
          (let ((|!filename| (UNICODE::|!string| (cdr (cdr pV11))))) 
            (let ((pV2 
                   (UNICODE::read_unicode_chars_from_file-2 
                    |!filename| 
                    #'UNICODE::null_decoding))) 
              (block 
               nil 
               (if (eq (car pV2) :|Some|) 
                   (return (XML::return-1-1 (cdr pV2) x-1))) 
               (return 
                (funcall (SYSTEM-SPEC::fail 
                          (STRING-SPEC::^-2 
                           "Problem getting chars from external dtd: " 
                           |!filename|)) 
                         x-1))))))) 
     (return 
      (let ((pV9 (svref uri 0))) 
        (block 
         nil 
         (if (eq (car pV9) :|Some|) 
             (return 
              (let ((|!filename| (UNICODE::|!string| (cdr (cdr pV9))))) 
                (let ((pV6 
                       (UNICODE::read_unicode_chars_from_file-2 
                        |!filename| 
                        #'UNICODE::null_decoding))) 
                  (block 
                   nil 
                   (if (eq (car pV6) :|Some|) 
                       (return (XML::return-1-1 (cdr pV6) x-1))) 
                   (return 
                    (funcall (SYSTEM-SPEC::fail 
                              (STRING-SPEC::^-2 
                               "Problem getting chars from external dtd: " 
                               |!filename|)) 
                             x-1))))))) 
         (return (XML::return-1-1 nil x-1))))))))

(defun XML::get_uchars_from_uri (x1) 
  #'(lambda (x2) (XML::get_uchars_from_uri-1-1 x1 x2)))

(defun XML::get_uchars_from_uri-4 (x0 x1 x2 x3) 
  (XML::get_uchars_from_uri (vector x0 x1 x2 x3)))

(defun XML::internalize_Element (x) 
  (XML::internalize_Element-3 (svref x 0) (svref x 1) (svref x 2)))

(defun XML::internalize_PossibleElement (x) 
  (XML::internalize_PossibleElement-3 (svref x 0) (svref x 1) (svref x 2)))


(defun XML::parse_CPBody-1-1 (start x-1) 
  (block 
   nil 
   (if (consp start) 
       (if ( =  40 (car start)) 
           (return 
            (let ((x0 (XML::parse_WhiteSpace-1-1 (cdr start) x-1))) 
              (let ((pV25 (car x0))
                    (pV26 (cdr x0))) 
                (block 
                 nil 
                 (if (eq (car pV25) :|Ok|) 
                     (let ((pV28 (cdr pV25))) 
                       (return 
                        (let ((w1 (car pV28))
                              (tail (cdr pV28))) 
                          (let ((x0 (XML::parse_CP-1-1 tail pV26))) 
                            (let ((pV21 (car x0))
                                  (pV22 (cdr x0))) 
                              (block 
                               nil 
                               (if (eq (car pV21) :|Ok|) 
                                   (let ((pV24 (cdr pV21))) 
                                     (return 
                                      (let ((cp (car pV24))
                                            (tail (cdr pV24))) 
                                        (let ((x0 
                                               (XML::parse_WhiteSpace-1-1 
                                                tail 
                                                pV22))) 
                                          (let ((pV17 (car x0))
                                                (pV18 (cdr x0))) 
                                            (block 
                                             nil 
                                             (if (eq (car pV17) :|Ok|) 
                                                 (let ((pV20 (cdr pV17))) 
                                                   (return 
                                                    (let ((w2 (car pV20))
                                                          (tail (cdr pV20))) 
                                                      (block 
                                                       nil 
                                                       (if (consp tail) 
                                                           (let ((pV15 
                                                                  (car tail))
                                                                 (pV16 
                                                                  (cdr tail))) 
                                                             (progn (if ( =  
                                                                         124 
                                                                         pV15) 
                                                                        (return 
                                                                         (labels 
                                                                           ((probe 
                                                                             (tail1 
                                                                              rev_alternatives) 
                                                                             (XML::monadBind-2 
                                                                              (XML::parse_WhiteSpace 
                                                                               tail1) 
                                                                              #'(lambda (pV) 
                                                                                 (let ((w3 
                                                                                        (car 
                                                                                         pV))
                                                                                       (tail1 
                                                                                        (cdr 
                                                                                         pV))) 
                                                                                   (XML::monadBind-2 
                                                                                    (XML::parse_CP 
                                                                                     tail1) 
                                                                                    #'(lambda (pV1) 
                                                                                       (let ((cp 
                                                                                              (car 
                                                                                               pV1))
                                                                                             (tail1 
                                                                                              (cdr 
                                                                                               pV1))) 
                                                                                         (XML::monadBind-2 
                                                                                          (XML::parse_WhiteSpace 
                                                                                           tail1) 
                                                                                          #'(lambda (pV11) 
                                                                                             (let ((tail1 
                                                                                                    (cdr 
                                                                                                     pV11))) 
                                                                                               (let ((rev_alternatives 
                                                                                                      (LIST-SPEC::cons-2 
                                                                                                       (vector 
                                                                                                        w3 
                                                                                                        cp 
                                                                                                        (car 
                                                                                                         pV11)) 
                                                                                                       rev_alternatives))) 
                                                                                                 (block 
                                                                                                  nil 
                                                                                                  (if (consp 
                                                                                                       tail1) 
                                                                                                      (let ((pV4 
                                                                                                             (car 
                                                                                                              tail1))
                                                                                                            (pV5 
                                                                                                             (cdr 
                                                                                                              tail1))) 
                                                                                                        (if ( =  
                                                                                                             41 
                                                                                                             pV4) 
                                                                                                            (return 
                                                                                                             (XML::|!return| 
                                                                                                              (cons 
                                                                                                               (cons 
                                                                                                                :|Choice| 
                                                                                                                (LIST-SPEC::rev 
                                                                                                                 rev_alternatives)) 
                                                                                                               pV5))) 
                                                                                                            (if ( =  
                                                                                                                 124 
                                                                                                                 pV4) 
                                                                                                                (return 
                                                                                                                 (probe 
                                                                                                                  pV5 
                                                                                                                  rev_alternatives)))))) 
                                                                                                  (return 
                                                                                                   (XML::hard_error-8 
                                                                                                    "Something else occurred first" 
                                                                                                    '(:|Syntax|) 
                                                                                                    10 
                                                                                                    "A choice in an elementdecl in DTD should continue with '!', or end with ')'." 
                                                                                                    "fail immediately" 
                                                                                                    start 
                                                                                                    tail1 
                                                                                                    (cons 
                                                                                                     (cons 
                                                                                                      "'!'" 
                                                                                                      "indication of choice") 
                                                                                                     (cons 
                                                                                                      (cons 
                                                                                                       "')'" 
                                                                                                       "termination of choise") 
                                                                                                      nil))))))))))))))))) 
                                                                           (funcall (probe 
                                                                                     pV16 
                                                                                     (cons 
                                                                                      (vector 
                                                                                       w1 
                                                                                       cp 
                                                                                       w2) 
                                                                                      nil)) 
                                                                                    pV18))) 
                                                                        (if ( =  
                                                                             44 
                                                                             pV15) 
                                                                            (return 
                                                                             (labels 
                                                                               ((probe 
                                                                                 (tail1 
                                                                                  rev_items) 
                                                                                 (XML::monadBind-2 
                                                                                  (XML::parse_WhiteSpace 
                                                                                   tail1) 
                                                                                  #'(lambda (pV) 
                                                                                     (let ((w3 
                                                                                            (car 
                                                                                             pV))
                                                                                           (tail1 
                                                                                            (cdr 
                                                                                             pV))) 
                                                                                       (XML::monadBind-2 
                                                                                        (XML::parse_CP 
                                                                                         tail1) 
                                                                                        #'(lambda (pV1) 
                                                                                           (let ((cp 
                                                                                                  (car 
                                                                                                   pV1))
                                                                                                 (tail1 
                                                                                                  (cdr 
                                                                                                   pV1))) 
                                                                                             (XML::monadBind-2 
                                                                                              (XML::parse_WhiteSpace 
                                                                                               tail1) 
                                                                                              #'(lambda (pV11) 
                                                                                                 (let ((tail1 
                                                                                                        (cdr 
                                                                                                         pV11))) 
                                                                                                   (let ((rev_items 
                                                                                                          (LIST-SPEC::cons-2 
                                                                                                           (vector 
                                                                                                            w3 
                                                                                                            cp 
                                                                                                            (car 
                                                                                                             pV11)) 
                                                                                                           rev_items))) 
                                                                                                     (block 
                                                                                                      nil 
                                                                                                      (if (consp 
                                                                                                           tail1) 
                                                                                                          (let ((pV9 
                                                                                                                 (car 
                                                                                                                  tail1))
                                                                                                                (pV10 
                                                                                                                 (cdr 
                                                                                                                  tail1))) 
                                                                                                            (if ( =  
                                                                                                                 41 
                                                                                                                 pV9) 
                                                                                                                (return 
                                                                                                                 (XML::|!return| 
                                                                                                                  (cons 
                                                                                                                   (cons 
                                                                                                                    :|Seq| 
                                                                                                                    (LIST-SPEC::rev 
                                                                                                                     rev_items)) 
                                                                                                                   pV10))) 
                                                                                                                (if ( =  
                                                                                                                     44 
                                                                                                                     pV9) 
                                                                                                                    (return 
                                                                                                                     (probe 
                                                                                                                      pV10 
                                                                                                                      rev_items)))))) 
                                                                                                      (return 
                                                                                                       (XML::hard_error-8 
                                                                                                        "Something else occurred first" 
                                                                                                        '(:|Syntax|) 
                                                                                                        10 
                                                                                                        "A sequence in an elementdecl in DTD should continue with ',', or end with ')'." 
                                                                                                        "fail immediately" 
                                                                                                        start 
                                                                                                        tail1 
                                                                                                        (cons 
                                                                                                         (cons 
                                                                                                          "','" 
                                                                                                          "indication of sequence") 
                                                                                                         (cons 
                                                                                                          (cons 
                                                                                                           "')'" 
                                                                                                           "termination of sequence") 
                                                                                                          nil))))))))))))))))) 
                                                                               (funcall (probe 
                                                                                         pV16 
                                                                                         (cons 
                                                                                          (vector 
                                                                                           w1 
                                                                                           cp 
                                                                                           w2) 
                                                                                          nil)) 
                                                                                        pV18))) 
                                                                            (if ( =  
                                                                                 41 
                                                                                 pV15) 
                                                                                (return 
                                                                                 (XML::return-1-1 
                                                                                  (cons 
                                                                                   (cons 
                                                                                    :|Seq| 
                                                                                    (cons 
                                                                                     (vector 
                                                                                      w1 
                                                                                      cp 
                                                                                      w2) 
                                                                                     nil)) 
                                                                                   pV16) 
                                                                                  pV18))))) 
                                                                    (return 
                                                                     (XML::hard_error-1-1 
                                                                      (vector 
                                                                       (STRING-SPEC::^-2 
                                                                        (XML::describe_char 
                                                                         pV15) 
                                                                        " was seen instead") 
                                                                       '(:|Syntax|) 
                                                                       10 
                                                                       "A choice or sequence in an elementdecl in DTD should continue with '|' or ',', or end with ')'." 
                                                                       "fail immediately" 
                                                                       start 
                                                                       tail 
                                                                       (cons 
                                                                        (cons 
                                                                         "'|'" 
                                                                         "indication of choice") 
                                                                        (cons 
                                                                         (cons 
                                                                          "','" 
                                                                          "indication of sequence") 
                                                                         (cons 
                                                                          (cons 
                                                                           "')'" 
                                                                           "termination of choise or sequence") 
                                                                          nil)))) 
                                                                      pV18))))) 
                                                       (return 
                                                        (XML::hard_error-1-1 
                                                         (vector 
                                                          "EOF occurred first" 
                                                          '(:|Syntax|) 
                                                          10 
                                                          "A choice or sequence in an elementdecl in DTD should continue with '|' or ',', or end with ')'." 
                                                          "fail immediately" 
                                                          start 
                                                          tail 
                                                          (cons 
                                                           (cons 
                                                            "'|'" 
                                                            "indication of choice") 
                                                           (cons 
                                                            (cons 
                                                             "','" 
                                                             "indication of sequence") 
                                                            (cons 
                                                             (cons 
                                                              "')'" 
                                                              "termination of choise or sequence") 
                                                             nil)))) 
                                                         pV18)))))) 
                                                 (if (eq (car pV17) :|Exception|) 
                                                     (let ((pV19 (cdr pV17))) 
                                                       (return 
                                                        (cons 
                                                         (cons 
                                                          :|Exception| 
                                                          (vector 
                                                           (svref pV19 0) 
                                                           (svref pV19 1) 
                                                           (svref pV19 2) 
                                                           (svref pV19 3) 
                                                           (svref pV19 4) 
                                                           (svref pV19 5) 
                                                           (svref pV19 6) 
                                                           (svref pV19 7))) 
                                                         pV18))))) 
                                             (error 
                                              "Nonexhaustive match failure in parse_CPBody"))))))) 
                                   (if (eq (car pV21) :|Exception|) 
                                       (let ((pV23 (cdr pV21))) 
                                         (return 
                                          (cons 
                                           (cons 
                                            :|Exception| 
                                            (vector 
                                             (svref pV23 0) 
                                             (svref pV23 1) 
                                             (svref pV23 2) 
                                             (svref pV23 3) 
                                             (svref pV23 4) 
                                             (svref pV23 5) 
                                             (svref pV23 6) 
                                             (svref pV23 7))) 
                                           pV22))))) 
                               (error 
                                "Nonexhaustive match failure in parse_CPBody"))))))) 
                     (if (eq (car pV25) :|Exception|) 
                         (let ((pV27 (cdr pV25))) 
                           (return 
                            (cons 
                             (cons 
                              :|Exception| 
                              (vector 
                               (svref pV27 0) 
                               (svref pV27 1) 
                               (svref pV27 2) 
                               (svref pV27 3) 
                               (svref pV27 4) 
                               (svref pV27 5) 
                               (svref pV27 6) 
                               (svref pV27 7))) 
                             pV26))))) 
                 (error "Nonexhaustive match failure in parse_CPBody"))))))) 
   (return 
    (let ((x0 (XML::parse_Name-1-1 start x-1))) 
      (let ((pV30 (car x0))
            (pV31 (cdr x0))) 
        (block 
         nil 
         (if (eq (car pV30) :|Ok|) 
             (let ((pV33 (cdr pV30))) 
               (return 
                (XML::return-1-1 
                 (cons (cons :|Name| (car pV33)) (cdr pV33)) 
                 pV31))) 
             (if (eq (car pV30) :|Exception|) 
                 (let ((pV32 (cdr pV30))) 
                   (return 
                    (cons 
                     (cons 
                      :|Exception| 
                      (vector 
                       (svref pV32 0) 
                       (svref pV32 1) 
                       (svref pV32 2) 
                       (svref pV32 3) 
                       (svref pV32 4) 
                       (svref pV32 5) 
                       (svref pV32 6) 
                       (svref pV32 7))) 
                     pV31))))) 
         (error "Nonexhaustive match failure in parse_CPBody")))))))


(defun XML::parse_Option_ElementTag-1-1 (start x-1) 
  (block 
   nil 
   (if (consp start) 
       (let ((pV31 (cdr start))) 
         (if ( =  60 (car start)) 
             (return 
              (block 
               nil 
               (if (consp pV31) 
                   (if ( =  33 (car pV31)) 
                       (return (XML::return-1-1 (cons '(:|None|) start) x-1)))) 
               (return 
                (let ((x0 (XML::parse_ElementTagPrefix-1-1 pV31 x-1))) 
                  (let ((pV19 (car x0))
                        (pV20 (cdr x0))) 
                    (block 
                     nil 
                     (if (eq (car pV19) :|Ok|) 
                         (let ((pV22 (cdr pV19))) 
                           (return 
                            (let ((x01 
                                   (XML::parse_ElementName-1-1 (cdr pV22) pV20))) 
                              (let ((pV15 (car x01))
                                    (pV16 (cdr x01))) 
                                (block 
                                 nil 
                                 (if (eq (car pV15) :|Ok|) 
                                     (let ((pV18 (cdr pV15))) 
                                       (return 
                                        (let ((x011 
                                               (XML::parse_ElementAttributes-1-1 
                                                (cdr pV18) 
                                                pV16))) 
                                          (let ((pV11 (car x011))
                                                (pV12 (cdr x011))) 
                                            (block 
                                             nil 
                                             (if (eq (car pV11) :|Ok|) 
                                                 (let ((pV14 (cdr pV11))) 
                                                   (return 
                                                    (let ((x0111 
                                                           (XML::parse_WhiteSpace-1-1 
                                                            (cdr pV14) 
                                                            pV12))) 
                                                      (let ((pV7 (car x0111))
                                                            (pV8 (cdr x0111))) 
                                                        (block 
                                                         nil 
                                                         (if (eq (car pV7) :|Ok|) 
                                                             (let ((pV10 
                                                                    (cdr pV7))) 
                                                               (return 
                                                                (let ((x01111 
                                                                       (XML::parse_ElementTagPostfix-1-1 
                                                                        (cdr 
                                                                         pV10) 
                                                                        pV8))) 
                                                                  (let ((pV3 
                                                                         (car 
                                                                          x01111))
                                                                        (pV4 
                                                                         (cdr 
                                                                          x01111))) 
                                                                    (block 
                                                                     nil 
                                                                     (if (eq 
                                                                          (car 
                                                                           pV3) 
                                                                          :|Ok|) 
                                                                         (let ((pV6 
                                                                                (cdr 
                                                                                 pV3))) 
                                                                           (return 
                                                                            (XML::return-1-1 
                                                                             (cons 
                                                                              (cons 
                                                                               :|Some| 
                                                                               (vector 
                                                                                (car 
                                                                                 pV14) 
                                                                                (car 
                                                                                 pV18) 
                                                                                (car 
                                                                                 pV6) 
                                                                                (car 
                                                                                 pV22) 
                                                                                (car 
                                                                                 pV10))) 
                                                                              (cdr 
                                                                               pV6)) 
                                                                             pV4))) 
                                                                         (if (eq 
                                                                              (car 
                                                                               pV3) 
                                                                              :|Exception|) 
                                                                             (let ((pV5 
                                                                                    (cdr 
                                                                                     pV3))) 
                                                                               (return 
                                                                                (cons 
                                                                                 (cons 
                                                                                  :|Exception| 
                                                                                  (vector 
                                                                                   (svref 
                                                                                    pV5 
                                                                                    0) 
                                                                                   (svref 
                                                                                    pV5 
                                                                                    1) 
                                                                                   (svref 
                                                                                    pV5 
                                                                                    2) 
                                                                                   (svref 
                                                                                    pV5 
                                                                                    3) 
                                                                                   (svref 
                                                                                    pV5 
                                                                                    4) 
                                                                                   (svref 
                                                                                    pV5 
                                                                                    5) 
                                                                                   (svref 
                                                                                    pV5 
                                                                                    6) 
                                                                                   (svref 
                                                                                    pV5 
                                                                                    7))) 
                                                                                 pV4))))) 
                                                                     (error 
                                                                      "Nonexhaustive match failure in parse_Option_ElementTag")))))) 
                                                             (if (eq 
                                                                  (car pV7) 
                                                                  :|Exception|) 
                                                                 (let ((pV9 
                                                                        (cdr pV7))) 
                                                                   (return 
                                                                    (cons 
                                                                     (cons 
                                                                      :|Exception| 
                                                                      (vector 
                                                                       (svref 
                                                                        pV9 
                                                                        0) 
                                                                       (svref 
                                                                        pV9 
                                                                        1) 
                                                                       (svref 
                                                                        pV9 
                                                                        2) 
                                                                       (svref 
                                                                        pV9 
                                                                        3) 
                                                                       (svref 
                                                                        pV9 
                                                                        4) 
                                                                       (svref 
                                                                        pV9 
                                                                        5) 
                                                                       (svref 
                                                                        pV9 
                                                                        6) 
                                                                       (svref 
                                                                        pV9 
                                                                        7))) 
                                                                     pV8))))) 
                                                         (error 
                                                          "Nonexhaustive match failure in parse_Option_ElementTag")))))) 
                                                 (if (eq (car pV11) :|Exception|) 
                                                     (let ((pV13 (cdr pV11))) 
                                                       (return 
                                                        (cons 
                                                         (cons 
                                                          :|Exception| 
                                                          (vector 
                                                           (svref pV13 0) 
                                                           (svref pV13 1) 
                                                           (svref pV13 2) 
                                                           (svref pV13 3) 
                                                           (svref pV13 4) 
                                                           (svref pV13 5) 
                                                           (svref pV13 6) 
                                                           (svref pV13 7))) 
                                                         pV12))))) 
                                             (error 
                                              "Nonexhaustive match failure in parse_Option_ElementTag")))))) 
                                     (if (eq (car pV15) :|Exception|) 
                                         (let ((pV17 (cdr pV15))) 
                                           (return 
                                            (cons 
                                             (cons 
                                              :|Exception| 
                                              (vector 
                                               (svref pV17 0) 
                                               (svref pV17 1) 
                                               (svref pV17 2) 
                                               (svref pV17 3) 
                                               (svref pV17 4) 
                                               (svref pV17 5) 
                                               (svref pV17 6) 
                                               (svref pV17 7))) 
                                             pV16))))) 
                                 (error 
                                  "Nonexhaustive match failure in parse_Option_ElementTag")))))) 
                         (if (eq (car pV19) :|Exception|) 
                             (let ((pV21 (cdr pV19))) 
                               (return 
                                (cons 
                                 (cons 
                                  :|Exception| 
                                  (vector 
                                   (svref pV21 0) 
                                   (svref pV21 1) 
                                   (svref pV21 2) 
                                   (svref pV21 3) 
                                   (svref pV21 4) 
                                   (svref pV21 5) 
                                   (svref pV21 6) 
                                   (svref pV21 7))) 
                                 pV20))))) 
                     (error 
                      "Nonexhaustive match failure in parse_Option_ElementTag")))))))))) 
   (return (XML::return-1-1 (cons '(:|None|) start) x-1))))

(defun XML::parse_XCharData (start) 
  (labels 
    ((probe (tail rev_char_data) 
      (block 
       nil 
       (if (consp tail) 
           (let ((pV6 (cdr tail))
                 (pV5 (car tail))) 
             (progn (if ( =  93 pV5) 
                        (if (consp pV6) 
                            (let ((pV9 (cdr pV6))) 
                              (if ( =  93 (car pV6)) 
                                  (if (consp pV9) 
                                      (if ( =  62 (car pV9)) 
                                          (return 
                                           (cons 
                                            (LIST-SPEC::rev rev_char_data) 
                                            tail)))))))) 
                    (return 
                     (if (XML::char_data_char? pV5) 
                         (probe pV6 (LIST-SPEC::cons-2 pV5 rev_char_data)) 
                         (cons (LIST-SPEC::rev rev_char_data) tail)))))) 
       (return (cons (LIST-SPEC::rev rev_char_data) tail))))) (probe start nil)))


(defun XML::parse_Content-1-1 (!x1 x-1) 
  (let ((pending_open_tags (cdr !x1))
        (start (car !x1))) 
    (labels 
      ((parse_items (tail pending_chars rev_items) 
        (let ((pV11 (XML::parse_XCharData tail))) 
          (block 
           nil 
           (let ((pV12 (car pV11))
                 (pV13 (cdr pV11))) 
             (return 
              (XML::monadBind-2 
               (XML::parse_Content_Item-2 pV13 pending_open_tags) 
               #'(lambda (pV) 
                  (let ((possible_item (car pV))
                        (scout (cdr pV))) 
                    (block 
                     nil 
                     (if (eq (car possible_item) :|Some|) 
                         (let ((pV10 (cdr possible_item))) 
                           (return 
                            (block 
                             nil 
                             (if (eq (car pV10) :|Reference|) 
                                 (let ((pV7 (cdr pV10))) 
                                   (return 
                                    (block 
                                     nil 
                                     (if (eq (car pV7) :|Entity|) 
                                         (return 
                                          (XML::monadBind-2 
                                           (XML::entity_value (cdr pV7)) 
                                           #'(lambda (expansion) 
                                              (parse_items 
                                               scout 
                                               (LIST-SPEC::++-2 
                                                (LIST-SPEC::++-2 
                                                 pending_chars 
                                                 pV12) 
                                                expansion) 
                                               rev_items)))) 
                                         (if (eq (car pV7) :|Char|) 
                                             (return 
                                              (parse_items 
                                               scout 
                                               (LIST-SPEC::++-2 
                                                (LIST-SPEC::++-2 
                                                 pending_chars 
                                                 pV12) 
                                                (cons (car (cdr pV7)) nil)) 
                                               rev_items)))) 
                                     (error 
                                      "Nonexhaustive match failure in parse_Content"))))) 
                             (return 
                              (parse_items 
                               scout 
                               nil 
                               (LIST-SPEC::cons-2 
                                (cons 
                                 (cons 
                                  :|Some| 
                                  (LIST-SPEC::++-2 pending_chars pV12)) 
                                 pV10) 
                                rev_items))))))) 
                     (return 
                      (XML::|!return| 
                       (cons 
                        (cons 
                         (LIST-SPEC::rev rev_items) 
                         (cons :|Some| (LIST-SPEC::++-2 pending_chars pV12))) 
                        pV13))))))))) 
           (error "Nonexhaustive match failure in parse_Content"))))) 
      (funcall (parse_items start nil nil) x-1))))


(defun XML::parse_GenericID-1-1 (start x-1) 
  (block 
   nil 
   (if (consp start) 
       (let ((pV33 (car start))
             (pV34 (cdr start))) 
         (if ( =  83 pV33) 
             (if (consp pV34) 
                 (let ((pV52 (cdr pV34))) 
                   (if ( =  89 (car pV34)) 
                       (if (consp pV52) 
                           (let ((pV55 (cdr pV52))) 
                             (if ( =  83 (car pV52)) 
                                 (if (consp pV55) 
                                     (let ((pV58 (cdr pV55))) 
                                       (if ( =  84 (car pV55)) 
                                           (if (consp pV58) 
                                               (let ((pV61 (cdr pV58))) 
                                                 (if ( =  69 (car pV58)) 
                                                     (if (consp pV61) 
                                                         (if ( =  77 (car pV61)) 
                                                             (return 
                                                              (let ((x0 
                                                                     (XML::parse_WhiteSpace-1-1 
                                                                      (cdr pV61) 
                                                                      x-1))) 
                                                                (let ((pV5 
                                                                       (car x0))
                                                                      (pV6 
                                                                       (cdr x0))) 
                                                                  (block 
                                                                   nil 
                                                                   (if (eq 
                                                                        (car pV5) 
                                                                        :|Ok|) 
                                                                       (let ((pV8 
                                                                              (cdr 
                                                                               pV5))) 
                                                                         (return 
                                                                          (let ((x01 
                                                                                 (XML::parse_SystemLiteral-1-1 
                                                                                  (cdr 
                                                                                   pV8) 
                                                                                  pV6))) 
                                                                            (let ((pV1 
                                                                                   (car 
                                                                                    x01))
                                                                                  (pV2 
                                                                                   (cdr 
                                                                                    x01))) 
                                                                              (block 
                                                                               nil 
                                                                               (if (eq 
                                                                                    (car 
                                                                                     pV1) 
                                                                                    :|Ok|) 
                                                                                   (let ((pV4 
                                                                                          (cdr 
                                                                                           pV1))) 
                                                                                     (return 
                                                                                      (let ((syslit 
                                                                                             (car 
                                                                                              pV4))) 
                                                                                        (XML::return-1-1 
                                                                                         (cons 
                                                                                          (vector 
                                                                                           '(:|None|) 
                                                                                           (cons 
                                                                                            :|Some| 
                                                                                            (cons 
                                                                                             (car 
                                                                                              syslit) 
                                                                                             (cdr 
                                                                                              syslit))) 
                                                                                           XML::null_whitespace 
                                                                                           (car 
                                                                                            pV8)) 
                                                                                          (cdr 
                                                                                           pV4)) 
                                                                                         pV2)))) 
                                                                                   (if (eq 
                                                                                        (car 
                                                                                         pV1) 
                                                                                        :|Exception|) 
                                                                                       (let ((pV3 
                                                                                              (cdr 
                                                                                               pV1))) 
                                                                                         (return 
                                                                                          (cons 
                                                                                           (cons 
                                                                                            :|Exception| 
                                                                                            (vector 
                                                                                             (svref 
                                                                                              pV3 
                                                                                              0) 
                                                                                             (svref 
                                                                                              pV3 
                                                                                              1) 
                                                                                             (svref 
                                                                                              pV3 
                                                                                              2) 
                                                                                             (svref 
                                                                                              pV3 
                                                                                              3) 
                                                                                             (svref 
                                                                                              pV3 
                                                                                              4) 
                                                                                             (svref 
                                                                                              pV3 
                                                                                              5) 
                                                                                             (svref 
                                                                                              pV3 
                                                                                              6) 
                                                                                             (svref 
                                                                                              pV3 
                                                                                              7))) 
                                                                                           pV2))))) 
                                                                               (error 
                                                                                "Nonexhaustive match failure in parse_GenericID")))))) 
                                                                       (if (eq 
                                                                            (car 
                                                                             pV5) 
                                                                            :|Exception|) 
                                                                           (let ((pV7 
                                                                                  (cdr 
                                                                                   pV5))) 
                                                                             (return 
                                                                              (cons 
                                                                               (cons 
                                                                                :|Exception| 
                                                                                (vector 
                                                                                 (svref 
                                                                                  pV7 
                                                                                  0) 
                                                                                 (svref 
                                                                                  pV7 
                                                                                  1) 
                                                                                 (svref 
                                                                                  pV7 
                                                                                  2) 
                                                                                 (svref 
                                                                                  pV7 
                                                                                  3) 
                                                                                 (svref 
                                                                                  pV7 
                                                                                  4) 
                                                                                 (svref 
                                                                                  pV7 
                                                                                  5) 
                                                                                 (svref 
                                                                                  pV7 
                                                                                  6) 
                                                                                 (svref 
                                                                                  pV7 
                                                                                  7))) 
                                                                               pV6))))) 
                                                                   (error 
                                                                    "Nonexhaustive match failure in parse_GenericID"))))))))))))))))))) 
             (if ( =  80 pV33) 
                 (if (consp pV34) 
                     (let ((pV37 (cdr pV34))) 
                       (if ( =  85 (car pV34)) 
                           (if (consp pV37) 
                               (let ((pV40 (cdr pV37))) 
                                 (if ( =  66 (car pV37)) 
                                     (if (consp pV40) 
                                         (let ((pV43 (cdr pV40))) 
                                           (if ( =  76 (car pV40)) 
                                               (if (consp pV43) 
                                                   (let ((pV46 (cdr pV43))) 
                                                     (if ( =  73 (car pV43)) 
                                                         (if (consp pV46) 
                                                             (if ( =  
                                                                  67 
                                                                  (car pV46)) 
                                                                 (return 
                                                                  (let ((x0 
                                                                         (XML::parse_WhiteSpace-1-1 
                                                                          (cdr 
                                                                           pV46) 
                                                                          x-1))) 
                                                                    (let ((pV26 
                                                                           (car 
                                                                            x0))
                                                                          (pV27 
                                                                           (cdr 
                                                                            x0))) 
                                                                      (block 
                                                                       nil 
                                                                       (if (eq 
                                                                            (car 
                                                                             pV26) 
                                                                            :|Ok|) 
                                                                           (let ((pV29 
                                                                                  (cdr 
                                                                                   pV26))) 
                                                                             (return 
                                                                              (let ((w1 
                                                                                     (car 
                                                                                      pV29))
                                                                                    (tail 
                                                                                     (cdr 
                                                                                      pV29))) 
                                                                                (let ((x0 
                                                                                       (XML::parse_PubidLiteral-1-1 
                                                                                        tail 
                                                                                        pV27))) 
                                                                                  (let ((pV22 
                                                                                         (car 
                                                                                          x0))
                                                                                        (pV23 
                                                                                         (cdr 
                                                                                          x0))) 
                                                                                    (block 
                                                                                     nil 
                                                                                     (if (eq 
                                                                                          (car 
                                                                                           pV22) 
                                                                                          :|Ok|) 
                                                                                         (let ((pV25 
                                                                                                (cdr 
                                                                                                 pV22))) 
                                                                                           (return 
                                                                                            (let ((publit 
                                                                                                   (car 
                                                                                                    pV25))
                                                                                                  (tail 
                                                                                                   (cdr 
                                                                                                    pV25))) 
                                                                                              (let ((x0 
                                                                                                     (XML::parse_WhiteSpace-1-1 
                                                                                                      tail 
                                                                                                      pV23))) 
                                                                                                (let ((pV18 
                                                                                                       (car 
                                                                                                        x0))
                                                                                                      (pV19 
                                                                                                       (cdr 
                                                                                                        x0))) 
                                                                                                  (block 
                                                                                                   nil 
                                                                                                   (if (eq 
                                                                                                        (car 
                                                                                                         pV18) 
                                                                                                        :|Ok|) 
                                                                                                       (let ((pV21 
                                                                                                              (cdr 
                                                                                                               pV18))) 
                                                                                                         (return 
                                                                                                          (let ((tail 
                                                                                                                 (cdr 
                                                                                                                  pV21))) 
                                                                                                            (block 
                                                                                                             nil 
                                                                                                             (if (consp 
                                                                                                                  tail) 
                                                                                                                 (if ( =  
                                                                                                                      62 
                                                                                                                      (car 
                                                                                                                       tail)) 
                                                                                                                     (return 
                                                                                                                      (XML::return-1-1 
                                                                                                                       (cons 
                                                                                                                        (vector 
                                                                                                                         (cons 
                                                                                                                          :|Some| 
                                                                                                                          (cons 
                                                                                                                           (car 
                                                                                                                            publit) 
                                                                                                                           (cdr 
                                                                                                                            publit))) 
                                                                                                                         '(:|None|) 
                                                                                                                         w1 
                                                                                                                         XML::null_whitespace) 
                                                                                                                        (cdr 
                                                                                                                         tail)) 
                                                                                                                       pV19)))) 
                                                                                                             (return 
                                                                                                              (let ((x01 
                                                                                                                     (XML::parse_SystemLiteral-1-1 
                                                                                                                      tail 
                                                                                                                      pV19))) 
                                                                                                                (let ((pV10 
                                                                                                                       (car 
                                                                                                                        x01))
                                                                                                                      (pV11 
                                                                                                                       (cdr 
                                                                                                                        x01))) 
                                                                                                                  (block 
                                                                                                                   nil 
                                                                                                                   (if (eq 
                                                                                                                        (car 
                                                                                                                         pV10) 
                                                                                                                        :|Ok|) 
                                                                                                                       (let ((pV13 
                                                                                                                              (cdr 
                                                                                                                               pV10))) 
                                                                                                                         (return 
                                                                                                                          (let ((syslit 
                                                                                                                                 (car 
                                                                                                                                  pV13))) 
                                                                                                                            (XML::return-1-1 
                                                                                                                             (cons 
                                                                                                                              (vector 
                                                                                                                               (cons 
                                                                                                                                :|Some| 
                                                                                                                                (cons 
                                                                                                                                 (car 
                                                                                                                                  publit) 
                                                                                                                                 (cdr 
                                                                                                                                  publit))) 
                                                                                                                               (cons 
                                                                                                                                :|Some| 
                                                                                                                                (cons 
                                                                                                                                 (car 
                                                                                                                                  syslit) 
                                                                                                                                 (cdr 
                                                                                                                                  syslit))) 
                                                                                                                               w1 
                                                                                                                               (car 
                                                                                                                                pV21)) 
                                                                                                                              (cdr 
                                                                                                                               pV13)) 
                                                                                                                             pV11)))) 
                                                                                                                       (if (eq 
                                                                                                                            (car 
                                                                                                                             pV10) 
                                                                                                                            :|Exception|) 
                                                                                                                           (let ((pV12 
                                                                                                                                  (cdr 
                                                                                                                                   pV10))) 
                                                                                                                             (return 
                                                                                                                              (cons 
                                                                                                                               (cons 
                                                                                                                                :|Exception| 
                                                                                                                                (vector 
                                                                                                                                 (svref 
                                                                                                                                  pV12 
                                                                                                                                  0) 
                                                                                                                                 (svref 
                                                                                                                                  pV12 
                                                                                                                                  1) 
                                                                                                                                 (svref 
                                                                                                                                  pV12 
                                                                                                                                  2) 
                                                                                                                                 (svref 
                                                                                                                                  pV12 
                                                                                                                                  3) 
                                                                                                                                 (svref 
                                                                                                                                  pV12 
                                                                                                                                  4) 
                                                                                                                                 (svref 
                                                                                                                                  pV12 
                                                                                                                                  5) 
                                                                                                                                 (svref 
                                                                                                                                  pV12 
                                                                                                                                  6) 
                                                                                                                                 (svref 
                                                                                                                                  pV12 
                                                                                                                                  7))) 
                                                                                                                               pV11))))) 
                                                                                                                   (error 
                                                                                                                    "Nonexhaustive match failure in parse_GenericID"))))))))) 
                                                                                                       (if (eq 
                                                                                                            (car 
                                                                                                             pV18) 
                                                                                                            :|Exception|) 
                                                                                                           (let ((pV20 
                                                                                                                  (cdr 
                                                                                                                   pV18))) 
                                                                                                             (return 
                                                                                                              (cons 
                                                                                                               (cons 
                                                                                                                :|Exception| 
                                                                                                                (vector 
                                                                                                                 (svref 
                                                                                                                  pV20 
                                                                                                                  0) 
                                                                                                                 (svref 
                                                                                                                  pV20 
                                                                                                                  1) 
                                                                                                                 (svref 
                                                                                                                  pV20 
                                                                                                                  2) 
                                                                                                                 (svref 
                                                                                                                  pV20 
                                                                                                                  3) 
                                                                                                                 (svref 
                                                                                                                  pV20 
                                                                                                                  4) 
                                                                                                                 (svref 
                                                                                                                  pV20 
                                                                                                                  5) 
                                                                                                                 (svref 
                                                                                                                  pV20 
                                                                                                                  6) 
                                                                                                                 (svref 
                                                                                                                  pV20 
                                                                                                                  7))) 
                                                                                                               pV19))))) 
                                                                                                   (error 
                                                                                                    "Nonexhaustive match failure in parse_GenericID"))))))) 
                                                                                         (if (eq 
                                                                                              (car 
                                                                                               pV22) 
                                                                                              :|Exception|) 
                                                                                             (let ((pV24 
                                                                                                    (cdr 
                                                                                                     pV22))) 
                                                                                               (return 
                                                                                                (cons 
                                                                                                 (cons 
                                                                                                  :|Exception| 
                                                                                                  (vector 
                                                                                                   (svref 
                                                                                                    pV24 
                                                                                                    0) 
                                                                                                   (svref 
                                                                                                    pV24 
                                                                                                    1) 
                                                                                                   (svref 
                                                                                                    pV24 
                                                                                                    2) 
                                                                                                   (svref 
                                                                                                    pV24 
                                                                                                    3) 
                                                                                                   (svref 
                                                                                                    pV24 
                                                                                                    4) 
                                                                                                   (svref 
                                                                                                    pV24 
                                                                                                    5) 
                                                                                                   (svref 
                                                                                                    pV24 
                                                                                                    6) 
                                                                                                   (svref 
                                                                                                    pV24 
                                                                                                    7))) 
                                                                                                 pV23))))) 
                                                                                     (error 
                                                                                      "Nonexhaustive match failure in parse_GenericID"))))))) 
                                                                           (if (eq 
                                                                                (car 
                                                                                 pV26) 
                                                                                :|Exception|) 
                                                                               (let ((pV28 
                                                                                      (cdr 
                                                                                       pV26))) 
                                                                                 (return 
                                                                                  (cons 
                                                                                   (cons 
                                                                                    :|Exception| 
                                                                                    (vector 
                                                                                     (svref 
                                                                                      pV28 
                                                                                      0) 
                                                                                     (svref 
                                                                                      pV28 
                                                                                      1) 
                                                                                     (svref 
                                                                                      pV28 
                                                                                      2) 
                                                                                     (svref 
                                                                                      pV28 
                                                                                      3) 
                                                                                     (svref 
                                                                                      pV28 
                                                                                      4) 
                                                                                     (svref 
                                                                                      pV28 
                                                                                      5) 
                                                                                     (svref 
                                                                                      pV28 
                                                                                      6) 
                                                                                     (svref 
                                                                                      pV28 
                                                                                      7))) 
                                                                                   pV27))))) 
                                                                       (error 
                                                                        "Nonexhaustive match failure in parse_GenericID"))))))))))))))))))))))) 
   (return 
    (XML::hard_error-1-1 
     (vector 
      "something else was seen" 
      '(:|Syntax|) 
      10 
      "ID reference in DTD must start with 'SYSTEM' or 'PUBLIC'." 
      "fail immediately" 
      start 
      start 
      (cons 
       (cons "'SYSTEM'" "system ID") 
       (cons (cons "'PUBLIC'" "public ID") nil))) 
     x-1))))


(defun XML::parse_ExternalDecls-1-1 (start x-1) 
  (labels 
    ((probe (tail rev_markups) 
      (block 
       nil 
       (if (null tail) 
           (return (XML::|!return| (cons (LIST-SPEC::rev rev_markups) nil))) 
           (if (consp tail) 
               (let ((pV39 (car tail))
                     (pV40 (cdr tail))) 
                 (progn (if ( =  37 pV39) 
                            (return 
                             (XML::monadBind-2 
                              (XML::parse_PEReference pV40) 
                              #'(lambda (pV) 
                                 (probe 
                                  (cdr pV) 
                                  (LIST-SPEC::cons-2 
                                   (cons :|PEReference| (car pV)) 
                                   rev_markups))))) 
                            (if ( =  60 pV39) 
                                (if (consp pV40) 
                                    (let ((pV42 (car pV40))
                                          (pV43 (cdr pV40))) 
                                      (if ( =  63 pV42) 
                                          (return 
                                           (XML::monadBind-2 
                                            (XML::parse_PI pV43) 
                                            #'(lambda (pV) 
                                               (let ((decl (car pV))) 
                                                 (probe 
                                                  (cdr pV) 
                                                  (LIST-SPEC::cons-2 
                                                   (cons 
                                                    :|PI| 
                                                    (cons (car decl) (cdr decl))) 
                                                   rev_markups)))))) 
                                          (if ( =  33 pV42) 
                                              (if (consp pV43) 
                                                  (let ((pV45 (car pV43))
                                                        (pV46 (cdr pV43))) 
                                                    (if ( =  65 pV45) 
                                                        (if (consp pV46) 
                                                            (let ((pV109 
                                                                   (cdr pV46))) 
                                                              (if ( =  
                                                                   84 
                                                                   (car pV46)) 
                                                                  (if (consp 
                                                                       pV109) 
                                                                      (let ((pV112 
                                                                             (cdr 
                                                                              pV109))) 
                                                                        (if ( =  
                                                                             84 
                                                                             (car 
                                                                              pV109)) 
                                                                            (if (consp 
                                                                                 pV112) 
                                                                                (let ((pV115 
                                                                                       (cdr 
                                                                                        pV112))) 
                                                                                  (if ( =  
                                                                                       76 
                                                                                       (car 
                                                                                        pV112)) 
                                                                                      (if (consp 
                                                                                           pV115) 
                                                                                          (let ((pV118 
                                                                                                 (cdr 
                                                                                                  pV115))) 
                                                                                            (if ( =  
                                                                                                 73 
                                                                                                 (car 
                                                                                                  pV115)) 
                                                                                                (if (consp 
                                                                                                     pV118) 
                                                                                                    (let ((pV121 
                                                                                                           (cdr 
                                                                                                            pV118))) 
                                                                                                      (if ( =  
                                                                                                           83 
                                                                                                           (car 
                                                                                                            pV118)) 
                                                                                                          (if (consp 
                                                                                                               pV121) 
                                                                                                              (if ( =  
                                                                                                                   84 
                                                                                                                   (car 
                                                                                                                    pV121)) 
                                                                                                                  (return 
                                                                                                                   (XML::monadBind-2 
                                                                                                                    (XML::parse_AttlistDecl 
                                                                                                                     (cdr 
                                                                                                                      pV121)) 
                                                                                                                    #'(lambda (pV) 
                                                                                                                       (let ((decl 
                                                                                                                              (car 
                                                                                                                               pV))) 
                                                                                                                         (probe 
                                                                                                                          (cdr 
                                                                                                                           pV) 
                                                                                                                          (LIST-SPEC::cons-2 
                                                                                                                           (cons 
                                                                                                                            :|Attributes| 
                                                                                                                            (vector 
                                                                                                                             (svref 
                                                                                                                              decl 
                                                                                                                              0) 
                                                                                                                             (svref 
                                                                                                                              decl 
                                                                                                                              1) 
                                                                                                                             (svref 
                                                                                                                              decl 
                                                                                                                              2) 
                                                                                                                             (svref 
                                                                                                                              decl 
                                                                                                                              3))) 
                                                                                                                           rev_markups))))))))))))))))))))))) 
                                                        (if ( =  69 pV45) 
                                                            (if (consp pV46) 
                                                                (let ((pV78 
                                                                       (car pV46))
                                                                      (pV79 
                                                                       (cdr pV46))) 
                                                                  (if ( =  
                                                                       76 
                                                                       pV78) 
                                                                      (if (consp 
                                                                           pV79) 
                                                                          (let ((pV94 
                                                                                 (cdr 
                                                                                  pV79))) 
                                                                            (if ( =  
                                                                                 69 
                                                                                 (car 
                                                                                  pV79)) 
                                                                                (if (consp 
                                                                                     pV94) 
                                                                                    (let ((pV97 
                                                                                           (cdr 
                                                                                            pV94))) 
                                                                                      (if ( =  
                                                                                           77 
                                                                                           (car 
                                                                                            pV94)) 
                                                                                          (if (consp 
                                                                                               pV97) 
                                                                                              (let ((pV100 
                                                                                                     (cdr 
                                                                                                      pV97))) 
                                                                                                (if ( =  
                                                                                                     69 
                                                                                                     (car 
                                                                                                      pV97)) 
                                                                                                    (if (consp 
                                                                                                         pV100) 
                                                                                                        (let ((pV103 
                                                                                                               (cdr 
                                                                                                                pV100))) 
                                                                                                          (if ( =  
                                                                                                               78 
                                                                                                               (car 
                                                                                                                pV100)) 
                                                                                                              (if (consp 
                                                                                                                   pV103) 
                                                                                                                  (if ( =  
                                                                                                                       84 
                                                                                                                       (car 
                                                                                                                        pV103)) 
                                                                                                                      (return 
                                                                                                                       (XML::monadBind-2 
                                                                                                                        (XML::parse_ElementDecl 
                                                                                                                         (cdr 
                                                                                                                          pV103)) 
                                                                                                                        #'(lambda (pV) 
                                                                                                                           (let ((decl 
                                                                                                                                  (car 
                                                                                                                                   pV))) 
                                                                                                                             (probe 
                                                                                                                              (cdr 
                                                                                                                               pV) 
                                                                                                                              (LIST-SPEC::cons-2 
                                                                                                                               (cons 
                                                                                                                                :|Element| 
                                                                                                                                (vector 
                                                                                                                                 (svref 
                                                                                                                                  decl 
                                                                                                                                  0) 
                                                                                                                                 (svref 
                                                                                                                                  decl 
                                                                                                                                  1) 
                                                                                                                                 (svref 
                                                                                                                                  decl 
                                                                                                                                  2) 
                                                                                                                                 (svref 
                                                                                                                                  decl 
                                                                                                                                  3) 
                                                                                                                                 (svref 
                                                                                                                                  decl 
                                                                                                                                  4))) 
                                                                                                                               rev_markups)))))))))))))))))))) 
                                                                      (if ( =  
                                                                           78 
                                                                           pV78) 
                                                                          (if (consp 
                                                                               pV79) 
                                                                              (let ((pV82 
                                                                                     (cdr 
                                                                                      pV79))) 
                                                                                (if ( =  
                                                                                     84 
                                                                                     (car 
                                                                                      pV79)) 
                                                                                    (if (consp 
                                                                                         pV82) 
                                                                                        (let ((pV85 
                                                                                               (cdr 
                                                                                                pV82))) 
                                                                                          (if ( =  
                                                                                               73 
                                                                                               (car 
                                                                                                pV82)) 
                                                                                              (if (consp 
                                                                                                   pV85) 
                                                                                                  (let ((pV88 
                                                                                                         (cdr 
                                                                                                          pV85))) 
                                                                                                    (if ( =  
                                                                                                         84 
                                                                                                         (car 
                                                                                                          pV85)) 
                                                                                                        (if (consp 
                                                                                                             pV88) 
                                                                                                            (if ( =  
                                                                                                                 89 
                                                                                                                 (car 
                                                                                                                  pV88)) 
                                                                                                                (return 
                                                                                                                 (XML::monadBind-2 
                                                                                                                  (XML::parse_EntityDecl-2 
                                                                                                                   (cdr 
                                                                                                                    pV88) 
                                                                                                                   nil) 
                                                                                                                  #'(lambda (pV) 
                                                                                                                     (probe 
                                                                                                                      (cdr 
                                                                                                                       pV) 
                                                                                                                      (LIST-SPEC::cons-2 
                                                                                                                       (cons 
                                                                                                                        :|Entity| 
                                                                                                                        (car 
                                                                                                                         pV)) 
                                                                                                                       rev_markups)))))))))))))))))))) 
                                                            (if ( =  78 pV45) 
                                                                (if (consp pV46) 
                                                                    (let ((pV52 
                                                                           (cdr 
                                                                            pV46))) 
                                                                      (if ( =  
                                                                           79 
                                                                           (car 
                                                                            pV46)) 
                                                                          (if (consp 
                                                                               pV52) 
                                                                              (let ((pV55 
                                                                                     (cdr 
                                                                                      pV52))) 
                                                                                (if ( =  
                                                                                     84 
                                                                                     (car 
                                                                                      pV52)) 
                                                                                    (if (consp 
                                                                                         pV55) 
                                                                                        (let ((pV58 
                                                                                               (cdr 
                                                                                                pV55))) 
                                                                                          (if ( =  
                                                                                               65 
                                                                                               (car 
                                                                                                pV55)) 
                                                                                              (if (consp 
                                                                                                   pV58) 
                                                                                                  (let ((pV61 
                                                                                                         (cdr 
                                                                                                          pV58))) 
                                                                                                    (if ( =  
                                                                                                         84 
                                                                                                         (car 
                                                                                                          pV58)) 
                                                                                                        (if (consp 
                                                                                                             pV61) 
                                                                                                            (let ((pV64 
                                                                                                                   (cdr 
                                                                                                                    pV61))) 
                                                                                                              (if ( =  
                                                                                                                   65 
                                                                                                                   (car 
                                                                                                                    pV61)) 
                                                                                                                  (if (consp 
                                                                                                                       pV64) 
                                                                                                                      (let ((pV67 
                                                                                                                             (cdr 
                                                                                                                              pV64))) 
                                                                                                                        (if ( =  
                                                                                                                             84 
                                                                                                                             (car 
                                                                                                                              pV64)) 
                                                                                                                            (if (consp 
                                                                                                                                 pV67) 
                                                                                                                                (let ((pV70 
                                                                                                                                       (cdr 
                                                                                                                                        pV67))) 
                                                                                                                                  (if ( =  
                                                                                                                                       73 
                                                                                                                                       (car 
                                                                                                                                        pV67)) 
                                                                                                                                      (if (consp 
                                                                                                                                           pV70) 
                                                                                                                                          (let ((pV73 
                                                                                                                                                 (cdr 
                                                                                                                                                  pV70))) 
                                                                                                                                            (if ( =  
                                                                                                                                                 79 
                                                                                                                                                 (car 
                                                                                                                                                  pV70)) 
                                                                                                                                                (if (consp 
                                                                                                                                                     pV73) 
                                                                                                                                                    (if ( =  
                                                                                                                                                         78 
                                                                                                                                                         (car 
                                                                                                                                                          pV73)) 
                                                                                                                                                        (return 
                                                                                                                                                         (XML::monadBind-2 
                                                                                                                                                          (XML::parse_NotationDecl 
                                                                                                                                                           (cdr 
                                                                                                                                                            pV73)) 
                                                                                                                                                          #'(lambda (pV) 
                                                                                                                                                             (let ((decl 
                                                                                                                                                                    (car 
                                                                                                                                                                     pV))) 
                                                                                                                                                               (probe 
                                                                                                                                                                (cdr 
                                                                                                                                                                 pV) 
                                                                                                                                                                (LIST-SPEC::cons-2 
                                                                                                                                                                 (cons 
                                                                                                                                                                  :|Notation| 
                                                                                                                                                                  (vector 
                                                                                                                                                                   (svref 
                                                                                                                                                                    decl 
                                                                                                                                                                    0) 
                                                                                                                                                                   (svref 
                                                                                                                                                                    decl 
                                                                                                                                                                    1) 
                                                                                                                                                                   (svref 
                                                                                                                                                                    decl 
                                                                                                                                                                    2) 
                                                                                                                                                                   (svref 
                                                                                                                                                                    decl 
                                                                                                                                                                    3) 
                                                                                                                                                                   (svref 
                                                                                                                                                                    decl 
                                                                                                                                                                    4))) 
                                                                                                                                                                 rev_markups)))))))))))))))))))))))))))))))) 
                                                                (if ( =  45 pV45) 
                                                                    (if (consp 
                                                                         pV46) 
                                                                        (if ( =  
                                                                             45 
                                                                             (car 
                                                                              pV46)) 
                                                                            (return 
                                                                             (XML::monadBind-2 
                                                                              (XML::parse_Comment 
                                                                               (cdr 
                                                                                pV46)) 
                                                                              #'(lambda (pV) 
                                                                                 (probe 
                                                                                  (cdr 
                                                                                   pV) 
                                                                                  (LIST-SPEC::cons-2 
                                                                                   (cons 
                                                                                    :|Comment| 
                                                                                    (car 
                                                                                     pV)) 
                                                                                   rev_markups))))))) 
                                                                    (if ( =  
                                                                         91 
                                                                         pV45) 
                                                                        (return 
                                                                         (XML::monadBind-2 
                                                                          (XML::parse_WhiteSpace 
                                                                           pV46) 
                                                                          #'(lambda (pV) 
                                                                             (let ((w1 
                                                                                    (car 
                                                                                     pV))
                                                                                   (tail1 
                                                                                    (cdr 
                                                                                     pV))) 
                                                                               (block 
                                                                                nil 
                                                                                (if (consp 
                                                                                     tail1) 
                                                                                    (let ((pV5 
                                                                                           (cdr 
                                                                                            tail1))) 
                                                                                      (if ( =  
                                                                                           73 
                                                                                           (car 
                                                                                            tail1)) 
                                                                                          (if (consp 
                                                                                               pV5) 
                                                                                              (let ((pV7 
                                                                                                     (car 
                                                                                                      pV5))
                                                                                                    (pV8 
                                                                                                     (cdr 
                                                                                                      pV5))) 
                                                                                                (if ( =  
                                                                                                     78 
                                                                                                     pV7) 
                                                                                                    (if (consp 
                                                                                                         pV8) 
                                                                                                        (let ((pV23 
                                                                                                               (cdr 
                                                                                                                pV8))) 
                                                                                                          (if ( =  
                                                                                                               67 
                                                                                                               (car 
                                                                                                                pV8)) 
                                                                                                              (if (consp 
                                                                                                                   pV23) 
                                                                                                                  (let ((pV26 
                                                                                                                         (cdr 
                                                                                                                          pV23))) 
                                                                                                                    (if ( =  
                                                                                                                         76 
                                                                                                                         (car 
                                                                                                                          pV23)) 
                                                                                                                        (if (consp 
                                                                                                                             pV26) 
                                                                                                                            (let ((pV29 
                                                                                                                                   (cdr 
                                                                                                                                    pV26))) 
                                                                                                                              (if ( =  
                                                                                                                                   85 
                                                                                                                                   (car 
                                                                                                                                    pV26)) 
                                                                                                                                  (if (consp 
                                                                                                                                       pV29) 
                                                                                                                                      (let ((pV32 
                                                                                                                                             (cdr 
                                                                                                                                              pV29))) 
                                                                                                                                        (if ( =  
                                                                                                                                             68 
                                                                                                                                             (car 
                                                                                                                                              pV29)) 
                                                                                                                                            (if (consp 
                                                                                                                                                 pV32) 
                                                                                                                                                (if ( =  
                                                                                                                                                     69 
                                                                                                                                                     (car 
                                                                                                                                                      pV32)) 
                                                                                                                                                    (return 
                                                                                                                                                     (XML::monadBind-2 
                                                                                                                                                      (XML::parse_IncludeSect-2 
                                                                                                                                                       (cdr 
                                                                                                                                                        pV32) 
                                                                                                                                                       w1) 
                                                                                                                                                      #'(lambda (pV1) 
                                                                                                                                                         (let ((include 
                                                                                                                                                                (car 
                                                                                                                                                                 pV1))) 
                                                                                                                                                           (probe 
                                                                                                                                                            (cdr 
                                                                                                                                                             pV1) 
                                                                                                                                                            (LIST-SPEC::cons-2 
                                                                                                                                                             (cons 
                                                                                                                                                              :|Include| 
                                                                                                                                                              (vector 
                                                                                                                                                               (svref 
                                                                                                                                                                include 
                                                                                                                                                                0) 
                                                                                                                                                               (svref 
                                                                                                                                                                include 
                                                                                                                                                                1) 
                                                                                                                                                               (svref 
                                                                                                                                                                include 
                                                                                                                                                                2))) 
                                                                                                                                                             rev_markups)))))))))))))))))))) 
                                                                                                    (if ( =  
                                                                                                         71 
                                                                                                         pV7) 
                                                                                                        (if (consp 
                                                                                                             pV8) 
                                                                                                            (let ((pV11 
                                                                                                                   (cdr 
                                                                                                                    pV8))) 
                                                                                                              (if ( =  
                                                                                                                   78 
                                                                                                                   (car 
                                                                                                                    pV8)) 
                                                                                                                  (if (consp 
                                                                                                                       pV11) 
                                                                                                                      (let ((pV14 
                                                                                                                             (cdr 
                                                                                                                              pV11))) 
                                                                                                                        (if ( =  
                                                                                                                             79 
                                                                                                                             (car 
                                                                                                                              pV11)) 
                                                                                                                            (if (consp 
                                                                                                                                 pV14) 
                                                                                                                                (let ((pV17 
                                                                                                                                       (cdr 
                                                                                                                                        pV14))) 
                                                                                                                                  (if ( =  
                                                                                                                                       82 
                                                                                                                                       (car 
                                                                                                                                        pV14)) 
                                                                                                                                      (if (consp 
                                                                                                                                           pV17) 
                                                                                                                                          (if ( =  
                                                                                                                                               69 
                                                                                                                                               (car 
                                                                                                                                                pV17)) 
                                                                                                                                              (return 
                                                                                                                                               (XML::monadBind-2 
                                                                                                                                                (XML::parse_IgnoreSect-2 
                                                                                                                                                 (cdr 
                                                                                                                                                  pV17) 
                                                                                                                                                 w1) 
                                                                                                                                                #'(lambda (pV1) 
                                                                                                                                                   (let ((|!ignore| 
                                                                                                                                                          (car 
                                                                                                                                                           pV1))) 
                                                                                                                                                     (probe 
                                                                                                                                                      (cdr 
                                                                                                                                                       pV1) 
                                                                                                                                                      (LIST-SPEC::cons-2 
                                                                                                                                                       (cons 
                                                                                                                                                        :|Ignore| 
                                                                                                                                                        (vector 
                                                                                                                                                         (svref 
                                                                                                                                                          |!ignore| 
                                                                                                                                                          0) 
                                                                                                                                                         (svref 
                                                                                                                                                          |!ignore| 
                                                                                                                                                          1) 
                                                                                                                                                         (svref 
                                                                                                                                                          |!ignore| 
                                                                                                                                                          2))) 
                                                                                                                                                       rev_markups)))))))))))))))))))))))) 
                                                                                (return 
                                                                                 (XML::hard_error-8 
                                                                                  "something other than INCLUDE or IGNORE was seen" 
                                                                                  '(:|Syntax|) 
                                                                                  10 
                                                                                  "In the external DTD subset, '<![' indicates an include or ignore decl" 
                                                                                  "fail immediately" 
                                                                                  start 
                                                                                  tail1 
                                                                                  (cons 
                                                                                   (cons 
                                                                                    "'<![' S 'INCLUDE'" 
                                                                                    "include decl") 
                                                                                   (cons 
                                                                                    (cons 
                                                                                     "'<![' S 'IGNORE'" 
                                                                                     "ignore  decl") 
                                                                                    nil)))))))))))))))))))))) 
                        (return 
                         (if (XML::white_char? pV39) 
                             (XML::monadBind-2 
                              (XML::parse_WhiteSpace tail) 
                              #'(lambda (pV) 
                                 (probe 
                                  (cdr pV) 
                                  (LIST-SPEC::cons-2 
                                   (cons :|WhiteSpace| (car pV)) 
                                   rev_markups)))) 
                             (XML::hard_error-8 
                              (STRING-SPEC::^-2 
                               (XML::describe_char pV39) 
                               " was seen instead") 
                              '(:|Syntax|) 
                              10 
                              "Each markup or declsep in the DTD must be one of those indicated below." 
                              "fail immediately" 
                              start 
                              tail 
                              (cons 
                               (cons "'<!ELEMENT'" "element decl") 
                               (cons 
                                (cons "'<!ATTLIST'" "attribute list decl") 
                                (cons 
                                 (cons "'<!ENTITY'" "entity decl") 
                                 (cons 
                                  (cons "'<!NOTATION'" "notation decl") 
                                  (cons 
                                   (cons "'<!--'" "comment") 
                                   (cons 
                                    (cons "'%'" "PE Reference") 
                                    (cons 
                                     (cons "'<![' S 'INCLUDE'" "include decl") 
                                     (cons 
                                      (cons "'<![' S 'IGNORE'" "ignore  decl") 
                                      (cons 
                                       (cons 
                                        "( #9 | #A | #D | #20 )" 
                                        "whitespace") 
                                       (cons 
                                        (cons "']'" "end of markups in DTD") 
                                        nil))))))))))))))))) 
       (error "Nonexhaustive match failure in parse_ExternalDecls")))) 
    (funcall (probe start nil) x-1)))


(defun XML::parse_InternalDTD-1-1 (start x-1) 
  (block 
   nil 
   (if (consp start) 
       (let ((pV51 (cdr start))) 
         (if ( =  60 (car start)) 
             (if (consp pV51) 
                 (let ((pV54 (cdr pV51))) 
                   (if ( =  33 (car pV51)) 
                       (if (consp pV54) 
                           (let ((pV57 (cdr pV54))) 
                             (if ( =  68 (car pV54)) 
                                 (if (consp pV57) 
                                     (let ((pV60 (cdr pV57))) 
                                       (if ( =  79 (car pV57)) 
                                           (if (consp pV60) 
                                               (let ((pV63 (cdr pV60))) 
                                                 (if ( =  67 (car pV60)) 
                                                     (if (consp pV63) 
                                                         (let ((pV66 (cdr pV63))) 
                                                           (if ( =  
                                                                84 
                                                                (car pV63)) 
                                                               (if (consp pV66) 
                                                                   (let ((pV69 
                                                                          (cdr 
                                                                           pV66))) 
                                                                     (if ( =  
                                                                          89 
                                                                          (car 
                                                                           pV66)) 
                                                                         (if (consp 
                                                                              pV69) 
                                                                             (let ((pV72 
                                                                                    (cdr 
                                                                                     pV69))) 
                                                                               (if ( =  
                                                                                    80 
                                                                                    (car 
                                                                                     pV69)) 
                                                                                   (if (consp 
                                                                                        pV72) 
                                                                                       (if ( =  
                                                                                            69 
                                                                                            (car 
                                                                                             pV72)) 
                                                                                           (return 
                                                                                            (let ((x0 
                                                                                                   (XML::parse_WhiteSpace-1-1 
                                                                                                    (cdr 
                                                                                                     pV72) 
                                                                                                    x-1))) 
                                                                                              (let ((pV43 
                                                                                                     (car 
                                                                                                      x0))
                                                                                                    (pV44 
                                                                                                     (cdr 
                                                                                                      x0))) 
                                                                                                (block 
                                                                                                 nil 
                                                                                                 (if (eq 
                                                                                                      (car 
                                                                                                       pV43) 
                                                                                                      :|Ok|) 
                                                                                                     (let ((pV46 
                                                                                                            (cdr 
                                                                                                             pV43))) 
                                                                                                       (return 
                                                                                                        (let ((w1 
                                                                                                               (car 
                                                                                                                pV46))
                                                                                                              (tail 
                                                                                                               (cdr 
                                                                                                                pV46))) 
                                                                                                          (let ((x0 
                                                                                                                 (XML::parse_Name-1-1 
                                                                                                                  tail 
                                                                                                                  pV44))) 
                                                                                                            (let ((pV39 
                                                                                                                   (car 
                                                                                                                    x0))
                                                                                                                  (pV40 
                                                                                                                   (cdr 
                                                                                                                    x0))) 
                                                                                                              (block 
                                                                                                               nil 
                                                                                                               (if (eq 
                                                                                                                    (car 
                                                                                                                     pV39) 
                                                                                                                    :|Ok|) 
                                                                                                                   (let ((pV42 
                                                                                                                          (cdr 
                                                                                                                           pV39))) 
                                                                                                                     (return 
                                                                                                                      (let ((name 
                                                                                                                             (car 
                                                                                                                              pV42))
                                                                                                                            (tail 
                                                                                                                             (cdr 
                                                                                                                              pV42))) 
                                                                                                                        (let ((x0 
                                                                                                                               (XML::parse_WhiteSpace-1-1 
                                                                                                                                tail 
                                                                                                                                pV40))) 
                                                                                                                          (let ((pV35 
                                                                                                                                 (car 
                                                                                                                                  x0))
                                                                                                                                (pV36 
                                                                                                                                 (cdr 
                                                                                                                                  x0))) 
                                                                                                                            (block 
                                                                                                                             nil 
                                                                                                                             (if (eq 
                                                                                                                                  (car 
                                                                                                                                   pV35) 
                                                                                                                                  :|Ok|) 
                                                                                                                                 (let ((pV38 
                                                                                                                                        (cdr 
                                                                                                                                         pV35))) 
                                                                                                                                   (return 
                                                                                                                                    (let ((wx 
                                                                                                                                           (car 
                                                                                                                                            pV38))
                                                                                                                                          (tail 
                                                                                                                                           (cdr 
                                                                                                                                            pV38))) 
                                                                                                                                      (block 
                                                                                                                                       nil 
                                                                                                                                       (if (consp 
                                                                                                                                            tail) 
                                                                                                                                           (if ( =  
                                                                                                                                                91 
                                                                                                                                                (car 
                                                                                                                                                 tail)) 
                                                                                                                                               (return 
                                                                                                                                                (let ((x0 
                                                                                                                                                       (XML::parse_InternalDecls-1-1 
                                                                                                                                                        tail 
                                                                                                                                                        pV36))) 
                                                                                                                                                  (let ((pV8 
                                                                                                                                                         (car 
                                                                                                                                                          x0))
                                                                                                                                                        (pV9 
                                                                                                                                                         (cdr 
                                                                                                                                                          x0))) 
                                                                                                                                                    (block 
                                                                                                                                                     nil 
                                                                                                                                                     (if (eq 
                                                                                                                                                          (car 
                                                                                                                                                           pV8) 
                                                                                                                                                          :|Ok|) 
                                                                                                                                                         (let ((pV11 
                                                                                                                                                                (cdr 
                                                                                                                                                                 pV8))) 
                                                                                                                                                           (return 
                                                                                                                                                            (let ((decls 
                                                                                                                                                                   (car 
                                                                                                                                                                    pV11))
                                                                                                                                                                  (tail1 
                                                                                                                                                                   (cdr 
                                                                                                                                                                    pV11))) 
                                                                                                                                                              (block 
                                                                                                                                                               nil 
                                                                                                                                                               (if (consp 
                                                                                                                                                                    tail1) 
                                                                                                                                                                   (let ((pV6 
                                                                                                                                                                          (car 
                                                                                                                                                                           tail1))) 
                                                                                                                                                                     (progn (if ( =  
                                                                                                                                                                                 62 
                                                                                                                                                                                 pV6) 
                                                                                                                                                                                (return 
                                                                                                                                                                                 (XML::return-1-1 
                                                                                                                                                                                  (cons 
                                                                                                                                                                                   (cons 
                                                                                                                                                                                    :|Some| 
                                                                                                                                                                                    (vector 
                                                                                                                                                                                     decls 
                                                                                                                                                                                     '(:|None|) 
                                                                                                                                                                                     name 
                                                                                                                                                                                     w1 
                                                                                                                                                                                     '(:|None|) 
                                                                                                                                                                                     wx)) 
                                                                                                                                                                                   (cdr 
                                                                                                                                                                                    tail1)) 
                                                                                                                                                                                  pV9))) 
                                                                                                                                                                            (return 
                                                                                                                                                                             (XML::monadSeq-1-1 
                                                                                                                                                                              (cons 
                                                                                                                                                                               (XML::error-8 
                                                                                                                                                                                (STRING-SPEC::^-2 
                                                                                                                                                                                 (XML::describe_char 
                                                                                                                                                                                  pV6) 
                                                                                                                                                                                 " was seen instead") 
                                                                                                                                                                                '(:|Syntax|) 
                                                                                                                                                                                10 
                                                                                                                                                                                "DTD must terminate with '>'." 
                                                                                                                                                                                "pretend interpolated '>' was seen" 
                                                                                                                                                                                start 
                                                                                                                                                                                tail1 
                                                                                                                                                                                (cons 
                                                                                                                                                                                 (cons 
                                                                                                                                                                                  "'>'" 
                                                                                                                                                                                  "to terminate DTD") 
                                                                                                                                                                                 nil)) 
                                                                                                                                                                               (XML::|!return| 
                                                                                                                                                                                (cons 
                                                                                                                                                                                 (cons 
                                                                                                                                                                                  :|Some| 
                                                                                                                                                                                  (vector 
                                                                                                                                                                                   decls 
                                                                                                                                                                                   '(:|None|) 
                                                                                                                                                                                   name 
                                                                                                                                                                                   w1 
                                                                                                                                                                                   '(:|None|) 
                                                                                                                                                                                   wx)) 
                                                                                                                                                                                 tail1))) 
                                                                                                                                                                              pV9))))) 
                                                                                                                                                               (return 
                                                                                                                                                                (XML::hard_error-1-1 
                                                                                                                                                                 (vector 
                                                                                                                                                                  "EOF occurred first" 
                                                                                                                                                                  '(:|Syntax|) 
                                                                                                                                                                  10 
                                                                                                                                                                  "DTD must terminate with '>'." 
                                                                                                                                                                  "fail immediately" 
                                                                                                                                                                  start 
                                                                                                                                                                  tail1 
                                                                                                                                                                  (cons 
                                                                                                                                                                   (cons 
                                                                                                                                                                    "'>'" 
                                                                                                                                                                    "to terminate DTD") 
                                                                                                                                                                   nil)) 
                                                                                                                                                                 pV9)))))) 
                                                                                                                                                         (if (eq 
                                                                                                                                                              (car 
                                                                                                                                                               pV8) 
                                                                                                                                                              :|Exception|) 
                                                                                                                                                             (let ((pV10 
                                                                                                                                                                    (cdr 
                                                                                                                                                                     pV8))) 
                                                                                                                                                               (return 
                                                                                                                                                                (cons 
                                                                                                                                                                 (cons 
                                                                                                                                                                  :|Exception| 
                                                                                                                                                                  (vector 
                                                                                                                                                                   (svref 
                                                                                                                                                                    pV10 
                                                                                                                                                                    0) 
                                                                                                                                                                   (svref 
                                                                                                                                                                    pV10 
                                                                                                                                                                    1) 
                                                                                                                                                                   (svref 
                                                                                                                                                                    pV10 
                                                                                                                                                                    2) 
                                                                                                                                                                   (svref 
                                                                                                                                                                    pV10 
                                                                                                                                                                    3) 
                                                                                                                                                                   (svref 
                                                                                                                                                                    pV10 
                                                                                                                                                                    4) 
                                                                                                                                                                   (svref 
                                                                                                                                                                    pV10 
                                                                                                                                                                    5) 
                                                                                                                                                                   (svref 
                                                                                                                                                                    pV10 
                                                                                                                                                                    6) 
                                                                                                                                                                   (svref 
                                                                                                                                                                    pV10 
                                                                                                                                                                    7))) 
                                                                                                                                                                 pV9))))) 
                                                                                                                                                     (error 
                                                                                                                                                      "Nonexhaustive match failure in parse_InternalDTD"))))))) 
                                                                                                                                       (return 
                                                                                                                                        (let ((x0 
                                                                                                                                               (XML::parse_ExternalID-1-1 
                                                                                                                                                tail 
                                                                                                                                                pV36))) 
                                                                                                                                          (let ((pV27 
                                                                                                                                                 (car 
                                                                                                                                                  x0))
                                                                                                                                                (pV28 
                                                                                                                                                 (cdr 
                                                                                                                                                  x0))) 
                                                                                                                                            (block 
                                                                                                                                             nil 
                                                                                                                                             (if (eq 
                                                                                                                                                  (car 
                                                                                                                                                   pV27) 
                                                                                                                                                  :|Ok|) 
                                                                                                                                                 (let ((pV30 
                                                                                                                                                        (cdr 
                                                                                                                                                         pV27))) 
                                                                                                                                                   (return 
                                                                                                                                                    (let ((external_id 
                                                                                                                                                           (car 
                                                                                                                                                            pV30))
                                                                                                                                                          (tail1 
                                                                                                                                                           (cdr 
                                                                                                                                                            pV30))) 
                                                                                                                                                      (let ((x0 
                                                                                                                                                             (XML::parse_WhiteSpace-1-1 
                                                                                                                                                              tail1 
                                                                                                                                                              pV28))) 
                                                                                                                                                        (let ((pV23 
                                                                                                                                                               (car 
                                                                                                                                                                x0))
                                                                                                                                                              (pV24 
                                                                                                                                                               (cdr 
                                                                                                                                                                x0))) 
                                                                                                                                                          (block 
                                                                                                                                                           nil 
                                                                                                                                                           (if (eq 
                                                                                                                                                                (car 
                                                                                                                                                                 pV23) 
                                                                                                                                                                :|Ok|) 
                                                                                                                                                               (let ((pV26 
                                                                                                                                                                      (cdr 
                                                                                                                                                                       pV23))) 
                                                                                                                                                                 (return 
                                                                                                                                                                  (let ((w3 
                                                                                                                                                                         (car 
                                                                                                                                                                          pV26))
                                                                                                                                                                        (tail1 
                                                                                                                                                                         (cdr 
                                                                                                                                                                          pV26))) 
                                                                                                                                                                    (let ((x0 
                                                                                                                                                                           (XML::parse_InternalDecls-1-1 
                                                                                                                                                                            tail1 
                                                                                                                                                                            pV24))) 
                                                                                                                                                                      (let ((pV19 
                                                                                                                                                                             (car 
                                                                                                                                                                              x0))
                                                                                                                                                                            (pV20 
                                                                                                                                                                             (cdr 
                                                                                                                                                                              x0))) 
                                                                                                                                                                        (block 
                                                                                                                                                                         nil 
                                                                                                                                                                         (if (eq 
                                                                                                                                                                              (car 
                                                                                                                                                                               pV19) 
                                                                                                                                                                              :|Ok|) 
                                                                                                                                                                             (let ((pV22 
                                                                                                                                                                                    (cdr 
                                                                                                                                                                                     pV19))) 
                                                                                                                                                                               (return 
                                                                                                                                                                                (let ((decls 
                                                                                                                                                                                       (car 
                                                                                                                                                                                        pV22))
                                                                                                                                                                                      (tail1 
                                                                                                                                                                                       (cdr 
                                                                                                                                                                                        pV22))) 
                                                                                                                                                                                  (block 
                                                                                                                                                                                   nil 
                                                                                                                                                                                   (if (consp 
                                                                                                                                                                                        tail1) 
                                                                                                                                                                                       (let ((pV17 
                                                                                                                                                                                              (car 
                                                                                                                                                                                               tail1))) 
                                                                                                                                                                                         (progn (if ( =  
                                                                                                                                                                                                     62 
                                                                                                                                                                                                     pV17) 
                                                                                                                                                                                                    (return 
                                                                                                                                                                                                     (XML::return-1-1 
                                                                                                                                                                                                      (cons 
                                                                                                                                                                                                       (cons 
                                                                                                                                                                                                        :|Some| 
                                                                                                                                                                                                        (vector 
                                                                                                                                                                                                         decls 
                                                                                                                                                                                                         (cons 
                                                                                                                                                                                                          :|Some| 
                                                                                                                                                                                                          (vector 
                                                                                                                                                                                                           (svref 
                                                                                                                                                                                                            external_id 
                                                                                                                                                                                                            0) 
                                                                                                                                                                                                           (svref 
                                                                                                                                                                                                            external_id 
                                                                                                                                                                                                            1) 
                                                                                                                                                                                                           (svref 
                                                                                                                                                                                                            external_id 
                                                                                                                                                                                                            2) 
                                                                                                                                                                                                           (svref 
                                                                                                                                                                                                            external_id 
                                                                                                                                                                                                            3))) 
                                                                                                                                                                                                         name 
                                                                                                                                                                                                         w1 
                                                                                                                                                                                                         (cons 
                                                                                                                                                                                                          :|Some| 
                                                                                                                                                                                                          wx) 
                                                                                                                                                                                                         w3)) 
                                                                                                                                                                                                       (cdr 
                                                                                                                                                                                                        tail1)) 
                                                                                                                                                                                                      pV20))) 
                                                                                                                                                                                                (return 
                                                                                                                                                                                                 (XML::monadSeq-1-1 
                                                                                                                                                                                                  (cons 
                                                                                                                                                                                                   (XML::error-8 
                                                                                                                                                                                                    (STRING-SPEC::^-2 
                                                                                                                                                                                                     (XML::describe_char 
                                                                                                                                                                                                      pV17) 
                                                                                                                                                                                                     " was seen instead") 
                                                                                                                                                                                                    '(:|Syntax|) 
                                                                                                                                                                                                    10 
                                                                                                                                                                                                    "DTD must terminate with '>'." 
                                                                                                                                                                                                    "pretend interpolated '>' was seen" 
                                                                                                                                                                                                    start 
                                                                                                                                                                                                    tail1 
                                                                                                                                                                                                    (cons 
                                                                                                                                                                                                     (cons 
                                                                                                                                                                                                      "'>'" 
                                                                                                                                                                                                      "to terminate DTD") 
                                                                                                                                                                                                     nil)) 
                                                                                                                                                                                                   (XML::|!return| 
                                                                                                                                                                                                    (cons 
                                                                                                                                                                                                     (cons 
                                                                                                                                                                                                      :|Some| 
                                                                                                                                                                                                      (vector 
                                                                                                                                                                                                       decls 
                                                                                                                                                                                                       (cons 
                                                                                                                                                                                                        :|Some| 
                                                                                                                                                                                                        (vector 
                                                                                                                                                                                                         (svref 
                                                                                                                                                                                                          external_id 
                                                                                                                                                                                                          0) 
                                                                                                                                                                                                         (svref 
                                                                                                                                                                                                          external_id 
                                                                                                                                                                                                          1) 
                                                                                                                                                                                                         (svref 
                                                                                                                                                                                                          external_id 
                                                                                                                                                                                                          2) 
                                                                                                                                                                                                         (svref 
                                                                                                                                                                                                          external_id 
                                                                                                                                                                                                          3))) 
                                                                                                                                                                                                       name 
                                                                                                                                                                                                       w1 
                                                                                                                                                                                                       (cons 
                                                                                                                                                                                                        :|Some| 
                                                                                                                                                                                                        wx) 
                                                                                                                                                                                                       w3)) 
                                                                                                                                                                                                     tail1))) 
                                                                                                                                                                                                  pV20))))) 
                                                                                                                                                                                   (return 
                                                                                                                                                                                    (XML::hard_error-1-1 
                                                                                                                                                                                     (vector 
                                                                                                                                                                                      "EOF occurred first" 
                                                                                                                                                                                      '(:|Syntax|) 
                                                                                                                                                                                      0 
                                                                                                                                                                                      "DTD must terminate with '>'." 
                                                                                                                                                                                      "fail immediately" 
                                                                                                                                                                                      start 
                                                                                                                                                                                      nil 
                                                                                                                                                                                      (cons 
                                                                                                                                                                                       (cons 
                                                                                                                                                                                        "'>'" 
                                                                                                                                                                                        "to terminate DTD") 
                                                                                                                                                                                       nil)) 
                                                                                                                                                                                     pV20)))))) 
                                                                                                                                                                             (if (eq 
                                                                                                                                                                                  (car 
                                                                                                                                                                                   pV19) 
                                                                                                                                                                                  :|Exception|) 
                                                                                                                                                                                 (let ((pV21 
                                                                                                                                                                                        (cdr 
                                                                                                                                                                                         pV19))) 
                                                                                                                                                                                   (return 
                                                                                                                                                                                    (cons 
                                                                                                                                                                                     (cons 
                                                                                                                                                                                      :|Exception| 
                                                                                                                                                                                      (vector 
                                                                                                                                                                                       (svref 
                                                                                                                                                                                        pV21 
                                                                                                                                                                                        0) 
                                                                                                                                                                                       (svref 
                                                                                                                                                                                        pV21 
                                                                                                                                                                                        1) 
                                                                                                                                                                                       (svref 
                                                                                                                                                                                        pV21 
                                                                                                                                                                                        2) 
                                                                                                                                                                                       (svref 
                                                                                                                                                                                        pV21 
                                                                                                                                                                                        3) 
                                                                                                                                                                                       (svref 
                                                                                                                                                                                        pV21 
                                                                                                                                                                                        4) 
                                                                                                                                                                                       (svref 
                                                                                                                                                                                        pV21 
                                                                                                                                                                                        5) 
                                                                                                                                                                                       (svref 
                                                                                                                                                                                        pV21 
                                                                                                                                                                                        6) 
                                                                                                                                                                                       (svref 
                                                                                                                                                                                        pV21 
                                                                                                                                                                                        7))) 
                                                                                                                                                                                     pV20))))) 
                                                                                                                                                                         (error 
                                                                                                                                                                          "Nonexhaustive match failure in parse_InternalDTD"))))))) 
                                                                                                                                                               (if (eq 
                                                                                                                                                                    (car 
                                                                                                                                                                     pV23) 
                                                                                                                                                                    :|Exception|) 
                                                                                                                                                                   (let ((pV25 
                                                                                                                                                                          (cdr 
                                                                                                                                                                           pV23))) 
                                                                                                                                                                     (return 
                                                                                                                                                                      (cons 
                                                                                                                                                                       (cons 
                                                                                                                                                                        :|Exception| 
                                                                                                                                                                        (vector 
                                                                                                                                                                         (svref 
                                                                                                                                                                          pV25 
                                                                                                                                                                          0) 
                                                                                                                                                                         (svref 
                                                                                                                                                                          pV25 
                                                                                                                                                                          1) 
                                                                                                                                                                         (svref 
                                                                                                                                                                          pV25 
                                                                                                                                                                          2) 
                                                                                                                                                                         (svref 
                                                                                                                                                                          pV25 
                                                                                                                                                                          3) 
                                                                                                                                                                         (svref 
                                                                                                                                                                          pV25 
                                                                                                                                                                          4) 
                                                                                                                                                                         (svref 
                                                                                                                                                                          pV25 
                                                                                                                                                                          5) 
                                                                                                                                                                         (svref 
                                                                                                                                                                          pV25 
                                                                                                                                                                          6) 
                                                                                                                                                                         (svref 
                                                                                                                                                                          pV25 
                                                                                                                                                                          7))) 
                                                                                                                                                                       pV24))))) 
                                                                                                                                                           (error 
                                                                                                                                                            "Nonexhaustive match failure in parse_InternalDTD"))))))) 
                                                                                                                                                 (if (eq 
                                                                                                                                                      (car 
                                                                                                                                                       pV27) 
                                                                                                                                                      :|Exception|) 
                                                                                                                                                     (let ((pV29 
                                                                                                                                                            (cdr 
                                                                                                                                                             pV27))) 
                                                                                                                                                       (return 
                                                                                                                                                        (cons 
                                                                                                                                                         (cons 
                                                                                                                                                          :|Exception| 
                                                                                                                                                          (vector 
                                                                                                                                                           (svref 
                                                                                                                                                            pV29 
                                                                                                                                                            0) 
                                                                                                                                                           (svref 
                                                                                                                                                            pV29 
                                                                                                                                                            1) 
                                                                                                                                                           (svref 
                                                                                                                                                            pV29 
                                                                                                                                                            2) 
                                                                                                                                                           (svref 
                                                                                                                                                            pV29 
                                                                                                                                                            3) 
                                                                                                                                                           (svref 
                                                                                                                                                            pV29 
                                                                                                                                                            4) 
                                                                                                                                                           (svref 
                                                                                                                                                            pV29 
                                                                                                                                                            5) 
                                                                                                                                                           (svref 
                                                                                                                                                            pV29 
                                                                                                                                                            6) 
                                                                                                                                                           (svref 
                                                                                                                                                            pV29 
                                                                                                                                                            7))) 
                                                                                                                                                         pV28))))) 
                                                                                                                                             (error 
                                                                                                                                              "Nonexhaustive match failure in parse_InternalDTD"))))))))) 
                                                                                                                                 (if (eq 
                                                                                                                                      (car 
                                                                                                                                       pV35) 
                                                                                                                                      :|Exception|) 
                                                                                                                                     (let ((pV37 
                                                                                                                                            (cdr 
                                                                                                                                             pV35))) 
                                                                                                                                       (return 
                                                                                                                                        (cons 
                                                                                                                                         (cons 
                                                                                                                                          :|Exception| 
                                                                                                                                          (vector 
                                                                                                                                           (svref 
                                                                                                                                            pV37 
                                                                                                                                            0) 
                                                                                                                                           (svref 
                                                                                                                                            pV37 
                                                                                                                                            1) 
                                                                                                                                           (svref 
                                                                                                                                            pV37 
                                                                                                                                            2) 
                                                                                                                                           (svref 
                                                                                                                                            pV37 
                                                                                                                                            3) 
                                                                                                                                           (svref 
                                                                                                                                            pV37 
                                                                                                                                            4) 
                                                                                                                                           (svref 
                                                                                                                                            pV37 
                                                                                                                                            5) 
                                                                                                                                           (svref 
                                                                                                                                            pV37 
                                                                                                                                            6) 
                                                                                                                                           (svref 
                                                                                                                                            pV37 
                                                                                                                                            7))) 
                                                                                                                                         pV36))))) 
                                                                                                                             (error 
                                                                                                                              "Nonexhaustive match failure in parse_InternalDTD"))))))) 
                                                                                                                   (if (eq 
                                                                                                                        (car 
                                                                                                                         pV39) 
                                                                                                                        :|Exception|) 
                                                                                                                       (let ((pV41 
                                                                                                                              (cdr 
                                                                                                                               pV39))) 
                                                                                                                         (return 
                                                                                                                          (cons 
                                                                                                                           (cons 
                                                                                                                            :|Exception| 
                                                                                                                            (vector 
                                                                                                                             (svref 
                                                                                                                              pV41 
                                                                                                                              0) 
                                                                                                                             (svref 
                                                                                                                              pV41 
                                                                                                                              1) 
                                                                                                                             (svref 
                                                                                                                              pV41 
                                                                                                                              2) 
                                                                                                                             (svref 
                                                                                                                              pV41 
                                                                                                                              3) 
                                                                                                                             (svref 
                                                                                                                              pV41 
                                                                                                                              4) 
                                                                                                                             (svref 
                                                                                                                              pV41 
                                                                                                                              5) 
                                                                                                                             (svref 
                                                                                                                              pV41 
                                                                                                                              6) 
                                                                                                                             (svref 
                                                                                                                              pV41 
                                                                                                                              7))) 
                                                                                                                           pV40))))) 
                                                                                                               (error 
                                                                                                                "Nonexhaustive match failure in parse_InternalDTD"))))))) 
                                                                                                     (if (eq 
                                                                                                          (car 
                                                                                                           pV43) 
                                                                                                          :|Exception|) 
                                                                                                         (let ((pV45 
                                                                                                                (cdr 
                                                                                                                 pV43))) 
                                                                                                           (return 
                                                                                                            (cons 
                                                                                                             (cons 
                                                                                                              :|Exception| 
                                                                                                              (vector 
                                                                                                               (svref 
                                                                                                                pV45 
                                                                                                                0) 
                                                                                                               (svref 
                                                                                                                pV45 
                                                                                                                1) 
                                                                                                               (svref 
                                                                                                                pV45 
                                                                                                                2) 
                                                                                                               (svref 
                                                                                                                pV45 
                                                                                                                3) 
                                                                                                               (svref 
                                                                                                                pV45 
                                                                                                                4) 
                                                                                                               (svref 
                                                                                                                pV45 
                                                                                                                5) 
                                                                                                               (svref 
                                                                                                                pV45 
                                                                                                                6) 
                                                                                                               (svref 
                                                                                                                pV45 
                                                                                                                7))) 
                                                                                                             pV44))))) 
                                                                                                 (error 
                                                                                                  "Nonexhaustive match failure in parse_InternalDTD"))))))))))))))))))))))))))))))) 
   (return (XML::return-1-1 (cons '(:|None|) start) x-1))))

(defun XML::type_attribute-3 (x0 x1 x2) (XML::type_attribute (vector x0 x1 x2)))



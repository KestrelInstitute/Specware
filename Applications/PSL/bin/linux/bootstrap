#!/bin/bash --noprofile

# This script bootstraps PSL.

# The --noprofile inhibits loading of ~/.bash_profile and ~/.profile
# files. See "man bash" for details. The 'set -v' turns on echoing of
# lines read. This will be removed later.

act='bootstrap'

PATH=/bin:/usr/bin:/etc:/sbin:/usr/sbin

# set -v

# Test whether SPECWARE4 has been set
if [ -z "$SPECWARE4" ]; then
    echo "Failed to $act, SPECWARE4 environment variable not set" 2>&1
    exit 1
fi

# Test whether SPECWARE4 is a directory
if [ ! -d "$SPECWARE4" ]; then
   echo "Failed to $act, $SPECWARE4 is not a directory" 2>&1
   exit 1
fi

# Ensure SPECWARE4 is set to full pathname:
case "$SPECWARE4" in
    /*) : ok;;
    *)  SPECWARE="`pwd`/$SPECWARE4";;
esac

if [ ! -d "$SPECWARE4"/Applications/PSL ]; then
   echo "Failed to $act: could not find directory
   $SPECWARE4/Applications/PSL" 2>&1
   exit 1
fi

echo cd $SPECWARE4/Applications/PSL
cd $SPECWARE4/Applications/PSL

# Try to find lisp executable:

if [ -z "$LISP" ]; then
   for L in /usr/local/acl/acl62/alisp /usr/local/acl/acl61/alisp /usr/local/acl/acl501/lisp; do
      if [ -x "$L" ]; then
         export LISP="$L"; break
      fi
   done
fi

if [ -z "$LISP" ]; then
   echo "Failed to $act, no LISP executable found" 2>&1
   exit 1
fi

if [ ! -x "$LISP" ]; then
   echo "Failed to $act, $LISP is not executable" 2>&1
   exit 1
fi

echo " "
if [ -f lisp/PSL.lisp ]; then
  echo "Saving previous specware lisp file ..."
  echo "cp -p -f lisp/PSL.lisp lisp/PSL-save.lisp"
  cp -p -f lisp/PSL.lisp lisp/PSL-save.lisp
else
  echo "Note: No previous specware lisp file."
fi
echo " "
if [ -f bin/linux/PSL.dxl ]; then
  echo "Saving previous specware image ..."
  echo "cp -p -f bin/linux/PSL.dxl bin/linux/PSL-save.dxl"
  cp -p -f bin/linux/PSL.dxl bin/linux/PSL-save.dxl
else
  echo "Note: No previous specware image."
fi
echo " "

# Note the use of the <<-XXXX in the following. The - means that preceeding
# tabs are removed.  Thus the tabs that follow are significant. If you
# change them to spaces, the end of the "here-document" is not recognized
# (the XXXX).

# Is there a way to inhibit all the warnings (eg unused variable)
# when Lisp loads?

export SWPATH=$SPECWARE4:.
EXIT_ON_ERRORS=$SPECWARE4/Applications/Specware/bin/linux/exit-on-errors

echo "\$SWPATH=$SWPATH"

# All the toplevel routines that activate Specware return a boolean value.
# They return true if the call to Specware succeeded without activating
# Specware's toplevel handler. They return false (lisp nil) when the
# handler is invoked. If, when bootrapping, the toplevel handler is
# called, then we abort the bootstrap.

if [ -f lisp ]; then
   echo "Failed to $act, $SPECWARE4/Applications/PSL/lisp is not a directory" 2>&1
   exit 1
fi

$SPECWARE4/Applications/Specware/bin/linux/Specware4-text -batch <<-XXXX
               :swpath
	(load "$EXIT_ON_ERRORS") ; bin/linux/exit-on-errors
	(enlarge-stack)
	(exiting-on-errors 
	  (if (sw "/Applications/PSL/PSL")
	    (exit 0)
	    (exit 1)))
XXXX
RC=$?

# If the bootstrap failed (non-zero exit status) then we abort.
if [ $RC -ne 0 ]; then
  echo ""
  echo "Bootstrap failed with code $RC, exiting ..."
  exit $RC
fi

echo " "
echo cd $SPECWARE4/Applications/PSL/Handwritten/Lisp
cd $SPECWARE4/Applications/PSL/Handwritten/Lisp

# We load the new Specware4.lisp twice, each in a fresh lisp session. The
# first time compiles everything.  As we have just generated a new
# lisp file for Specware, we are certain something needs to be compiled.
# We could do the load and compile up above in the lisp that generated it,
# but that seems weird to me ...

echo " "
echo "Loading PSL ... (to compile)"
echo " "
$LISP -batch <<-XXXX
	(load "$EXIT_ON_ERRORS")
	(exiting-on-errors 
	  (load "PSL.lisp"))
XXXX
RC=$?

# If the load failed (non-zero exit status) then we abort.
if [ $RC -ne 0 ]; then
  echo ""
  echo "First load failed with code $RC, exiting ..."
  exit $RC
fi

# The second time is just to do the dumplisp. If we do it in one
# go, the generated dxl file is almost 4 times larger.
#
# I once added a (gc) between the load and the dumplisp, and the dxl
# file became 10k bigger. Go figure.

# People who want to avoid lots of line breaks can set *DEFAULT-RIGHT-MARGIN* 
# in their lisp init.

echo " "
echo "Loading PSL ... (for dumplisp)"
echo " "
$LISP -batch <<-XXXX
	(load "$EXIT_ON_ERRORS")
	(exiting-on-errors 
	  (load "PSL.lisp"))
	(excl::dumplisp :name "$SPECWARE4/Applications/PSL/bin/linux/PSL.dxl")
XXXX
RC=$?

# If the load failed (non-zero exit status) then we abort.
if [ $RC -ne 0 ]; then
  echo ""
  echo "Second load failed with code $RC, exiting ..."
  exit $RC
fi

#!/bin/bash --noprofile

# This script bootstraps Specware4.
# That is,
#  - it saves the old generated Specware4.lisp and Specware4.dxl (ie world)
#  - it starts Specware4 
#      - it first tries to run a lisp session with an existing dxl image
#      - if that fails it tries to load Specware from previously generated lisp
#  - applies Specware to itself (sw "/Applications/Specware/Specware4")
#     to generate a new Specware4.lisp,
#  - starts a fresh lisp session
#  - loads the new Specware (under Handwritten/Lisp, (load "Specware4.lisp"))
#    (this compiles everything)
#  - starts a fresh lisp session again
#  - loads the new Specware (under Handwritten/Lisp, (load "Specware4.lisp"))
#  - dumps a world into the bin directory

# Perhaps there should be a different script for bootstrapping from lisp
# (bootstrap-from-lisp?).

# The --noprofile inhibits loading of ~/.bash_profile and ~/.profile
# files. See "man bash" for details. The 'set -v' turns on echoing of
# lines read. This will be removed later.

# set -v

# We assume SPECWARE4 has been set.
if [ -z $SPECWARE4 ]; then
    echo "Failed to bootstrap, SPECWARE4 environment variable not set"
    exit 1
fi

echo \$SPECWARE4=$SPECWARE4

PATH=/bin:/usr/bin:/etc:/sbin:/usr/sbin

LISP=${LISP:-/usr/local/acl/acl61/alisp}

echo cd $SPECWARE4/Applications/Specware
cd $SPECWARE4/Applications/Specware

echo " "
if [ -f lisp/Specware4.lisp ]; then
  echo "Saving previous specware lisp file ..."
  echo "cp -f lisp/Specware4.lisp lisp/Specware4-save.lisp"
  cp -f lisp/Specware4.lisp lisp/Specware4-save.lisp
else
  echo "Note: No previous specware lisp file."
fi
echo " "
if [ -f bin/linux/Specware4.dxl ]; then
  echo "Saving previous specware image ..."
  echo "cp -f bin/linux/Specware4.dxl bin/linux/Specware4-save.dxl"
  cp -f bin/linux/Specware4.dxl bin/linux/Specware4-save.dxl
else
  echo "Note: No previous specware image."
fi
echo " "

# Note the use of the <<-XXXX in the following. The - means that preceeding
# tabs are removed.  Thus the tabs that follow are significant. If you
# change them to spaces, the end of the "here-document" is not recognized
# (the XXXX).

# Is there a way to inhibit all the warnings (eg unused variable)
# when Lisp loads?

SWPATH=$SPECWARE4:.

# All the toplevel routines that activate Specware return a boolean value.
# They return true if the call to Specware succeeded without activating
# Specware's toplevel handler. They return false (lisp nil) when the
# handler is invoked. If, when bootrapping, the toplevel handler is
# called, then we abort the bootstrap.

if [ -f bin/linux/Specware4.dxl ]; then
	echo "Bootstrapping from existing Specware image: bin/linux/Specware4.dxl"
        echo " "
	bin/linux/Specware4-text -batch <<-XXXX
		(defun bail-out-on-storage-condition (storage-condition)
		    (format t "~&Lisp session terminated after storage condition.~%")
		    (exit 99))
		(defun bail-out-on-signals (os-exception)
		  (let ((signal-number (excl::operating-system-signal-number os-exception))
		        (signal-name   (excl::operating-system-signal-name   os-exception)))
		    (when (stringp signal-number) (rotatef signal-name signal-number)) ; workaround for Allegro bug 
		    (format t "~&Lisp session terminated by OS signal ~D: ~A~%" signal-number signal-name)
		    (exit signal-number)))
		(handler-bind ((INTERRUPT-SIGNAL  (function bail-out-on-signals))
			       (STORAGE-CONDITION (function bail-out-on-storage-condition)))		
 		  (if (sw "/Applications/Specware/Specware4")
		    (exit 0)
		    (if (find-symbol "SW-NOW-RETURNS-STATUS") ; temp hack, will become true always
			(exit 1)     ; eventually we will always do this if SW returns NIL
			(exit 0))))  ; temp hack until SW returns true on success
	XXXX
        RC=$?
else
	if [ -f lisp/Specware4.lisp ]; then
		echo "Bootstrapping from previously generated lisp: lisp/Specware4.lisp"
                echo " "
		cd Handwritten/Lisp
		$LISP -batch <<-XXXX
			(defun bail-out-on-storage-condition (storage-condition)
			    (format t "~&Lisp session terminated after storage condition.~%")
			    (exit 99))
			(defun bail-out-on-signals (os-exception)
			  (let ((signal-number (excl::operating-system-signal-number os-exception))
			        (signal-name   (excl::operating-system-signal-name   os-exception)))
			    (when (stringp signal-number) (rotatef signal-name signal-number)) ; workaround for Allegro bug 
			    (format t "~&Lisp session terminated by OS signal ~D: ~A~%" signal-number signal-name)
			    (exit signal-number)))
			(handler-bind ((INTERRUPT-SIGNAL  (function bail-out-on-signals))
				       (STORAGE-CONDITION (function bail-out-on-storage-condition)))		
			  (load "Specware4.lisp")
			  (if (sw "/Applications/Specware/Specware4")
			    (exit 0)
			    (if (find-symbol "SW-NOW-RETURNS-STATUS") ; temp hack, will become true always
				(exit 1)     ; eventually we will always do this if SW returns NIL
				(exit 0))))  ; temp hack until SW returns true on success
		XXXX
                RC=$?
	else
		# This is where you end up if you do cvs checkout and then
		#  run bootstrap.  Maybe we could get a default version of
		#  Specware4.lisp from somewhere?
		echo " "
		echo "Bootstrap failed"
		echo "Could not find bin/linux/Specware4.dxl or lisp/Specware4.lisp"
		echo "under $SPECWARE4/Applications/Specware"
		exit 1
	fi
fi

# If the bootstrap failed (non-zero exit status) then we abort.
if [ $RC -ne 0 ]; then
  echo ""
  echo "Bootstrap failed with code $RC, exiting ..."
  exit 1
fi

echo " "
echo cd $SPECWARE4/Applications/Specware/Handwritten/Lisp
cd $SPECWARE4/Applications/Specware/Handwritten/Lisp

# We load the new Specware4.lisp twice, each in a fresh lisp session. The
# first time compiles everything.  As we have just generated a new
# lisp file for Specware, we are certain something needs to be compiled.
# We could do the load and compile up above in the lisp that generated it,
# but that seems weird to me ...

echo " "
echo "Loading Specware ... (to compile)"
echo " "
$LISP -batch <<-XXXX
	(defun bail-out-on-storage-condition (storage-condition)
	    (format t "~&Lisp session terminated after storage condition.~%")
	    (exit 99))
	(defun bail-out-on-signals (os-exception)
	  (let ((signal-number (excl::operating-system-signal-number os-exception))
	        (signal-name   (excl::operating-system-signal-name   os-exception)))
	    (when (stringp signal-number) (rotatef signal-name signal-number)) ; workaround for Allegro bug 
	    (format t "~&Lisp session terminated by OS signal ~D: ~A~%" signal-number signal-name)
	    (exit signal-number)))
	(handler-bind ((INTERRUPT-SIGNAL  (function bail-out-on-signals))
		       (STORAGE-CONDITION (function bail-out-on-storage-condition)))		
	  (load "Specware4.lisp"))
XXXX
RC=$?

# If the load failed (non-zero exit status) then we abort.
if [ $RC -ne 0 ]; then
  echo ""
  echo "First load failed with code $RC, exiting ..."
  exit 1
fi

# The second time is just to do the dumplisp. If we do it in one
# go, the generated dxl file is almost 4 times larger.
#
# I once added a (gc) between the load and the dumplisp, and the dxl
# file became 10k bigger. Go figure.

# People who want to avoid lots of line breaks can set *DEFAULT-RIGHT-MARGIN* 
# in their lisp init.

echo " "
echo "Loading Specware ... (for dumplisp)"
echo " "
$LISP -batch <<-XXXX
	(defun bail-out-on-storage-condition (storage-condition)
	    (format t "~&Lisp session terminated after storage condition.~%")
	    (exit 99))
	(defun bail-out-on-signals (os-exception)
	  (let ((signal-number (excl::operating-system-signal-number os-exception))
	        (signal-name   (excl::operating-system-signal-name   os-exception)))
	    (when (stringp signal-number) (rotatef signal-name signal-number)) ; workaround for Allegro bug 
	    (format t "~&Lisp session terminated by OS signal ~D: ~A~%" signal-number signal-name)
	    (exit signal-number)))
	(handler-bind ((INTERRUPT-SIGNAL  (function bail-out-on-signals))
		       (STORAGE-CONDITION (function bail-out-on-storage-condition)))		
	  (load "Specware4.lisp"))
	(setq SW-NOW-RETURNS-STATUS t) ; temp hack -- value is irrelevant, just want to intern symbol
	(excl::dumplisp :name "$SPECWARE4/Applications/Specware/bin/linux/Specware4.dxl")
XXXX
RC=$?

# If the load failed (non-zero exit status) then we abort.
if [ $RC -ne 0 ]; then
  echo ""
  echo "Second load failed with code $RC, exiting ..."
  exit 1
fi

#!/bin/bash --noprofile

# The --noprofile inhibits loading of ~/.bash_profile and ~/.profile
# files. See "man bash" for details. 

# 'set -v' turns on echoing of lines read.
# set -v

PATH=/bin:/usr/bin:/etc:/sbin:/usr/sbin:/usr/local/bin

if [ -z "$APP_NAME" ]; then
  echo "  Generate_Lisp:  APP_NAME not specified."
  exit 1
fi

LISP_MODE=$1

echo "  ================================================================================"
echo "  Generate_Lisp:  Use $LISP_MODE version of Specware to generate ${APP_NAME}.lisp from ${APP_NAME}GenLisp.sw"
echo " "
echo "  Generate_Lisp:  APP_NAME  = [$APP_NAME]"
echo "  Generate_Lisp:  APP_DIR   = [$APP_DIR]"
echo "  Generate_Lisp:  GEN_DIR   = [$GEN_DIR]"
echo "  Generate_Lisp:  APP_SETUP = [$APP_SETUP]"
echo "  Generate_Lisp:  SWPATH    = [$SWPATH]"
echo "  "
echo "  Generate_Lisp:  LISP_MODE = [$LISP_MODE]"
echo "  "

# Use HERE so we get Verify_Lisp from the directory of this script,
# as opposed to the directory from which this script was invoked.
HERE=`/usr/bin/dirname $0`
# bash convention for . means the file is processed inline (as if copied here)
. $HERE/Verify_Lisp ${LISP_MODE}

echo "  ========================================================================"
echo "  Save Backups: "

echo " "
ls -sltr ${GEN_DIR}/${APP_NAME}*.lisp 
echo " "

if [ -f ${GEN_DIR}/${APP_NAME}.lisp ]; then
  echo "  Generate_Lisp:  Saving previous ${APP_NAME}.lisp file ..."
  echo "  Generate_Lisp:  cp -p -f ${GEN_DIR}/${APP_NAME}.lisp ${GEN_DIR}/${APP_NAME}-save.lisp"
  cp -p -f ${GEN_DIR}/${APP_NAME}.lisp ${GEN_DIR}/${APP_NAME}-save.lisp
else
  echo "  Generate_Lisp:  No previous ${APP_NAME}.lisp to save."
fi

echo "  Generate_Lisp:  compiling ${APP_NAME} using $BATCH_SPECWARE"
echo " "

# If the redirection operator is <<-, then all leading tab characters are
# stripped from input lines and  the  line  containing  delimiter.   This
# allows  here-documents within shell scripts to be indented in a natural
# fashion.
# So the XXXX may have tabs before it, but not spaces.  (Nor should there
# be whitespace after it.)

# All the toplevel routines that activate Specware return a boolean value.
# They return true if the call to Specware succeeded without activating
# Specware's toplevel handler. They return false (lisp nil) when the
# handler is invoked. If, when bootrapping, the toplevel handler is
# called, then we abort the bootstrap.

cd $APP_DIR
$BATCH_SPECWARE <<-XXXX
	;; We inherit various utilities from Specware.
        ;; (describe-environment) ; pwd, swpath, etc.
        ${APP_SETUP}
	(exiting-on-errors 
	  (if (sw "/${APP_NAME}GenLisp.sw")
            ;; sw returns T if happy, NIL if there was an error (which might not be signalled to lisp as an error!)
	    (exit-from-lisp 0)
	    (exit-from-lisp 1)))
XXXX
RC=$?

echo "------------------------------------------------------------------------"
echo "  Generate_Lisp:  New Status: "
echo " "
/bin/ls -sltr ${GEN_DIR}/${APP_NAME}*.lisp
echo " "
date
echo "========================================================================"
echo " "

# If the compilation to lisp failed (non-zero exit status) then we abort.
if [ $RC -ne 0 ]; then
  echo ""
  echo "  Generate_Lisp:  Specware processing of ${APP_NAME} failed with code $RC, exiting ..."
  exit $RC
fi

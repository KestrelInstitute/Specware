#!/bin/bash --noprofile

# The --noprofile inhibits loading of ~/.bash_profile and ~/.profile
# files. See "man bash" for details. 

# 'set -v' turns on echoing of lines read.
# set -v

PATH=/bin:/usr/bin:/etc:/sbin:/usr/sbin:/usr/local/bin

if [ -z "$APP_NAME" ]; then
  echo "  Build_App:  APP_NAME not specified."
  exit 1
fi

LISP_MODE=$1

echo "========================================================================"
echo "  Build_App:  Load various .fasl files to build an executable ${APP_NAME} image,"
echo "              as a standalone runtime version, suitable for distribution."
echo " "
echo "  Build_App:  APP_NAME          = [$APP_NAME]"
echo "  Build_App:  APP_DIR           = [$APP_DIR]"
echo "  Build_App:  GEN_DIR           = [$GEN_DIR]"
echo "  Build_App:  BIN_DIR           = [$BIN_DIR]"
echo "  Build_App:  SWPATH            = [$SWPATH]"
echo "  "
echo "  Build_App:  LISP_MODE         = [$LISP_MODE]"
echo "  "
echo "  Build_App:  MAIN_COMPILE_FILE = [$MAIN_COMPILE_FILE]"
echo "  Build_App:  MAIN_BUILD_FILE   = [$MAIN_BUILD_FILE]"
echo "  "

# Use HERE so we get Verify_Lisp from the directory of this script,
# as opposed to the directory from which this script was invoked.
HERE=`/usr/bin/dirname $0`
# bash convention for . means the file is processed inline (as if copied here)
. $HERE/Verify_Lisp ${LISP_MODE}


# name of executable file to be created:
EXECUTABLE=${APP_NAME}.${EXECUTABLE_EXTENSION}

ls -sltr ${GEN_DIR}/${APP_NAME}.* 2>&1
if [ -f ${GEN_DIR}/${APP_NAME}.${FASL_EXTENSION} ]; then
  echo "  Build_App:  Found ${APP_NAME}.$FASL_EXTENSION"
else
  echo "  Build_App:  Missing ${APP_NAME}.${FASL_EXTENSION} -- run Compile_${APP_NAME}_Lisp_${LISP_MODE}"
  exit 1
fi

echo "========================================================================"
echo "  Build_App:  Save Backups: "
echo " "

if [ -f ${BIN_DIR}/$EXECUTABLE ]; then
  ls -sltr ${BIN_DIR}/*${EXECUTABLE}* 2>&1
  echo "  Build_App:  Saving previous $EXECUTABLE executable..."
  echo "  Build_App:  cp -p -f ${BIN_DIR}/$EXECUTABLE ${BIN_DIR}/old-$EXECUTABLE"
  cp -p -f ${BIN_DIR}/$EXECUTABLE ${BIN_DIR}/old-$EXECUTABLE
else
  echo "  Build_App:  No previous ${BIN_DIR}/$EXECUTABLE"
fi

echo "========================================================================"
echo "  Build_App:  Real work: "
echo " "
echo "  Build_App:  Running $LISP to load ${APP_NAME}.${FASL_EXTENSION}, etc., to make $EXECUTABLE"
echo " "

# Note the use of the <<-XXXX in the following. The - means that preceeding
# tabs are removed.  Thus the tabs that follow are significant. If you
# change them to spaces, the end of the "here-document" is not recognized
# (the XXXX).  [??Why is this a good thing to do??]

EXIT_ON_ERRORS=$SPECWARE4/Applications/Handwritten/Lisp/exit-on-errors
MEMORY_MANAGEMENT=$SPECWARE4/Applications/Handwritten/Lisp/memory-management
SAVE_IMAGE=$SPECWARE4/Applications/Handwritten/Lisp/save-image

cd ${APP_DIR}
$BATCH_LISP <<-XXXX
	#+Allegro (format t "Allegro version~%") 
	#+CMU     (format t "CMU version~%") 
        #+MCL     (format t "OpenMCL version~%") 
	(load "$EXIT_ON_ERRORS") 
	(load "$MEMORY_MANAGEMENT") 
	(load "$SAVE_IMAGE") 
	#+Allegro (compact-memory nil 0 32000000)   ; not verbose
	#+Allegro (set-gc-parameters-for-build nil) ; not verbose
	(let ((master-file "${MAIN_BUILD_FILE}"))
	  (exiting-on-errors 
	    (load master-file))
	  (generate-new-lisp-application "$LISP" "${APP_NAME}.${EXECUTABLE_EXTENSION}"
	     "${APP_DIR}/distribution-${LISP_MODE}" (list master-file) nil))
        (exit-from-lisp 0)
XXXX
RC=$?

# If the load failed (non-zero exit status) then we abort.
# if [ $RC -ne 0 ]; then
#  echo ""
#  echo "  Build_App:  Build of ${APP_NAME} application image failed with code $RC, exiting ..."
#  exit $RC
# fi

echo "------------------------------------------------------------------------"
echo "  Build_App:  New Status: "
echo " "

ls -sltr ${BIN_DIR}/*${EXECUTABLE}*  2>&1

echo " "

# If the load failed (non-zero exit status) then we abort.
if [ $RC -ne 0 ]; then
  echo ""
  echo "  Build_App:  Build of ${APP_NAME} application image using $LISP failed with code $RC, exiting ..."
  exit $RC
fi

DISTRIBUTION_DIR="${APP_DIR}/distribution-${LISP_VERSION}"

$SCRIPTDIR/Make_Distribution_Dir $DISTRIBUTION_DIR

# RELEASE_DIR=${APP_DIR}/Release/Linux/${LISP_VERSION}
# TODO: copy highest-numbered patch from {$RELEASE_DIR}/Patches
# cp ${RELEASE_DIR}/Patches/patch-4-0-6.${FASL_EXTENSION} ${APP_DIR}/${DISTRIBUTION_DIR}/Patches
# cp ${RELEASE_DIR}/${APP_NAME}-${LISP_VERSION} ${APP_DIR}/${DISTRIBUTION_DIR}
